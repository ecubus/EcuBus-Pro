/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg)               SWIG_Error(code, msg)
#define SWIG_fail                               goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  throw Napi::Error::New(env, msg);
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      Napi::Error::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_OverflowError:
    case SWIG_IndexError:
      Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_ValueError:
    case SWIG_TypeError:
      Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
      return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(nullptr),
        owned(true),
        size(0),
        info(nullptr)
        {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() {};

    Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}


/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ByteArray swig_types[0]
#define SWIGTYPE_p_CANFD_FILTER_CFG swig_types[1]
#define SWIGTYPE_p_CANFD_FILTER_RULE swig_types[2]
#define SWIGTYPE_p_CHANNEL_HANDLE swig_types[3]
#define SWIGTYPE_p_DEVICE_HANDLE swig_types[4]
#define SWIGTYPE_p_IProperty swig_types[5]
#define SWIGTYPE_p_ReceiveDataArray swig_types[6]
#define SWIGTYPE_p_ReceiveFDDataArray swig_types[7]
#define SWIGTYPE_p_U32Array swig_types[8]
#define SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO swig_types[9]
#define SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN swig_types[10]
#define SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD swig_types[11]
#define SWIGTYPE_p__VCI_LIN_INIT_CONFIG swig_types[12]
#define SWIGTYPE_p__VCI_LIN_MSG swig_types[13]
#define SWIGTYPE_p__VCI_LIN_PUBLISH_CFG swig_types[14]
#define SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX swig_types[15]
#define SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG swig_types[16]
#define SWIGTYPE_p__ZCAN_UDS_CTRL_REQ swig_types[17]
#define SWIGTYPE_p__ZCAN_UDS_CTRL_RESP swig_types[18]
#define SWIGTYPE_p__ZCAN_UDS_REQUEST swig_types[19]
#define SWIGTYPE_p__ZCAN_UDS_RESPONSE swig_types[20]
#define SWIGTYPE_p__ZDOIP_REQUEST swig_types[21]
#define SWIGTYPE_p__ZLIN_UDS_REQUEST swig_types[22]
#define SWIGTYPE_p___int64 swig_types[23]
#define SWIGTYPE_p_can_frame swig_types[24]
#define SWIGTYPE_p_canfd_frame swig_types[25]
#define SWIGTYPE_p_char swig_types[26]
#define SWIGTYPE_p_float swig_types[27]
#define SWIGTYPE_p_int swig_types[28]
#define SWIGTYPE_p_long swig_types[29]
#define SWIGTYPE_p_long_long swig_types[30]
#define SWIGTYPE_p_p_char swig_types[31]
#define SWIGTYPE_p_p_unsigned_long swig_types[32]
#define SWIGTYPE_p_short swig_types[33]
#define SWIGTYPE_p_signed___int64 swig_types[34]
#define SWIGTYPE_p_signed_char swig_types[35]
#define SWIGTYPE_p_tagBusUsage swig_types[36]
#define SWIGTYPE_p_tagTxTimeStamp swig_types[37]
#define SWIGTYPE_p_tagUSBCANFDTxTimeStamp swig_types[38]
#define SWIGTYPE_p_tagZCANCANFDData swig_types[39]
#define SWIGTYPE_p_tagZCANCANFDUdsData swig_types[40]
#define SWIGTYPE_p_tagZCANDataObj swig_types[41]
#define SWIGTYPE_p_tagZCANErrorData swig_types[42]
#define SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ swig_types[43]
#define SWIGTYPE_p_tagZCANGPSData swig_types[44]
#define SWIGTYPE_p_tagZCANLINData swig_types[45]
#define SWIGTYPE_p_tagZCANLINErrData swig_types[46]
#define SWIGTYPE_p_tagZCANLINEventData swig_types[47]
#define SWIGTYPE_p_tagZCANLINExData swig_types[48]
#define SWIGTYPE_p_tagZCANLINUdsData swig_types[49]
#define SWIGTYPE_p_tagZCANUdsRequestDataObj swig_types[50]
#define SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ swig_types[51]
#define SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM swig_types[52]
#define SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO swig_types[53]
#define SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG swig_types[54]
#define SWIGTYPE_p_tagZCAN_CHANNEL_STATUS swig_types[55]
#define SWIGTYPE_p_tagZCAN_DEVICE_INFO swig_types[56]
#define SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG swig_types[57]
#define SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA swig_types[58]
#define SWIGTYPE_p_tagZCAN_ReceiveFD_Data swig_types[59]
#define SWIGTYPE_p_tagZCAN_Receive_Data swig_types[60]
#define SWIGTYPE_p_tagZCAN_TransmitFD_Data swig_types[61]
#define SWIGTYPE_p_tagZCAN_Transmit_Data swig_types[62]
#define SWIGTYPE_p_tagZCLOUD_CHNINFO swig_types[63]
#define SWIGTYPE_p_tagZCLOUD_DEVINFO swig_types[64]
#define SWIGTYPE_p_tagZCLOUD_GPS_FRAME swig_types[65]
#define SWIGTYPE_p_tagZCLOUD_GPS_FRAME____gps_time swig_types[66]
#define SWIGTYPE_p_tagZCLOUD_USER_DATA swig_types[67]
#define SWIGTYPE_p_tagZDoIPUdsData swig_types[68]
#define SWIGTYPE_p_unionCANFDFilterRulePresent swig_types[69]
#define SWIGTYPE_p_unsigned___int64 swig_types[70]
#define SWIGTYPE_p_unsigned_char swig_types[71]
#define SWIGTYPE_p_unsigned_int swig_types[72]
#define SWIGTYPE_p_unsigned_long swig_types[73]
#define SWIGTYPE_p_unsigned_long_long swig_types[74]
#define SWIGTYPE_p_unsigned_short swig_types[75]
#define SWIGTYPE_p_void swig_types[76]
static swig_type_info *swig_types[78];
static swig_module_info swig_module = {swig_types, 77, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <windows.h>
#include <stdlib.h>
#include "zlgcan.h"


#include <stdint.h>		// Use the C99 official header


typedef DEVICE_HANDLE DEVICE_HANDLE;

SWIGINTERN DEVICE_HANDLE *new_DEVICE_HANDLE(){
  return new DEVICE_HANDLE();
}
SWIGINTERN void DEVICE_HANDLE_assign(DEVICE_HANDLE *self,DEVICE_HANDLE value){
  *self = value;
}
SWIGINTERN DEVICE_HANDLE DEVICE_HANDLE_value(DEVICE_HANDLE *self){
  return *self;
}
SWIGINTERN DEVICE_HANDLE *DEVICE_HANDLE_cast(DEVICE_HANDLE *self){
  return self;
}
SWIGINTERN DEVICE_HANDLE *DEVICE_HANDLE_frompointer(DEVICE_HANDLE *t){
  return (DEVICE_HANDLE *) t;
}

typedef CHANNEL_HANDLE CHANNEL_HANDLE;

SWIGINTERN CHANNEL_HANDLE *new_CHANNEL_HANDLE(){
  return new CHANNEL_HANDLE();
}
SWIGINTERN void CHANNEL_HANDLE_assign(CHANNEL_HANDLE *self,CHANNEL_HANDLE value){
  *self = value;
}
SWIGINTERN CHANNEL_HANDLE CHANNEL_HANDLE_value(CHANNEL_HANDLE *self){
  return *self;
}
SWIGINTERN CHANNEL_HANDLE *CHANNEL_HANDLE_cast(CHANNEL_HANDLE *self){
  return self;
}
SWIGINTERN CHANNEL_HANDLE *CHANNEL_HANDLE_frompointer(CHANNEL_HANDLE *t){
  return (CHANNEL_HANDLE *) t;
}

typedef uint32_t U32Array;


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (Napi::Value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN U32Array *new_U32Array(size_t nelements){
  return new uint32_t[nelements]();
}
SWIGINTERN uint32_t U32Array_getitem(U32Array *self,size_t index){
  return self[index];
}

SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN void U32Array_setitem(U32Array *self,size_t index,uint32_t value){
  self[index] = value;
}
SWIGINTERN uint32_t *U32Array_cast(U32Array *self){
  return self;
}
SWIGINTERN U32Array *U32Array_frompointer(uint32_t *t){
  return (U32Array *) t;
}

typedef BYTE ByteArray;

SWIGINTERN ByteArray *new_ByteArray(size_t nelements){
  return new BYTE[nelements]();
}
SWIGINTERN BYTE ByteArray_getitem(ByteArray *self,size_t index){
  return self[index];
}

SWIGINTERNINLINE Napi::Value
SWIG_From_unsigned_SS_char(Napi::Env env, unsigned char c)
{
  return Napi::Number::New(env, static_cast<double>(c));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (Napi::Value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN void ByteArray_setitem(ByteArray *self,size_t index,BYTE value){
  self[index] = value;
}
SWIGINTERN BYTE *ByteArray_cast(ByteArray *self){
  return self;
}
SWIGINTERN ByteArray *ByteArray_frompointer(BYTE *t){
  return (ByteArray *) t;
}

typedef ZCAN_Receive_Data ReceiveDataArray;

SWIGINTERN ReceiveDataArray *new_ReceiveDataArray(size_t nelements){
  return new ZCAN_Receive_Data[nelements]();
}
SWIGINTERN ZCAN_Receive_Data ReceiveDataArray_getitem(ReceiveDataArray *self,size_t index){
  return self[index];
}
SWIGINTERN void ReceiveDataArray_setitem(ReceiveDataArray *self,size_t index,ZCAN_Receive_Data value){
  self[index] = value;
}
SWIGINTERN ZCAN_Receive_Data *ReceiveDataArray_cast(ReceiveDataArray *self){
  return self;
}
SWIGINTERN ReceiveDataArray *ReceiveDataArray_frompointer(ZCAN_Receive_Data *t){
  return (ReceiveDataArray *) t;
}

typedef ZCAN_ReceiveFD_Data ReceiveFDDataArray;

SWIGINTERN ReceiveFDDataArray *new_ReceiveFDDataArray(size_t nelements){
  return new ZCAN_ReceiveFD_Data[nelements]();
}
SWIGINTERN ZCAN_ReceiveFD_Data ReceiveFDDataArray_getitem(ReceiveFDDataArray *self,size_t index){
  return self[index];
}
SWIGINTERN void ReceiveFDDataArray_setitem(ReceiveFDDataArray *self,size_t index,ZCAN_ReceiveFD_Data value){
  self[index] = value;
}
SWIGINTERN ZCAN_ReceiveFD_Data *ReceiveFDDataArray_cast(ReceiveFDDataArray *self){
  return self;
}
SWIGINTERN ReceiveFDDataArray *ReceiveFDDataArray_frompointer(ZCAN_ReceiveFD_Data *t){
  return (ReceiveFDDataArray *) t;
}

SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERNINLINE Napi::Value
SWIG_Env_FromCharPtrAndSize(Napi::Env env, const char* carray, size_t size)
{
  if (carray) {
    Napi::String js_str = Napi::String::New(env, carray, size);
    return js_str;
  } else {
    return env.Undefined();
  }
}


// Override the default one with an empty one


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Napi::Value obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_short (Napi::Value valRef, unsigned short* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned short>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_short(Napi::Env env, unsigned short val)
{
  return Napi::Number::New(env, val);
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long_SS_long(Napi::Env env, unsigned long long val)
{
  return Napi::Number::New(env, val);
}
#endif


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long(Napi::Env env, unsigned long val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERNINLINE Napi::Value
SWIG_From_size_t  SWIG_NAPI_FROM_DECL_ARGS(size_t value)
{    
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    return SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else {
    /* assume sizeof(size_t) <= sizeof(unsigned long long) */
    return SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(value));
  }
#endif
}


SWIGINTERN
int SWIG_AsVal_float (Napi::Value obj, float *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<float>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_float(Napi::Env env, float val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_double(Napi::Env env, double val)
{
  return Napi::Number::New(env, val);
}





void LoadDll(const char* path) {
  SetDllDirectory(path);
}
void handleConver(CHANNEL_HANDLE channel,uint32_t* q){
  //q is array[2],CHANNEL_HANDLE is void* 64bit
  q[0] = (uint32_t)channel;
  q[1] = (uint32_t)(((uint64_t)channel)>>32);
}


#define SWIG_NAPI_INIT xmlpp_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_DEVICE_HANDLE_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_DEVICE_HANDLE_templ(const Napi::CallbackInfo &);
_exports_DEVICE_HANDLE_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_DEVICE_HANDLE(const Napi::CallbackInfo &);
virtual ~_exports_DEVICE_HANDLE_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_DEVICE_HANDLE_assign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DEVICE_HANDLE_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DEVICE_HANDLE_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_DEVICE_HANDLE_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_DEVICE_HANDLE_inst : public _exports_DEVICE_HANDLE_templ<_exports_DEVICE_HANDLE_inst> {
public:
  using _exports_DEVICE_HANDLE_templ::_exports_DEVICE_HANDLE_templ;
  virtual ~_exports_DEVICE_HANDLE_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_DEVICE_HANDLE_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_DEVICE_HANDLE_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: DEVICE_HANDLE (_exports_DEVICE_HANDLE) */
// jsnapi_getclass
Napi::Function _exports_DEVICE_HANDLE_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_DEVICE_HANDLE_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_DEVICE_HANDLE_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_DEVICE_HANDLE_inst>::DefineClass(env, "DEVICE_HANDLE", symbolTable);
}

void _exports_DEVICE_HANDLE_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_DEVICE_HANDLE_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_DEVICE_HANDLE_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("assign");
  members.insert({
    "assign",
      _exports_DEVICE_HANDLE_templ::InstanceMethod("assign",
        &_exports_DEVICE_HANDLE_templ::_wrap_DEVICE_HANDLE_assign,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("value");
  members.insert({
    "value",
      _exports_DEVICE_HANDLE_templ::InstanceMethod("value",
        &_exports_DEVICE_HANDLE_templ::_wrap_DEVICE_HANDLE_value,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_DEVICE_HANDLE_templ::InstanceMethod("cast",
        &_exports_DEVICE_HANDLE_templ::_wrap_DEVICE_HANDLE_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_DEVICE_HANDLE_templ::_wrap_DEVICE_HANDLE_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CHANNEL_HANDLE_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CHANNEL_HANDLE_templ(const Napi::CallbackInfo &);
_exports_CHANNEL_HANDLE_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CHANNEL_HANDLE(const Napi::CallbackInfo &);
virtual ~_exports_CHANNEL_HANDLE_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_CHANNEL_HANDLE_assign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CHANNEL_HANDLE_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CHANNEL_HANDLE_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_CHANNEL_HANDLE_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_CHANNEL_HANDLE_inst : public _exports_CHANNEL_HANDLE_templ<_exports_CHANNEL_HANDLE_inst> {
public:
  using _exports_CHANNEL_HANDLE_templ::_exports_CHANNEL_HANDLE_templ;
  virtual ~_exports_CHANNEL_HANDLE_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CHANNEL_HANDLE_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CHANNEL_HANDLE_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: CHANNEL_HANDLE (_exports_CHANNEL_HANDLE) */
// jsnapi_getclass
Napi::Function _exports_CHANNEL_HANDLE_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_CHANNEL_HANDLE_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_CHANNEL_HANDLE_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_CHANNEL_HANDLE_inst>::DefineClass(env, "CHANNEL_HANDLE", symbolTable);
}

void _exports_CHANNEL_HANDLE_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_CHANNEL_HANDLE_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_CHANNEL_HANDLE_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("assign");
  members.insert({
    "assign",
      _exports_CHANNEL_HANDLE_templ::InstanceMethod("assign",
        &_exports_CHANNEL_HANDLE_templ::_wrap_CHANNEL_HANDLE_assign,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("value");
  members.insert({
    "value",
      _exports_CHANNEL_HANDLE_templ::InstanceMethod("value",
        &_exports_CHANNEL_HANDLE_templ::_wrap_CHANNEL_HANDLE_value,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_CHANNEL_HANDLE_templ::InstanceMethod("cast",
        &_exports_CHANNEL_HANDLE_templ::_wrap_CHANNEL_HANDLE_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_CHANNEL_HANDLE_templ::_wrap_CHANNEL_HANDLE_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_U32Array_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_U32Array_templ(const Napi::CallbackInfo &);
_exports_U32Array_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_U32Array(const Napi::CallbackInfo &);
virtual ~_exports_U32Array_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_U32Array_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_U32Array_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_U32Array_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_U32Array_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_U32Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_U32Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_U32Array_inst : public _exports_U32Array_templ<_exports_U32Array_inst> {
public:
  using _exports_U32Array_templ::_exports_U32Array_templ;
  virtual ~_exports_U32Array_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_U32Array_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_U32Array_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: U32Array (_exports_U32Array) */
// jsnapi_getclass
Napi::Function _exports_U32Array_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_U32Array_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_U32Array_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_U32Array_inst>::DefineClass(env, "U32Array", symbolTable);
}

void _exports_U32Array_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_U32Array_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_U32Array_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_U32Array_templ::InstanceMethod("getitem",
        &_exports_U32Array_templ::_wrap_U32Array_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_U32Array_templ::InstanceMethod("setitem",
        &_exports_U32Array_templ::_wrap_U32Array_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_U32Array_templ::InstanceMethod("cast",
        &_exports_U32Array_templ::_wrap_U32Array_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_U32Array_templ::_wrap_U32Array_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ByteArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ByteArray_templ(const Napi::CallbackInfo &);
_exports_ByteArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ByteArray(const Napi::CallbackInfo &);
virtual ~_exports_ByteArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_ByteArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ByteArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ByteArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ByteArray_inst : public _exports_ByteArray_templ<_exports_ByteArray_inst> {
public:
  using _exports_ByteArray_templ::_exports_ByteArray_templ;
  virtual ~_exports_ByteArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ByteArray (_exports_ByteArray) */
// jsnapi_getclass
Napi::Function _exports_ByteArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ByteArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ByteArray_inst>::DefineClass(env, "ByteArray", symbolTable);
}

void _exports_ByteArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_ByteArray_templ::InstanceMethod("getitem",
        &_exports_ByteArray_templ::_wrap_ByteArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_ByteArray_templ::InstanceMethod("setitem",
        &_exports_ByteArray_templ::_wrap_ByteArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_ByteArray_templ::InstanceMethod("cast",
        &_exports_ByteArray_templ::_wrap_ByteArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_ByteArray_templ::_wrap_ByteArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ReceiveDataArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ReceiveDataArray_templ(const Napi::CallbackInfo &);
_exports_ReceiveDataArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ReceiveDataArray(const Napi::CallbackInfo &);
virtual ~_exports_ReceiveDataArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveDataArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveDataArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveDataArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_ReceiveDataArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ReceiveDataArray_inst : public _exports_ReceiveDataArray_templ<_exports_ReceiveDataArray_inst> {
public:
  using _exports_ReceiveDataArray_templ::_exports_ReceiveDataArray_templ;
  virtual ~_exports_ReceiveDataArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ReceiveDataArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ReceiveDataArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ReceiveDataArray (_exports_ReceiveDataArray) */
// jsnapi_getclass
Napi::Function _exports_ReceiveDataArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ReceiveDataArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ReceiveDataArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ReceiveDataArray_inst>::DefineClass(env, "ReceiveDataArray", symbolTable);
}

void _exports_ReceiveDataArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ReceiveDataArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ReceiveDataArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_ReceiveDataArray_templ::InstanceMethod("getitem",
        &_exports_ReceiveDataArray_templ::_wrap_ReceiveDataArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_ReceiveDataArray_templ::InstanceMethod("setitem",
        &_exports_ReceiveDataArray_templ::_wrap_ReceiveDataArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_ReceiveDataArray_templ::InstanceMethod("cast",
        &_exports_ReceiveDataArray_templ::_wrap_ReceiveDataArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_ReceiveDataArray_templ::_wrap_ReceiveDataArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ReceiveFDDataArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ReceiveFDDataArray_templ(const Napi::CallbackInfo &);
_exports_ReceiveFDDataArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ReceiveFDDataArray(const Napi::CallbackInfo &);
virtual ~_exports_ReceiveFDDataArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveFDDataArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveFDDataArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ReceiveFDDataArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_ReceiveFDDataArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ReceiveFDDataArray_inst : public _exports_ReceiveFDDataArray_templ<_exports_ReceiveFDDataArray_inst> {
public:
  using _exports_ReceiveFDDataArray_templ::_exports_ReceiveFDDataArray_templ;
  virtual ~_exports_ReceiveFDDataArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ReceiveFDDataArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ReceiveFDDataArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ReceiveFDDataArray (_exports_ReceiveFDDataArray) */
// jsnapi_getclass
Napi::Function _exports_ReceiveFDDataArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ReceiveFDDataArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ReceiveFDDataArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ReceiveFDDataArray_inst>::DefineClass(env, "ReceiveFDDataArray", symbolTable);
}

void _exports_ReceiveFDDataArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ReceiveFDDataArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ReceiveFDDataArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_ReceiveFDDataArray_templ::InstanceMethod("getitem",
        &_exports_ReceiveFDDataArray_templ::_wrap_ReceiveFDDataArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_ReceiveFDDataArray_templ::InstanceMethod("setitem",
        &_exports_ReceiveFDDataArray_templ::_wrap_ReceiveFDDataArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_ReceiveFDDataArray_templ::InstanceMethod("cast",
        &_exports_ReceiveFDDataArray_templ::_wrap_ReceiveFDDataArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_ReceiveFDDataArray_templ::_wrap_ReceiveFDDataArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_can_frame_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_can_frame_templ(const Napi::CallbackInfo &);
_exports_can_frame_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame_can_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame_can_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame_can_dlc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame_can_dlc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame___pad_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame___pad_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame___res0_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame___res0_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame___res1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame___res1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_can_frame_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_can_frame_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_can_frame(const Napi::CallbackInfo &);
virtual ~_exports_can_frame_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_can_frame_inst : public _exports_can_frame_templ<_exports_can_frame_inst> {
public:
  using _exports_can_frame_templ::_exports_can_frame_templ;
  virtual ~_exports_can_frame_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_can_frame_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_can_frame_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: can_frame (_exports_can_frame) */
// jsnapi_getclass
Napi::Function _exports_can_frame_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_can_frame_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_can_frame_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_can_frame_inst>::DefineClass(env, "can_frame", symbolTable);
}

void _exports_can_frame_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_can_frame_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_can_frame_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("can_id");
  members.insert({
    "can_id",
      _exports_can_frame_templ::InstanceAccessor("can_id",
        &_exports_can_frame_templ::_wrap_can_frame_can_id_get,
        &_exports_can_frame_templ::_wrap_can_frame_can_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_dlc");
  members.insert({
    "can_dlc",
      _exports_can_frame_templ::InstanceAccessor("can_dlc",
        &_exports_can_frame_templ::_wrap_can_frame_can_dlc_get,
        &_exports_can_frame_templ::_wrap_can_frame_can_dlc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("__pad");
  members.insert({
    "__pad",
      _exports_can_frame_templ::InstanceAccessor("__pad",
        &_exports_can_frame_templ::_wrap_can_frame___pad_get,
        &_exports_can_frame_templ::_wrap_can_frame___pad_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("__res0");
  members.insert({
    "__res0",
      _exports_can_frame_templ::InstanceAccessor("__res0",
        &_exports_can_frame_templ::_wrap_can_frame___res0_get,
        &_exports_can_frame_templ::_wrap_can_frame___res0_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("__res1");
  members.insert({
    "__res1",
      _exports_can_frame_templ::InstanceAccessor("__res1",
        &_exports_can_frame_templ::_wrap_can_frame___res1_get,
        &_exports_can_frame_templ::_wrap_can_frame___res1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_can_frame_templ::InstanceAccessor("data",
        &_exports_can_frame_templ::_wrap_can_frame_data_get,
        &_exports_can_frame_templ::_wrap_can_frame_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_canfd_frame_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_canfd_frame_templ(const Napi::CallbackInfo &);
_exports_canfd_frame_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame_can_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame_can_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame_len_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame_len_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame___res0_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame___res0_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame___res1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame___res1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_frame_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_frame_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_canfd_frame(const Napi::CallbackInfo &);
virtual ~_exports_canfd_frame_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_canfd_frame_inst : public _exports_canfd_frame_templ<_exports_canfd_frame_inst> {
public:
  using _exports_canfd_frame_templ::_exports_canfd_frame_templ;
  virtual ~_exports_canfd_frame_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_canfd_frame_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_canfd_frame_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: canfd_frame (_exports_canfd_frame) */
// jsnapi_getclass
Napi::Function _exports_canfd_frame_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_canfd_frame_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_canfd_frame_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_canfd_frame_inst>::DefineClass(env, "canfd_frame", symbolTable);
}

void _exports_canfd_frame_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_canfd_frame_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_canfd_frame_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("can_id");
  members.insert({
    "can_id",
      _exports_canfd_frame_templ::InstanceAccessor("can_id",
        &_exports_canfd_frame_templ::_wrap_canfd_frame_can_id_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame_can_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("len");
  members.insert({
    "len",
      _exports_canfd_frame_templ::InstanceAccessor("len",
        &_exports_canfd_frame_templ::_wrap_canfd_frame_len_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame_len_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_canfd_frame_templ::InstanceAccessor("flags",
        &_exports_canfd_frame_templ::_wrap_canfd_frame_flags_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("__res0");
  members.insert({
    "__res0",
      _exports_canfd_frame_templ::InstanceAccessor("__res0",
        &_exports_canfd_frame_templ::_wrap_canfd_frame___res0_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame___res0_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("__res1");
  members.insert({
    "__res1",
      _exports_canfd_frame_templ::InstanceAccessor("__res1",
        &_exports_canfd_frame_templ::_wrap_canfd_frame___res1_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame___res1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_canfd_frame_templ::InstanceAccessor("data",
        &_exports_canfd_frame_templ::_wrap_canfd_frame_data_get,
        &_exports_canfd_frame_templ::_wrap_canfd_frame_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ(const Napi::CallbackInfo &);
_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_DYNAMIC_CONFIG_DATA(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_DYNAMIC_CONFIG_DATA_inst : public _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<_exports_ZCAN_DYNAMIC_CONFIG_DATA_inst> {
public:
  using _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ;
  virtual ~_exports_ZCAN_DYNAMIC_CONFIG_DATA_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_DYNAMIC_CONFIG_DATA (_exports_ZCAN_DYNAMIC_CONFIG_DATA) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_DYNAMIC_CONFIG_DATA_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_DYNAMIC_CONFIG_DATA_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_DYNAMIC_CONFIG_DATA_inst>::DefineClass(env, "ZCAN_DYNAMIC_CONFIG_DATA", symbolTable);
}

void _exports_ZCAN_DYNAMIC_CONFIG_DATA_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("key");
  members.insert({
    "key",
      _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::InstanceAccessor("key",
        &_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_get,
        &_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("value");
  members.insert({
    "value",
      _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::InstanceAccessor("value",
        &_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_get,
        &_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_unionCANFDFilterRulePresent_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_unionCANFDFilterRulePresent_templ(const Napi::CallbackInfo &);
_exports_unionCANFDFilterRulePresent_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_unionCANFDFilterRulePresent_rawValue_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_unionCANFDFilterRulePresent_rawValue_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_unionCANFDFilterRulePresent(const Napi::CallbackInfo &);
virtual ~_exports_unionCANFDFilterRulePresent_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_unionCANFDFilterRulePresent_inst : public _exports_unionCANFDFilterRulePresent_templ<_exports_unionCANFDFilterRulePresent_inst> {
public:
  using _exports_unionCANFDFilterRulePresent_templ::_exports_unionCANFDFilterRulePresent_templ;
  virtual ~_exports_unionCANFDFilterRulePresent_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_unionCANFDFilterRulePresent_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_unionCANFDFilterRulePresent_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: unionCANFDFilterRulePresent (_exports_unionCANFDFilterRulePresent) */
// jsnapi_getclass
Napi::Function _exports_unionCANFDFilterRulePresent_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_unionCANFDFilterRulePresent_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_unionCANFDFilterRulePresent_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_unionCANFDFilterRulePresent_inst>::DefineClass(env, "unionCANFDFilterRulePresent", symbolTable);
}

void _exports_unionCANFDFilterRulePresent_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_unionCANFDFilterRulePresent_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_unionCANFDFilterRulePresent_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("rawValue");
  members.insert({
    "rawValue",
      _exports_unionCANFDFilterRulePresent_templ::InstanceAccessor("rawValue",
        &_exports_unionCANFDFilterRulePresent_templ::_wrap_unionCANFDFilterRulePresent_rawValue_get,
        &_exports_unionCANFDFilterRulePresent_templ::_wrap_unionCANFDFilterRulePresent_rawValue_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CANFD_FILTER_RULE_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CANFD_FILTER_RULE_templ(const Napi::CallbackInfo &);
_exports_CANFD_FILTER_RULE_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_presentFlag_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_presentFlag_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nErr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nErr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nChnl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nChnl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nFD_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nFD_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nExt_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nExt_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nRtr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nRtr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nBeginID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nBeginID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nEndID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nEndID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nBeginTime_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nBeginTime_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nEndTime_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nEndTime_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nFilterDataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nFilterDataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nMaskDataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nMaskDataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nFilterData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nFilterData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_RULE_nMaskData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_RULE_nMaskData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CANFD_FILTER_RULE(const Napi::CallbackInfo &);
virtual ~_exports_CANFD_FILTER_RULE_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_CANFD_FILTER_RULE_inst : public _exports_CANFD_FILTER_RULE_templ<_exports_CANFD_FILTER_RULE_inst> {
public:
  using _exports_CANFD_FILTER_RULE_templ::_exports_CANFD_FILTER_RULE_templ;
  virtual ~_exports_CANFD_FILTER_RULE_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CANFD_FILTER_RULE_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CANFD_FILTER_RULE_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: CANFD_FILTER_RULE (_exports_CANFD_FILTER_RULE) */
// jsnapi_getclass
Napi::Function _exports_CANFD_FILTER_RULE_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_CANFD_FILTER_RULE_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_CANFD_FILTER_RULE_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_CANFD_FILTER_RULE_inst>::DefineClass(env, "CANFD_FILTER_RULE", symbolTable);
}

void _exports_CANFD_FILTER_RULE_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_CANFD_FILTER_RULE_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_CANFD_FILTER_RULE_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("presentFlag");
  members.insert({
    "presentFlag",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("presentFlag",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_presentFlag_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_presentFlag_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nErr");
  members.insert({
    "nErr",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nErr",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nErr_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nErr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nChnl");
  members.insert({
    "nChnl",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nChnl",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nChnl_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nChnl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nFD");
  members.insert({
    "nFD",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nFD",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFD_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFD_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nExt");
  members.insert({
    "nExt",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nExt",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nExt_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nExt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nRtr");
  members.insert({
    "nRtr",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nRtr",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nRtr_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nRtr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nLen");
  members.insert({
    "nLen",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nLen",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nLen_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nBeginID");
  members.insert({
    "nBeginID",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nBeginID",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nBeginID_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nBeginID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nEndID");
  members.insert({
    "nEndID",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nEndID",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nEndID_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nEndID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nBeginTime");
  members.insert({
    "nBeginTime",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nBeginTime",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nBeginTime_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nBeginTime_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nEndTime");
  members.insert({
    "nEndTime",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nEndTime",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nEndTime_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nEndTime_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nFilterDataLen");
  members.insert({
    "nFilterDataLen",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nFilterDataLen",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFilterDataLen_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFilterDataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nMaskDataLen");
  members.insert({
    "nMaskDataLen",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nMaskDataLen",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nMaskDataLen_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nMaskDataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nFilterData");
  members.insert({
    "nFilterData",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nFilterData",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFilterData_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nFilterData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nMaskData");
  members.insert({
    "nMaskData",
      _exports_CANFD_FILTER_RULE_templ::InstanceAccessor("nMaskData",
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nMaskData_get,
        &_exports_CANFD_FILTER_RULE_templ::_wrap_CANFD_FILTER_RULE_nMaskData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CANFD_FILTER_CFG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CANFD_FILTER_CFG_templ(const Napi::CallbackInfo &);
_exports_CANFD_FILTER_CFG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_CFG_bEnable_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_CFG_bEnable_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_CFG_enBlackWhiteList_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_CFG_enBlackWhiteList_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CANFD_FILTER_CFG_vecFilters_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_CANFD_FILTER_CFG_vecFilters_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CANFD_FILTER_CFG(const Napi::CallbackInfo &);
virtual ~_exports_CANFD_FILTER_CFG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_CANFD_FILTER_CFG_inst : public _exports_CANFD_FILTER_CFG_templ<_exports_CANFD_FILTER_CFG_inst> {
public:
  using _exports_CANFD_FILTER_CFG_templ::_exports_CANFD_FILTER_CFG_templ;
  virtual ~_exports_CANFD_FILTER_CFG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CANFD_FILTER_CFG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CANFD_FILTER_CFG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: CANFD_FILTER_CFG (_exports_CANFD_FILTER_CFG) */
// jsnapi_getclass
Napi::Function _exports_CANFD_FILTER_CFG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_CANFD_FILTER_CFG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_CANFD_FILTER_CFG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_CANFD_FILTER_CFG_inst>::DefineClass(env, "CANFD_FILTER_CFG", symbolTable);
}

void _exports_CANFD_FILTER_CFG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_CANFD_FILTER_CFG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_CANFD_FILTER_CFG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("bEnable");
  members.insert({
    "bEnable",
      _exports_CANFD_FILTER_CFG_templ::InstanceAccessor("bEnable",
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_bEnable_get,
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_bEnable_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("enBlackWhiteList");
  members.insert({
    "enBlackWhiteList",
      _exports_CANFD_FILTER_CFG_templ::InstanceAccessor("enBlackWhiteList",
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_enBlackWhiteList_get,
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_enBlackWhiteList_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("vecFilters");
  members.insert({
    "vecFilters",
      _exports_CANFD_FILTER_CFG_templ::InstanceAccessor("vecFilters",
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_vecFilters_get,
        &_exports_CANFD_FILTER_CFG_templ::_wrap_CANFD_FILTER_CFG_vecFilters_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_DYNAMIC_CONFIG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_DYNAMIC_CONFIG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_DYNAMIC_CONFIG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DYNAMIC_CONFIG_isPersist_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DYNAMIC_CONFIG_isPersist_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_DYNAMIC_CONFIG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_DYNAMIC_CONFIG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_DYNAMIC_CONFIG_inst : public _exports_ZCAN_DYNAMIC_CONFIG_templ<_exports_ZCAN_DYNAMIC_CONFIG_inst> {
public:
  using _exports_ZCAN_DYNAMIC_CONFIG_templ::_exports_ZCAN_DYNAMIC_CONFIG_templ;
  virtual ~_exports_ZCAN_DYNAMIC_CONFIG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_DYNAMIC_CONFIG (_exports_ZCAN_DYNAMIC_CONFIG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_DYNAMIC_CONFIG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_DYNAMIC_CONFIG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_DYNAMIC_CONFIG_inst>::DefineClass(env, "ZCAN_DYNAMIC_CONFIG", symbolTable);
}

void _exports_ZCAN_DYNAMIC_CONFIG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_DYNAMIC_CONFIG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("dynamicConfigDataType");
  members.insert({
    "dynamicConfigDataType",
      _exports_ZCAN_DYNAMIC_CONFIG_templ::InstanceAccessor("dynamicConfigDataType",
        &_exports_ZCAN_DYNAMIC_CONFIG_templ::_wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_get,
        &_exports_ZCAN_DYNAMIC_CONFIG_templ::_wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("isPersist");
  members.insert({
    "isPersist",
      _exports_ZCAN_DYNAMIC_CONFIG_templ::InstanceAccessor("isPersist",
        &_exports_ZCAN_DYNAMIC_CONFIG_templ::_wrap_ZCAN_DYNAMIC_CONFIG_isPersist_get,
        &_exports_ZCAN_DYNAMIC_CONFIG_templ::_wrap_ZCAN_DYNAMIC_CONFIG_isPersist_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_DEVICE_INFO_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_DEVICE_INFO_templ(const Napi::CallbackInfo &);
_exports_ZCAN_DEVICE_INFO_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_hw_Version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_hw_Version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_fw_Version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_fw_Version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_dr_Version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_dr_Version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_in_Version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_in_Version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_irq_Num_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_irq_Num_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_can_Num_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_can_Num_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_str_Serial_Num_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_str_Serial_Num_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_str_hw_Type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_str_hw_Type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_DEVICE_INFO_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_DEVICE_INFO_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_DEVICE_INFO(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_DEVICE_INFO_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_DEVICE_INFO_inst : public _exports_ZCAN_DEVICE_INFO_templ<_exports_ZCAN_DEVICE_INFO_inst> {
public:
  using _exports_ZCAN_DEVICE_INFO_templ::_exports_ZCAN_DEVICE_INFO_templ;
  virtual ~_exports_ZCAN_DEVICE_INFO_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_DEVICE_INFO_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_DEVICE_INFO_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_DEVICE_INFO (_exports_ZCAN_DEVICE_INFO) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_DEVICE_INFO_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_DEVICE_INFO_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_DEVICE_INFO_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_DEVICE_INFO_inst>::DefineClass(env, "ZCAN_DEVICE_INFO", symbolTable);
}

void _exports_ZCAN_DEVICE_INFO_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_DEVICE_INFO_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_DEVICE_INFO_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("hw_Version");
  members.insert({
    "hw_Version",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("hw_Version",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_hw_Version_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_hw_Version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fw_Version");
  members.insert({
    "fw_Version",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("fw_Version",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_fw_Version_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_fw_Version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dr_Version");
  members.insert({
    "dr_Version",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("dr_Version",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_dr_Version_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_dr_Version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("in_Version");
  members.insert({
    "in_Version",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("in_Version",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_in_Version_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_in_Version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("irq_Num");
  members.insert({
    "irq_Num",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("irq_Num",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_irq_Num_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_irq_Num_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_Num");
  members.insert({
    "can_Num",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("can_Num",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_can_Num_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_can_Num_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("str_Serial_Num");
  members.insert({
    "str_Serial_Num",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("str_Serial_Num",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_str_Serial_Num_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_str_Serial_Num_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("str_hw_Type");
  members.insert({
    "str_hw_Type",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("str_hw_Type",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_str_hw_Type_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_str_hw_Type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_DEVICE_INFO_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_reserved_get,
        &_exports_ZCAN_DEVICE_INFO_templ::_wrap_ZCAN_DEVICE_INFO_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst : public _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst> {
public:
  using _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ;
  virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst>::DefineClass(env, "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN", symbolTable);
}

void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("acc_code");
  members.insert({
    "acc_code",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("acc_code",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("acc_mask");
  members.insert({
    "acc_mask",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("acc_mask",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("filter");
  members.insert({
    "filter",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("filter",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timing0");
  members.insert({
    "timing0",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("timing0",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timing1");
  members.insert({
    "timing1",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("timing1",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("mode");
  members.insert({
    "mode",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::InstanceAccessor("mode",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst : public _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst> {
public:
  using _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ;
  virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst>::DefineClass(env, "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD", symbolTable);
}

void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("acc_code");
  members.insert({
    "acc_code",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("acc_code",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("acc_mask");
  members.insert({
    "acc_mask",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("acc_mask",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("abit_timing");
  members.insert({
    "abit_timing",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("abit_timing",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dbit_timing");
  members.insert({
    "dbit_timing",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("dbit_timing",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp");
  members.insert({
    "brp",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("brp",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("filter");
  members.insert({
    "filter",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("filter",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("mode");
  members.insert({
    "mode",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("mode",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("pad");
  members.insert({
    "pad",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("pad",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst : public _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst> {
public:
  using _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ;
  virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst>::DefineClass(env, "ZCAN_CHANNEL_INIT_CONFIG_INFO", symbolTable);
}

void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("can");
  members.insert({
    "can",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::InstanceAccessor("can",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("canfd");
  members.insert({
    "canfd",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::InstanceAccessor("canfd",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_INIT_CONFIG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_INIT_CONFIG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_INIT_CONFIG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_INIT_CONFIG_info_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_INIT_CONFIG_info_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_INIT_CONFIG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_INIT_CONFIG_inst : public _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<_exports_ZCAN_CHANNEL_INIT_CONFIG_inst> {
public:
  using _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::_exports_ZCAN_CHANNEL_INIT_CONFIG_templ;
  virtual ~_exports_ZCAN_CHANNEL_INIT_CONFIG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_INIT_CONFIG (_exports_ZCAN_CHANNEL_INIT_CONFIG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_INIT_CONFIG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_INIT_CONFIG_inst>::DefineClass(env, "ZCAN_CHANNEL_INIT_CONFIG", symbolTable);
}

void _exports_ZCAN_CHANNEL_INIT_CONFIG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("can_type");
  members.insert({
    "can_type",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::InstanceAccessor("can_type",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("info");
  members.insert({
    "info",
      _exports_ZCAN_CHANNEL_INIT_CONFIG_templ::InstanceAccessor("info",
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_info_get,
        &_exports_ZCAN_CHANNEL_INIT_CONFIG_templ::_wrap_ZCAN_CHANNEL_INIT_CONFIG_info_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_ERR_INFO_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_ERR_INFO_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_ERR_INFO_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_ERR_INFO_error_code_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_ERR_INFO_error_code_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_ERR_INFO(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_ERR_INFO_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_ERR_INFO_inst : public _exports_ZCAN_CHANNEL_ERR_INFO_templ<_exports_ZCAN_CHANNEL_ERR_INFO_inst> {
public:
  using _exports_ZCAN_CHANNEL_ERR_INFO_templ::_exports_ZCAN_CHANNEL_ERR_INFO_templ;
  virtual ~_exports_ZCAN_CHANNEL_ERR_INFO_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_ERR_INFO_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_ERR_INFO_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_ERR_INFO (_exports_ZCAN_CHANNEL_ERR_INFO) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_ERR_INFO_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_ERR_INFO_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_ERR_INFO_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_ERR_INFO_inst>::DefineClass(env, "ZCAN_CHANNEL_ERR_INFO", symbolTable);
}

void _exports_ZCAN_CHANNEL_ERR_INFO_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_ERR_INFO_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_ERR_INFO_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("error_code");
  members.insert({
    "error_code",
      _exports_ZCAN_CHANNEL_ERR_INFO_templ::InstanceAccessor("error_code",
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_error_code_get,
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_error_code_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("passive_ErrData");
  members.insert({
    "passive_ErrData",
      _exports_ZCAN_CHANNEL_ERR_INFO_templ::InstanceAccessor("passive_ErrData",
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_get,
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("arLost_ErrData");
  members.insert({
    "arLost_ErrData",
      _exports_ZCAN_CHANNEL_ERR_INFO_templ::InstanceAccessor("arLost_ErrData",
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_get,
        &_exports_ZCAN_CHANNEL_ERR_INFO_templ::_wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_CHANNEL_STATUS_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_CHANNEL_STATUS_templ(const Napi::CallbackInfo &);
_exports_ZCAN_CHANNEL_STATUS_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_errInterrupt_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_errInterrupt_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regStatus_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regStatus_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regALCapture_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regALCapture_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regECCapture_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regECCapture_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regEWLimit_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regEWLimit_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regRECounter_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regRECounter_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_regTECounter_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_regTECounter_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_CHANNEL_STATUS_Reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_CHANNEL_STATUS_Reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_CHANNEL_STATUS(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_CHANNEL_STATUS_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_CHANNEL_STATUS_inst : public _exports_ZCAN_CHANNEL_STATUS_templ<_exports_ZCAN_CHANNEL_STATUS_inst> {
public:
  using _exports_ZCAN_CHANNEL_STATUS_templ::_exports_ZCAN_CHANNEL_STATUS_templ;
  virtual ~_exports_ZCAN_CHANNEL_STATUS_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_CHANNEL_STATUS_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_CHANNEL_STATUS_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_CHANNEL_STATUS (_exports_ZCAN_CHANNEL_STATUS) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_CHANNEL_STATUS_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_CHANNEL_STATUS_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_CHANNEL_STATUS_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_CHANNEL_STATUS_inst>::DefineClass(env, "ZCAN_CHANNEL_STATUS", symbolTable);
}

void _exports_ZCAN_CHANNEL_STATUS_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_CHANNEL_STATUS_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_CHANNEL_STATUS_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("errInterrupt");
  members.insert({
    "errInterrupt",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("errInterrupt",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_errInterrupt_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_errInterrupt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regMode");
  members.insert({
    "regMode",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regMode",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regMode_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regStatus");
  members.insert({
    "regStatus",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regStatus",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regStatus_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regStatus_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regALCapture");
  members.insert({
    "regALCapture",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regALCapture",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regALCapture_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regALCapture_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regECCapture");
  members.insert({
    "regECCapture",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regECCapture",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regECCapture_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regECCapture_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regEWLimit");
  members.insert({
    "regEWLimit",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regEWLimit",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regEWLimit_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regEWLimit_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regRECounter");
  members.insert({
    "regRECounter",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regRECounter",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regRECounter_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regRECounter_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("regTECounter");
  members.insert({
    "regTECounter",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("regTECounter",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regTECounter_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_regTECounter_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("Reserved");
  members.insert({
    "Reserved",
      _exports_ZCAN_CHANNEL_STATUS_templ::InstanceAccessor("Reserved",
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_Reserved_get,
        &_exports_ZCAN_CHANNEL_STATUS_templ::_wrap_ZCAN_CHANNEL_STATUS_Reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_Transmit_Data_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_Transmit_Data_templ(const Napi::CallbackInfo &);
_exports_ZCAN_Transmit_Data_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_Transmit_Data_frame_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_Transmit_Data_frame_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_Transmit_Data_transmit_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_Transmit_Data_transmit_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_Transmit_Data(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_Transmit_Data_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_Transmit_Data_inst : public _exports_ZCAN_Transmit_Data_templ<_exports_ZCAN_Transmit_Data_inst> {
public:
  using _exports_ZCAN_Transmit_Data_templ::_exports_ZCAN_Transmit_Data_templ;
  virtual ~_exports_ZCAN_Transmit_Data_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_Transmit_Data_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_Transmit_Data_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_Transmit_Data (_exports_ZCAN_Transmit_Data) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_Transmit_Data_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_Transmit_Data_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_Transmit_Data_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_Transmit_Data_inst>::DefineClass(env, "ZCAN_Transmit_Data", symbolTable);
}

void _exports_ZCAN_Transmit_Data_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_Transmit_Data_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_Transmit_Data_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("frame");
  members.insert({
    "frame",
      _exports_ZCAN_Transmit_Data_templ::InstanceAccessor("frame",
        &_exports_ZCAN_Transmit_Data_templ::_wrap_ZCAN_Transmit_Data_frame_get,
        &_exports_ZCAN_Transmit_Data_templ::_wrap_ZCAN_Transmit_Data_frame_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("transmit_type");
  members.insert({
    "transmit_type",
      _exports_ZCAN_Transmit_Data_templ::InstanceAccessor("transmit_type",
        &_exports_ZCAN_Transmit_Data_templ::_wrap_ZCAN_Transmit_Data_transmit_type_get,
        &_exports_ZCAN_Transmit_Data_templ::_wrap_ZCAN_Transmit_Data_transmit_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_Receive_Data_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_Receive_Data_templ(const Napi::CallbackInfo &);
_exports_ZCAN_Receive_Data_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_Receive_Data_frame_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_Receive_Data_frame_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_Receive_Data_timestamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_Receive_Data_timestamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_Receive_Data(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_Receive_Data_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_Receive_Data_inst : public _exports_ZCAN_Receive_Data_templ<_exports_ZCAN_Receive_Data_inst> {
public:
  using _exports_ZCAN_Receive_Data_templ::_exports_ZCAN_Receive_Data_templ;
  virtual ~_exports_ZCAN_Receive_Data_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_Receive_Data_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_Receive_Data_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_Receive_Data (_exports_ZCAN_Receive_Data) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_Receive_Data_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_Receive_Data_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_Receive_Data_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_Receive_Data_inst>::DefineClass(env, "ZCAN_Receive_Data", symbolTable);
}

void _exports_ZCAN_Receive_Data_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_Receive_Data_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_Receive_Data_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("frame");
  members.insert({
    "frame",
      _exports_ZCAN_Receive_Data_templ::InstanceAccessor("frame",
        &_exports_ZCAN_Receive_Data_templ::_wrap_ZCAN_Receive_Data_frame_get,
        &_exports_ZCAN_Receive_Data_templ::_wrap_ZCAN_Receive_Data_frame_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timestamp");
  members.insert({
    "timestamp",
      _exports_ZCAN_Receive_Data_templ::InstanceAccessor("timestamp",
        &_exports_ZCAN_Receive_Data_templ::_wrap_ZCAN_Receive_Data_timestamp_get,
        &_exports_ZCAN_Receive_Data_templ::_wrap_ZCAN_Receive_Data_timestamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_TransmitFD_Data_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_TransmitFD_Data_templ(const Napi::CallbackInfo &);
_exports_ZCAN_TransmitFD_Data_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_TransmitFD_Data_frame_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_TransmitFD_Data_frame_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_TransmitFD_Data_transmit_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_TransmitFD_Data_transmit_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_TransmitFD_Data(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_TransmitFD_Data_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_TransmitFD_Data_inst : public _exports_ZCAN_TransmitFD_Data_templ<_exports_ZCAN_TransmitFD_Data_inst> {
public:
  using _exports_ZCAN_TransmitFD_Data_templ::_exports_ZCAN_TransmitFD_Data_templ;
  virtual ~_exports_ZCAN_TransmitFD_Data_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_TransmitFD_Data_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_TransmitFD_Data_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_TransmitFD_Data (_exports_ZCAN_TransmitFD_Data) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_TransmitFD_Data_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_TransmitFD_Data_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_TransmitFD_Data_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_TransmitFD_Data_inst>::DefineClass(env, "ZCAN_TransmitFD_Data", symbolTable);
}

void _exports_ZCAN_TransmitFD_Data_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_TransmitFD_Data_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_TransmitFD_Data_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("frame");
  members.insert({
    "frame",
      _exports_ZCAN_TransmitFD_Data_templ::InstanceAccessor("frame",
        &_exports_ZCAN_TransmitFD_Data_templ::_wrap_ZCAN_TransmitFD_Data_frame_get,
        &_exports_ZCAN_TransmitFD_Data_templ::_wrap_ZCAN_TransmitFD_Data_frame_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("transmit_type");
  members.insert({
    "transmit_type",
      _exports_ZCAN_TransmitFD_Data_templ::InstanceAccessor("transmit_type",
        &_exports_ZCAN_TransmitFD_Data_templ::_wrap_ZCAN_TransmitFD_Data_transmit_type_get,
        &_exports_ZCAN_TransmitFD_Data_templ::_wrap_ZCAN_TransmitFD_Data_transmit_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_ReceiveFD_Data_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_ReceiveFD_Data_templ(const Napi::CallbackInfo &);
_exports_ZCAN_ReceiveFD_Data_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_ReceiveFD_Data_frame_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_ReceiveFD_Data_frame_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_ReceiveFD_Data_timestamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_ReceiveFD_Data_timestamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_ReceiveFD_Data(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_ReceiveFD_Data_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_ReceiveFD_Data_inst : public _exports_ZCAN_ReceiveFD_Data_templ<_exports_ZCAN_ReceiveFD_Data_inst> {
public:
  using _exports_ZCAN_ReceiveFD_Data_templ::_exports_ZCAN_ReceiveFD_Data_templ;
  virtual ~_exports_ZCAN_ReceiveFD_Data_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_ReceiveFD_Data_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_ReceiveFD_Data_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_ReceiveFD_Data (_exports_ZCAN_ReceiveFD_Data) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_ReceiveFD_Data_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_ReceiveFD_Data_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_ReceiveFD_Data_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_ReceiveFD_Data_inst>::DefineClass(env, "ZCAN_ReceiveFD_Data", symbolTable);
}

void _exports_ZCAN_ReceiveFD_Data_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_ReceiveFD_Data_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_ReceiveFD_Data_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("frame");
  members.insert({
    "frame",
      _exports_ZCAN_ReceiveFD_Data_templ::InstanceAccessor("frame",
        &_exports_ZCAN_ReceiveFD_Data_templ::_wrap_ZCAN_ReceiveFD_Data_frame_get,
        &_exports_ZCAN_ReceiveFD_Data_templ::_wrap_ZCAN_ReceiveFD_Data_frame_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timestamp");
  members.insert({
    "timestamp",
      _exports_ZCAN_ReceiveFD_Data_templ::InstanceAccessor("timestamp",
        &_exports_ZCAN_ReceiveFD_Data_templ::_wrap_ZCAN_ReceiveFD_Data_timestamp_get,
        &_exports_ZCAN_ReceiveFD_Data_templ::_wrap_ZCAN_ReceiveFD_Data_timestamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ(const Napi::CallbackInfo &);
_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_AUTO_TRANSMIT_OBJ(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_AUTO_TRANSMIT_OBJ_inst : public _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<_exports_ZCAN_AUTO_TRANSMIT_OBJ_inst> {
public:
  using _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ;
  virtual ~_exports_ZCAN_AUTO_TRANSMIT_OBJ_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_AUTO_TRANSMIT_OBJ (_exports_ZCAN_AUTO_TRANSMIT_OBJ) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_AUTO_TRANSMIT_OBJ_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_AUTO_TRANSMIT_OBJ_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_AUTO_TRANSMIT_OBJ_inst>::DefineClass(env, "ZCAN_AUTO_TRANSMIT_OBJ", symbolTable);
}

void _exports_ZCAN_AUTO_TRANSMIT_OBJ_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("enable");
  members.insert({
    "enable",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("enable",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("index");
  members.insert({
    "index",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("index",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("interval");
  members.insert({
    "interval",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("interval",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("obj");
  members.insert({
    "obj",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("obj",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ(const Napi::CallbackInfo &);
_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANFD_AUTO_TRANSMIT_OBJ(const Napi::CallbackInfo &);
virtual ~_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst : public _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<_exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst> {
public:
  using _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ;
  virtual ~_exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANFD_AUTO_TRANSMIT_OBJ (_exports_ZCANFD_AUTO_TRANSMIT_OBJ) */
// jsnapi_getclass
Napi::Function _exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst>::DefineClass(env, "ZCANFD_AUTO_TRANSMIT_OBJ", symbolTable);
}

void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("enable");
  members.insert({
    "enable",
      _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("enable",
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_get,
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("index");
  members.insert({
    "index",
      _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("index",
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_get,
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("interval");
  members.insert({
    "interval",
      _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("interval",
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_get,
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("obj");
  members.insert({
    "obj",
      _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::InstanceAccessor("obj",
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_get,
        &_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ(const Napi::CallbackInfo &);
_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_AUTO_TRANSMIT_OBJ_PARAM(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst : public _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst> {
public:
  using _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ;
  virtual ~_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_AUTO_TRANSMIT_OBJ_PARAM (_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst>::DefineClass(env, "ZCAN_AUTO_TRANSMIT_OBJ_PARAM", symbolTable);
}

void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("index");
  members.insert({
    "index",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::InstanceAccessor("index",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::InstanceAccessor("type",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("value");
  members.insert({
    "value",
      _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::InstanceAccessor("value",
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_get,
        &_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCLOUD_CHNINFO_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCLOUD_CHNINFO_templ(const Napi::CallbackInfo &);
_exports_ZCLOUD_CHNINFO_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_CHNINFO_enable_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_CHNINFO_enable_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_CHNINFO_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_CHNINFO_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_CHNINFO_isUpload_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_CHNINFO_isUpload_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_CHNINFO_isDownload_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_CHNINFO_isDownload_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCLOUD_CHNINFO(const Napi::CallbackInfo &);
virtual ~_exports_ZCLOUD_CHNINFO_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCLOUD_CHNINFO_inst : public _exports_ZCLOUD_CHNINFO_templ<_exports_ZCLOUD_CHNINFO_inst> {
public:
  using _exports_ZCLOUD_CHNINFO_templ::_exports_ZCLOUD_CHNINFO_templ;
  virtual ~_exports_ZCLOUD_CHNINFO_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCLOUD_CHNINFO_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCLOUD_CHNINFO_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCLOUD_CHNINFO (_exports_ZCLOUD_CHNINFO) */
// jsnapi_getclass
Napi::Function _exports_ZCLOUD_CHNINFO_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCLOUD_CHNINFO_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCLOUD_CHNINFO_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCLOUD_CHNINFO_inst>::DefineClass(env, "ZCLOUD_CHNINFO", symbolTable);
}

void _exports_ZCLOUD_CHNINFO_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCLOUD_CHNINFO_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCLOUD_CHNINFO_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("enable");
  members.insert({
    "enable",
      _exports_ZCLOUD_CHNINFO_templ::InstanceAccessor("enable",
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_enable_get,
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_enable_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_ZCLOUD_CHNINFO_templ::InstanceAccessor("type",
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_type_get,
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("isUpload");
  members.insert({
    "isUpload",
      _exports_ZCLOUD_CHNINFO_templ::InstanceAccessor("isUpload",
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_isUpload_get,
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_isUpload_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("isDownload");
  members.insert({
    "isDownload",
      _exports_ZCLOUD_CHNINFO_templ::InstanceAccessor("isDownload",
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_isDownload_get,
        &_exports_ZCLOUD_CHNINFO_templ::_wrap_ZCLOUD_CHNINFO_isDownload_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCLOUD_DEVINFO_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCLOUD_DEVINFO_templ(const Napi::CallbackInfo &);
_exports_ZCLOUD_DEVINFO_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_devIndex_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_devIndex_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_name_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_name_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_owner_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_owner_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_model_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_model_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_fwVer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_fwVer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_hwVer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_hwVer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_serial_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_serial_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_status_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_status_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_bGpsUpload_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_bGpsUpload_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_channelCnt_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_channelCnt_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_DEVINFO_channels_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_DEVINFO_channels_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCLOUD_DEVINFO(const Napi::CallbackInfo &);
virtual ~_exports_ZCLOUD_DEVINFO_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCLOUD_DEVINFO_inst : public _exports_ZCLOUD_DEVINFO_templ<_exports_ZCLOUD_DEVINFO_inst> {
public:
  using _exports_ZCLOUD_DEVINFO_templ::_exports_ZCLOUD_DEVINFO_templ;
  virtual ~_exports_ZCLOUD_DEVINFO_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCLOUD_DEVINFO_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCLOUD_DEVINFO_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCLOUD_DEVINFO (_exports_ZCLOUD_DEVINFO) */
// jsnapi_getclass
Napi::Function _exports_ZCLOUD_DEVINFO_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCLOUD_DEVINFO_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCLOUD_DEVINFO_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCLOUD_DEVINFO_inst>::DefineClass(env, "ZCLOUD_DEVINFO", symbolTable);
}

void _exports_ZCLOUD_DEVINFO_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCLOUD_DEVINFO_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCLOUD_DEVINFO_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("devIndex");
  members.insert({
    "devIndex",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("devIndex",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_devIndex_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_devIndex_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("type",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_type_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("id");
  members.insert({
    "id",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("id",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_id_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("name");
  members.insert({
    "name",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("name",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_name_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_name_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("owner");
  members.insert({
    "owner",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("owner",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_owner_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_owner_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("model");
  members.insert({
    "model",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("model",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_model_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_model_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fwVer");
  members.insert({
    "fwVer",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("fwVer",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_fwVer_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_fwVer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("hwVer");
  members.insert({
    "hwVer",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("hwVer",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_hwVer_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_hwVer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("serial");
  members.insert({
    "serial",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("serial",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_serial_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_serial_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("status");
  members.insert({
    "status",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("status",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_status_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_status_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("bGpsUpload");
  members.insert({
    "bGpsUpload",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("bGpsUpload",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_bGpsUpload_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_bGpsUpload_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channelCnt");
  members.insert({
    "channelCnt",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("channelCnt",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_channelCnt_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_channelCnt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channels");
  members.insert({
    "channels",
      _exports_ZCLOUD_DEVINFO_templ::InstanceAccessor("channels",
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_channels_get,
        &_exports_ZCLOUD_DEVINFO_templ::_wrap_ZCLOUD_DEVINFO_channels_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCLOUD_USER_DATA_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCLOUD_USER_DATA_templ(const Napi::CallbackInfo &);
_exports_ZCLOUD_USER_DATA_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_USER_DATA_username_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_USER_DATA_username_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_USER_DATA_mobile_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_USER_DATA_mobile_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_USER_DATA_dllVer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_USER_DATA_dllVer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_USER_DATA_devCnt_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_USER_DATA_devCnt_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_USER_DATA_devices_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_USER_DATA_devices_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCLOUD_USER_DATA(const Napi::CallbackInfo &);
virtual ~_exports_ZCLOUD_USER_DATA_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCLOUD_USER_DATA_inst : public _exports_ZCLOUD_USER_DATA_templ<_exports_ZCLOUD_USER_DATA_inst> {
public:
  using _exports_ZCLOUD_USER_DATA_templ::_exports_ZCLOUD_USER_DATA_templ;
  virtual ~_exports_ZCLOUD_USER_DATA_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCLOUD_USER_DATA_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCLOUD_USER_DATA_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCLOUD_USER_DATA (_exports_ZCLOUD_USER_DATA) */
// jsnapi_getclass
Napi::Function _exports_ZCLOUD_USER_DATA_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCLOUD_USER_DATA_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCLOUD_USER_DATA_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCLOUD_USER_DATA_inst>::DefineClass(env, "ZCLOUD_USER_DATA", symbolTable);
}

void _exports_ZCLOUD_USER_DATA_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCLOUD_USER_DATA_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCLOUD_USER_DATA_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("username");
  members.insert({
    "username",
      _exports_ZCLOUD_USER_DATA_templ::InstanceAccessor("username",
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_username_get,
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_username_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("mobile");
  members.insert({
    "mobile",
      _exports_ZCLOUD_USER_DATA_templ::InstanceAccessor("mobile",
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_mobile_get,
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_mobile_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dllVer");
  members.insert({
    "dllVer",
      _exports_ZCLOUD_USER_DATA_templ::InstanceAccessor("dllVer",
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_dllVer_get,
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_dllVer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("devCnt");
  members.insert({
    "devCnt",
      _exports_ZCLOUD_USER_DATA_templ::InstanceAccessor("devCnt",
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_devCnt_get,
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_devCnt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("devices");
  members.insert({
    "devices",
      _exports_ZCLOUD_USER_DATA_templ::InstanceAccessor("devices",
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_devices_get,
        &_exports_ZCLOUD_USER_DATA_templ::_wrap_ZCLOUD_USER_DATA_devices_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCLOUD_GPS_FRAME_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCLOUD_GPS_FRAME_templ(const Napi::CallbackInfo &);
_exports_ZCLOUD_GPS_FRAME_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_GPS_FRAME_latitude_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_GPS_FRAME_latitude_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_GPS_FRAME_longitude_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_GPS_FRAME_longitude_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_GPS_FRAME_speed_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_GPS_FRAME_speed_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCLOUD_GPS_FRAME_tm_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCLOUD_GPS_FRAME_tm_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCLOUD_GPS_FRAME(const Napi::CallbackInfo &);
virtual ~_exports_ZCLOUD_GPS_FRAME_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCLOUD_GPS_FRAME_inst : public _exports_ZCLOUD_GPS_FRAME_templ<_exports_ZCLOUD_GPS_FRAME_inst> {
public:
  using _exports_ZCLOUD_GPS_FRAME_templ::_exports_ZCLOUD_GPS_FRAME_templ;
  virtual ~_exports_ZCLOUD_GPS_FRAME_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCLOUD_GPS_FRAME_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCLOUD_GPS_FRAME_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCLOUD_GPS_FRAME (_exports_ZCLOUD_GPS_FRAME) */
// jsnapi_getclass
Napi::Function _exports_ZCLOUD_GPS_FRAME_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCLOUD_GPS_FRAME_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCLOUD_GPS_FRAME_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCLOUD_GPS_FRAME_inst>::DefineClass(env, "ZCLOUD_GPS_FRAME", symbolTable);
}

void _exports_ZCLOUD_GPS_FRAME_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCLOUD_GPS_FRAME_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCLOUD_GPS_FRAME_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("latitude");
  members.insert({
    "latitude",
      _exports_ZCLOUD_GPS_FRAME_templ::InstanceAccessor("latitude",
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_latitude_get,
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_latitude_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("longitude");
  members.insert({
    "longitude",
      _exports_ZCLOUD_GPS_FRAME_templ::InstanceAccessor("longitude",
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_longitude_get,
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_longitude_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("speed");
  members.insert({
    "speed",
      _exports_ZCLOUD_GPS_FRAME_templ::InstanceAccessor("speed",
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_speed_get,
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_speed_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tm");
  members.insert({
    "tm",
      _exports_ZCLOUD_GPS_FRAME_templ::InstanceAccessor("tm",
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_tm_get,
        &_exports_ZCLOUD_GPS_FRAME_templ::_wrap_ZCLOUD_GPS_FRAME_tm_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_USBCANFDTxTimeStamp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_USBCANFDTxTimeStamp_templ(const Napi::CallbackInfo &);
_exports_USBCANFDTxTimeStamp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_USBCANFDTxTimeStamp(const Napi::CallbackInfo &);
virtual ~_exports_USBCANFDTxTimeStamp_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_USBCANFDTxTimeStamp_inst : public _exports_USBCANFDTxTimeStamp_templ<_exports_USBCANFDTxTimeStamp_inst> {
public:
  using _exports_USBCANFDTxTimeStamp_templ::_exports_USBCANFDTxTimeStamp_templ;
  virtual ~_exports_USBCANFDTxTimeStamp_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_USBCANFDTxTimeStamp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_USBCANFDTxTimeStamp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: USBCANFDTxTimeStamp (_exports_USBCANFDTxTimeStamp) */
// jsnapi_getclass
Napi::Function _exports_USBCANFDTxTimeStamp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_USBCANFDTxTimeStamp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_USBCANFDTxTimeStamp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_USBCANFDTxTimeStamp_inst>::DefineClass(env, "USBCANFDTxTimeStamp", symbolTable);
}

void _exports_USBCANFDTxTimeStamp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_USBCANFDTxTimeStamp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_USBCANFDTxTimeStamp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("pTxTimeStampBuffer");
  members.insert({
    "pTxTimeStampBuffer",
      _exports_USBCANFDTxTimeStamp_templ::InstanceAccessor("pTxTimeStampBuffer",
        &_exports_USBCANFDTxTimeStamp_templ::_wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_get,
        &_exports_USBCANFDTxTimeStamp_templ::_wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nBufferTimeStampCount");
  members.insert({
    "nBufferTimeStampCount",
      _exports_USBCANFDTxTimeStamp_templ::InstanceAccessor("nBufferTimeStampCount",
        &_exports_USBCANFDTxTimeStamp_templ::_wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_get,
        &_exports_USBCANFDTxTimeStamp_templ::_wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TxTimeStamp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TxTimeStamp_templ(const Napi::CallbackInfo &);
_exports_TxTimeStamp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TxTimeStamp_pTxTimeStampBuffer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TxTimeStamp_pTxTimeStampBuffer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TxTimeStamp_nBufferTimeStampCount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TxTimeStamp_nBufferTimeStampCount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TxTimeStamp_nWaitTime_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TxTimeStamp_nWaitTime_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TxTimeStamp(const Napi::CallbackInfo &);
virtual ~_exports_TxTimeStamp_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TxTimeStamp_inst : public _exports_TxTimeStamp_templ<_exports_TxTimeStamp_inst> {
public:
  using _exports_TxTimeStamp_templ::_exports_TxTimeStamp_templ;
  virtual ~_exports_TxTimeStamp_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TxTimeStamp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TxTimeStamp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TxTimeStamp (_exports_TxTimeStamp) */
// jsnapi_getclass
Napi::Function _exports_TxTimeStamp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TxTimeStamp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TxTimeStamp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TxTimeStamp_inst>::DefineClass(env, "TxTimeStamp", symbolTable);
}

void _exports_TxTimeStamp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TxTimeStamp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TxTimeStamp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("pTxTimeStampBuffer");
  members.insert({
    "pTxTimeStampBuffer",
      _exports_TxTimeStamp_templ::InstanceAccessor("pTxTimeStampBuffer",
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_pTxTimeStampBuffer_get,
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_pTxTimeStampBuffer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nBufferTimeStampCount");
  members.insert({
    "nBufferTimeStampCount",
      _exports_TxTimeStamp_templ::InstanceAccessor("nBufferTimeStampCount",
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_nBufferTimeStampCount_get,
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_nBufferTimeStampCount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nWaitTime");
  members.insert({
    "nWaitTime",
      _exports_TxTimeStamp_templ::InstanceAccessor("nWaitTime",
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_nWaitTime_get,
        &_exports_TxTimeStamp_templ::_wrap_TxTimeStamp_nWaitTime_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_BusUsage_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_BusUsage_templ(const Napi::CallbackInfo &);
_exports_BusUsage_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nTimeStampBegin_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nTimeStampBegin_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nTimeStampEnd_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nTimeStampEnd_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nChnl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nChnl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nReserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nReserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nBusUsage_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nBusUsage_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_BusUsage_nFrameCount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_BusUsage_nFrameCount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_BusUsage(const Napi::CallbackInfo &);
virtual ~_exports_BusUsage_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_BusUsage_inst : public _exports_BusUsage_templ<_exports_BusUsage_inst> {
public:
  using _exports_BusUsage_templ::_exports_BusUsage_templ;
  virtual ~_exports_BusUsage_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_BusUsage_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_BusUsage_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: BusUsage (_exports_BusUsage) */
// jsnapi_getclass
Napi::Function _exports_BusUsage_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_BusUsage_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_BusUsage_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_BusUsage_inst>::DefineClass(env, "BusUsage", symbolTable);
}

void _exports_BusUsage_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_BusUsage_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_BusUsage_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("nTimeStampBegin");
  members.insert({
    "nTimeStampBegin",
      _exports_BusUsage_templ::InstanceAccessor("nTimeStampBegin",
        &_exports_BusUsage_templ::_wrap_BusUsage_nTimeStampBegin_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nTimeStampBegin_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nTimeStampEnd");
  members.insert({
    "nTimeStampEnd",
      _exports_BusUsage_templ::InstanceAccessor("nTimeStampEnd",
        &_exports_BusUsage_templ::_wrap_BusUsage_nTimeStampEnd_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nTimeStampEnd_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nChnl");
  members.insert({
    "nChnl",
      _exports_BusUsage_templ::InstanceAccessor("nChnl",
        &_exports_BusUsage_templ::_wrap_BusUsage_nChnl_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nChnl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nReserved");
  members.insert({
    "nReserved",
      _exports_BusUsage_templ::InstanceAccessor("nReserved",
        &_exports_BusUsage_templ::_wrap_BusUsage_nReserved_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nReserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nBusUsage");
  members.insert({
    "nBusUsage",
      _exports_BusUsage_templ::InstanceAccessor("nBusUsage",
        &_exports_BusUsage_templ::_wrap_BusUsage_nBusUsage_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nBusUsage_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nFrameCount");
  members.insert({
    "nFrameCount",
      _exports_BusUsage_templ::InstanceAccessor("nFrameCount",
        &_exports_BusUsage_templ::_wrap_BusUsage_nFrameCount_get,
        &_exports_BusUsage_templ::_wrap_BusUsage_nFrameCount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANCANFDData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANCANFDData_templ(const Napi::CallbackInfo &);
_exports_ZCANCANFDData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANCANFDData_timeStamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANCANFDData_timeStamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANCANFDData_extraData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANCANFDData_extraData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANCANFDData_frame_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANCANFDData_frame_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANCANFDData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANCANFDData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANCANFDData_inst : public _exports_ZCANCANFDData_templ<_exports_ZCANCANFDData_inst> {
public:
  using _exports_ZCANCANFDData_templ::_exports_ZCANCANFDData_templ;
  virtual ~_exports_ZCANCANFDData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANCANFDData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANCANFDData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANCANFDData (_exports_ZCANCANFDData) */
// jsnapi_getclass
Napi::Function _exports_ZCANCANFDData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANCANFDData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANCANFDData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANCANFDData_inst>::DefineClass(env, "ZCANCANFDData", symbolTable);
}

void _exports_ZCANCANFDData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANCANFDData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANCANFDData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("timeStamp");
  members.insert({
    "timeStamp",
      _exports_ZCANCANFDData_templ::InstanceAccessor("timeStamp",
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_timeStamp_get,
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_timeStamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("extraData");
  members.insert({
    "extraData",
      _exports_ZCANCANFDData_templ::InstanceAccessor("extraData",
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_extraData_get,
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_extraData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("frame");
  members.insert({
    "frame",
      _exports_ZCANCANFDData_templ::InstanceAccessor("frame",
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_frame_get,
        &_exports_ZCANCANFDData_templ::_wrap_ZCANCANFDData_frame_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANErrorData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANErrorData_templ(const Napi::CallbackInfo &);
_exports_ZCANErrorData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_timeStamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_timeStamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_errType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_errType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_errSubType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_errSubType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_nodeState_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_nodeState_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_rxErrCount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_rxErrCount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_txErrCount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_txErrCount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_errData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_errData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANErrorData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANErrorData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANErrorData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANErrorData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANErrorData_inst : public _exports_ZCANErrorData_templ<_exports_ZCANErrorData_inst> {
public:
  using _exports_ZCANErrorData_templ::_exports_ZCANErrorData_templ;
  virtual ~_exports_ZCANErrorData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANErrorData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANErrorData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANErrorData (_exports_ZCANErrorData) */
// jsnapi_getclass
Napi::Function _exports_ZCANErrorData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANErrorData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANErrorData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANErrorData_inst>::DefineClass(env, "ZCANErrorData", symbolTable);
}

void _exports_ZCANErrorData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANErrorData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANErrorData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("timeStamp");
  members.insert({
    "timeStamp",
      _exports_ZCANErrorData_templ::InstanceAccessor("timeStamp",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_timeStamp_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_timeStamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("errType");
  members.insert({
    "errType",
      _exports_ZCANErrorData_templ::InstanceAccessor("errType",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errType_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("errSubType");
  members.insert({
    "errSubType",
      _exports_ZCANErrorData_templ::InstanceAccessor("errSubType",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errSubType_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errSubType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nodeState");
  members.insert({
    "nodeState",
      _exports_ZCANErrorData_templ::InstanceAccessor("nodeState",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_nodeState_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_nodeState_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rxErrCount");
  members.insert({
    "rxErrCount",
      _exports_ZCANErrorData_templ::InstanceAccessor("rxErrCount",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_rxErrCount_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_rxErrCount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("txErrCount");
  members.insert({
    "txErrCount",
      _exports_ZCANErrorData_templ::InstanceAccessor("txErrCount",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_txErrCount_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_txErrCount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("errData");
  members.insert({
    "errData",
      _exports_ZCANErrorData_templ::InstanceAccessor("errData",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errData_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_errData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANErrorData_templ::InstanceAccessor("reserved",
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_reserved_get,
        &_exports_ZCANErrorData_templ::_wrap_ZCANErrorData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANGPSData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANGPSData_templ(const Napi::CallbackInfo &);
_exports_ZCANGPSData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANGPSData_latitude_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANGPSData_latitude_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANGPSData_longitude_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANGPSData_longitude_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANGPSData_altitude_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANGPSData_altitude_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANGPSData_speed_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANGPSData_speed_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANGPSData_courseAngle_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANGPSData_courseAngle_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANGPSData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANGPSData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANGPSData_inst : public _exports_ZCANGPSData_templ<_exports_ZCANGPSData_inst> {
public:
  using _exports_ZCANGPSData_templ::_exports_ZCANGPSData_templ;
  virtual ~_exports_ZCANGPSData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANGPSData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANGPSData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANGPSData (_exports_ZCANGPSData) */
// jsnapi_getclass
Napi::Function _exports_ZCANGPSData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANGPSData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANGPSData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANGPSData_inst>::DefineClass(env, "ZCANGPSData", symbolTable);
}

void _exports_ZCANGPSData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANGPSData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANGPSData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("latitude");
  members.insert({
    "latitude",
      _exports_ZCANGPSData_templ::InstanceAccessor("latitude",
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_latitude_get,
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_latitude_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("longitude");
  members.insert({
    "longitude",
      _exports_ZCANGPSData_templ::InstanceAccessor("longitude",
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_longitude_get,
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_longitude_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("altitude");
  members.insert({
    "altitude",
      _exports_ZCANGPSData_templ::InstanceAccessor("altitude",
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_altitude_get,
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_altitude_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("speed");
  members.insert({
    "speed",
      _exports_ZCANGPSData_templ::InstanceAccessor("speed",
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_speed_get,
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_speed_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("courseAngle");
  members.insert({
    "courseAngle",
      _exports_ZCANGPSData_templ::InstanceAccessor("courseAngle",
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_courseAngle_get,
        &_exports_ZCANGPSData_templ::_wrap_ZCANGPSData_courseAngle_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANLINData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANLINData_templ(const Napi::CallbackInfo &);
_exports_ZCANLINData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANLINData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANLINData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANLINData_inst : public _exports_ZCANLINData_templ<_exports_ZCANLINData_inst> {
public:
  using _exports_ZCANLINData_templ::_exports_ZCANLINData_templ;
  virtual ~_exports_ZCANLINData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANLINData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANLINData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANLINData (_exports_ZCANLINData) */
// jsnapi_getclass
Napi::Function _exports_ZCANLINData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANLINData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANLINData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANLINData_inst>::DefineClass(env, "ZCANLINData", symbolTable);
}

void _exports_ZCANLINData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANLINData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANLINData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANLINData_templ::InstanceAccessor("reserved",
        &_exports_ZCANLINData_templ::_wrap_ZCANLINData_reserved_get,
        &_exports_ZCANLINData_templ::_wrap_ZCANLINData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANLINErrData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANLINErrData_templ(const Napi::CallbackInfo &);
_exports_ZCANLINErrData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_timeStamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_timeStamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_dataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_dataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_dir_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_dir_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_chkSum_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_chkSum_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINErrData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINErrData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANLINErrData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANLINErrData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANLINErrData_inst : public _exports_ZCANLINErrData_templ<_exports_ZCANLINErrData_inst> {
public:
  using _exports_ZCANLINErrData_templ::_exports_ZCANLINErrData_templ;
  virtual ~_exports_ZCANLINErrData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANLINErrData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANLINErrData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANLINErrData (_exports_ZCANLINErrData) */
// jsnapi_getclass
Napi::Function _exports_ZCANLINErrData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANLINErrData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANLINErrData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANLINErrData_inst>::DefineClass(env, "ZCANLINErrData", symbolTable);
}

void _exports_ZCANLINErrData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANLINErrData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANLINErrData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("timeStamp");
  members.insert({
    "timeStamp",
      _exports_ZCANLINErrData_templ::InstanceAccessor("timeStamp",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_timeStamp_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_timeStamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataLen");
  members.insert({
    "dataLen",
      _exports_ZCANLINErrData_templ::InstanceAccessor("dataLen",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_dataLen_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_dataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZCANLINErrData_templ::InstanceAccessor("data",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_data_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dir");
  members.insert({
    "dir",
      _exports_ZCANLINErrData_templ::InstanceAccessor("dir",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_dir_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_dir_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chkSum");
  members.insert({
    "chkSum",
      _exports_ZCANLINErrData_templ::InstanceAccessor("chkSum",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_chkSum_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_chkSum_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANLINErrData_templ::InstanceAccessor("reserved",
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_reserved_get,
        &_exports_ZCANLINErrData_templ::_wrap_ZCANLINErrData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANLINEventData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANLINEventData_templ(const Napi::CallbackInfo &);
_exports_ZCANLINEventData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINEventData_timeStamp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINEventData_timeStamp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINEventData_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINEventData_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINEventData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINEventData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANLINEventData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANLINEventData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANLINEventData_inst : public _exports_ZCANLINEventData_templ<_exports_ZCANLINEventData_inst> {
public:
  using _exports_ZCANLINEventData_templ::_exports_ZCANLINEventData_templ;
  virtual ~_exports_ZCANLINEventData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANLINEventData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANLINEventData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANLINEventData (_exports_ZCANLINEventData) */
// jsnapi_getclass
Napi::Function _exports_ZCANLINEventData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANLINEventData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANLINEventData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANLINEventData_inst>::DefineClass(env, "ZCANLINEventData", symbolTable);
}

void _exports_ZCANLINEventData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANLINEventData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANLINEventData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("timeStamp");
  members.insert({
    "timeStamp",
      _exports_ZCANLINEventData_templ::InstanceAccessor("timeStamp",
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_timeStamp_get,
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_timeStamp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_ZCANLINEventData_templ::InstanceAccessor("type",
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_type_get,
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANLINEventData_templ::InstanceAccessor("reserved",
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_reserved_get,
        &_exports_ZCANLINEventData_templ::_wrap_ZCANLINEventData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANLINExData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANLINExData_templ(const Napi::CallbackInfo &);
_exports_ZCANLINExData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINExData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINExData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANLINExData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANLINExData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANLINExData_inst : public _exports_ZCANLINExData_templ<_exports_ZCANLINExData_inst> {
public:
  using _exports_ZCANLINExData_templ::_exports_ZCANLINExData_templ;
  virtual ~_exports_ZCANLINExData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANLINExData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANLINExData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANLINExData (_exports_ZCANLINExData) */
// jsnapi_getclass
Napi::Function _exports_ZCANLINExData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANLINExData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANLINExData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANLINExData_inst>::DefineClass(env, "ZCANLINExData", symbolTable);
}

void _exports_ZCANLINExData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANLINExData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANLINExData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANLINExData_templ::InstanceAccessor("reserved",
        &_exports_ZCANLINExData_templ::_wrap_ZCANLINExData_reserved_get,
        &_exports_ZCANLINExData_templ::_wrap_ZCANLINExData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANDataObj_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANDataObj_templ(const Napi::CallbackInfo &);
_exports_ZCANDataObj_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANDataObj_dataType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANDataObj_dataType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANDataObj_chnl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANDataObj_chnl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANDataObj_extraData_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANDataObj_extraData_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANDataObj(const Napi::CallbackInfo &);
virtual ~_exports_ZCANDataObj_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANDataObj_inst : public _exports_ZCANDataObj_templ<_exports_ZCANDataObj_inst> {
public:
  using _exports_ZCANDataObj_templ::_exports_ZCANDataObj_templ;
  virtual ~_exports_ZCANDataObj_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANDataObj_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANDataObj_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANDataObj (_exports_ZCANDataObj) */
// jsnapi_getclass
Napi::Function _exports_ZCANDataObj_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANDataObj_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANDataObj_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANDataObj_inst>::DefineClass(env, "ZCANDataObj", symbolTable);
}

void _exports_ZCANDataObj_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANDataObj_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANDataObj_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("dataType");
  members.insert({
    "dataType",
      _exports_ZCANDataObj_templ::InstanceAccessor("dataType",
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_dataType_get,
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_dataType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chnl");
  members.insert({
    "chnl",
      _exports_ZCANDataObj_templ::InstanceAccessor("chnl",
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_chnl_get,
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_chnl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("extraData");
  members.insert({
    "extraData",
      _exports_ZCANDataObj_templ::InstanceAccessor("extraData",
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_extraData_get,
        &_exports_ZCANDataObj_templ::_wrap_ZCANDataObj_extraData_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_LIN_MSG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_LIN_MSG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_LIN_MSG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_MSG_chnl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_MSG_chnl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_MSG_dataType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_MSG_dataType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_LIN_MSG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_LIN_MSG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_LIN_MSG_inst : public _exports_ZCAN_LIN_MSG_templ<_exports_ZCAN_LIN_MSG_inst> {
public:
  using _exports_ZCAN_LIN_MSG_templ::_exports_ZCAN_LIN_MSG_templ;
  virtual ~_exports_ZCAN_LIN_MSG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_LIN_MSG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_LIN_MSG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_LIN_MSG (_exports_ZCAN_LIN_MSG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_LIN_MSG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_LIN_MSG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_LIN_MSG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_LIN_MSG_inst>::DefineClass(env, "ZCAN_LIN_MSG", symbolTable);
}

void _exports_ZCAN_LIN_MSG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_LIN_MSG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_LIN_MSG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("chnl");
  members.insert({
    "chnl",
      _exports_ZCAN_LIN_MSG_templ::InstanceAccessor("chnl",
        &_exports_ZCAN_LIN_MSG_templ::_wrap_ZCAN_LIN_MSG_chnl_get,
        &_exports_ZCAN_LIN_MSG_templ::_wrap_ZCAN_LIN_MSG_chnl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataType");
  members.insert({
    "dataType",
      _exports_ZCAN_LIN_MSG_templ::InstanceAccessor("dataType",
        &_exports_ZCAN_LIN_MSG_templ::_wrap_ZCAN_LIN_MSG_dataType_get,
        &_exports_ZCAN_LIN_MSG_templ::_wrap_ZCAN_LIN_MSG_dataType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_LIN_INIT_CONFIG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_LIN_INIT_CONFIG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_LIN_INIT_CONFIG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_INIT_CONFIG_linMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_INIT_CONFIG_linMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_INIT_CONFIG_maxLength_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_INIT_CONFIG_maxLength_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_INIT_CONFIG_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_INIT_CONFIG_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_INIT_CONFIG_linBaud_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_INIT_CONFIG_linBaud_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_LIN_INIT_CONFIG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_LIN_INIT_CONFIG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_LIN_INIT_CONFIG_inst : public _exports_ZCAN_LIN_INIT_CONFIG_templ<_exports_ZCAN_LIN_INIT_CONFIG_inst> {
public:
  using _exports_ZCAN_LIN_INIT_CONFIG_templ::_exports_ZCAN_LIN_INIT_CONFIG_templ;
  virtual ~_exports_ZCAN_LIN_INIT_CONFIG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_LIN_INIT_CONFIG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_LIN_INIT_CONFIG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_LIN_INIT_CONFIG (_exports_ZCAN_LIN_INIT_CONFIG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_LIN_INIT_CONFIG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_LIN_INIT_CONFIG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_LIN_INIT_CONFIG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_LIN_INIT_CONFIG_inst>::DefineClass(env, "ZCAN_LIN_INIT_CONFIG", symbolTable);
}

void _exports_ZCAN_LIN_INIT_CONFIG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_LIN_INIT_CONFIG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_LIN_INIT_CONFIG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("linMode");
  members.insert({
    "linMode",
      _exports_ZCAN_LIN_INIT_CONFIG_templ::InstanceAccessor("linMode",
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_linMode_get,
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_linMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chkSumMode");
  members.insert({
    "chkSumMode",
      _exports_ZCAN_LIN_INIT_CONFIG_templ::InstanceAccessor("chkSumMode",
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_get,
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("maxLength");
  members.insert({
    "maxLength",
      _exports_ZCAN_LIN_INIT_CONFIG_templ::InstanceAccessor("maxLength",
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_maxLength_get,
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_maxLength_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_LIN_INIT_CONFIG_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_reserved_get,
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("linBaud");
  members.insert({
    "linBaud",
      _exports_ZCAN_LIN_INIT_CONFIG_templ::InstanceAccessor("linBaud",
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_linBaud_get,
        &_exports_ZCAN_LIN_INIT_CONFIG_templ::_wrap_ZCAN_LIN_INIT_CONFIG_linBaud_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_LIN_PUBLISH_CFG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_LIN_PUBLISH_CFG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_LIN_PUBLISH_CFG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_ID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_ID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_LIN_PUBLISH_CFG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_LIN_PUBLISH_CFG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_LIN_PUBLISH_CFG_inst : public _exports_ZCAN_LIN_PUBLISH_CFG_templ<_exports_ZCAN_LIN_PUBLISH_CFG_inst> {
public:
  using _exports_ZCAN_LIN_PUBLISH_CFG_templ::_exports_ZCAN_LIN_PUBLISH_CFG_templ;
  virtual ~_exports_ZCAN_LIN_PUBLISH_CFG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_LIN_PUBLISH_CFG (_exports_ZCAN_LIN_PUBLISH_CFG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_LIN_PUBLISH_CFG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_LIN_PUBLISH_CFG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_LIN_PUBLISH_CFG_inst>::DefineClass(env, "ZCAN_LIN_PUBLISH_CFG", symbolTable);
}

void _exports_ZCAN_LIN_PUBLISH_CFG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ID");
  members.insert({
    "ID",
      _exports_ZCAN_LIN_PUBLISH_CFG_templ::InstanceAccessor("ID",
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_ID_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_ID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataLen");
  members.insert({
    "dataLen",
      _exports_ZCAN_LIN_PUBLISH_CFG_templ::InstanceAccessor("dataLen",
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZCAN_LIN_PUBLISH_CFG_templ::InstanceAccessor("data",
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_data_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chkSumMode");
  members.insert({
    "chkSumMode",
      _exports_ZCAN_LIN_PUBLISH_CFG_templ::InstanceAccessor("chkSumMode",
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_LIN_PUBLISH_CFG_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_reserved_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ(const Napi::CallbackInfo &);
_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_LIN_PUBLISH_CFG_EX(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_LIN_PUBLISH_CFG_EX_inst : public _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<_exports_ZCAN_LIN_PUBLISH_CFG_EX_inst> {
public:
  using _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ;
  virtual ~_exports_ZCAN_LIN_PUBLISH_CFG_EX_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_LIN_PUBLISH_CFG_EX (_exports_ZCAN_LIN_PUBLISH_CFG_EX) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_LIN_PUBLISH_CFG_EX_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_LIN_PUBLISH_CFG_EX_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_LIN_PUBLISH_CFG_EX_inst>::DefineClass(env, "ZCAN_LIN_PUBLISH_CFG_EX", symbolTable);
}

void _exports_ZCAN_LIN_PUBLISH_CFG_EX_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ID");
  members.insert({
    "ID",
      _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::InstanceAccessor("ID",
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataLen");
  members.insert({
    "dataLen",
      _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::InstanceAccessor("dataLen",
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::InstanceAccessor("data",
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chkSumMode");
  members.insert({
    "chkSumMode",
      _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::InstanceAccessor("chkSumMode",
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_get,
        &_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_LIN_SUBSCIBE_CFG_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_LIN_SUBSCIBE_CFG_templ(const Napi::CallbackInfo &);
_exports_ZCAN_LIN_SUBSCIBE_CFG_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_LIN_SUBSCIBE_CFG(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_LIN_SUBSCIBE_CFG_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_LIN_SUBSCIBE_CFG_inst : public _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<_exports_ZCAN_LIN_SUBSCIBE_CFG_inst> {
public:
  using _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_exports_ZCAN_LIN_SUBSCIBE_CFG_templ;
  virtual ~_exports_ZCAN_LIN_SUBSCIBE_CFG_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_LIN_SUBSCIBE_CFG (_exports_ZCAN_LIN_SUBSCIBE_CFG) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_LIN_SUBSCIBE_CFG_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_LIN_SUBSCIBE_CFG_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_LIN_SUBSCIBE_CFG_inst>::DefineClass(env, "ZCAN_LIN_SUBSCIBE_CFG", symbolTable);
}

void _exports_ZCAN_LIN_SUBSCIBE_CFG_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ID");
  members.insert({
    "ID",
      _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::InstanceAccessor("ID",
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_get,
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataLen");
  members.insert({
    "dataLen",
      _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::InstanceAccessor("dataLen",
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_get,
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("chkSumMode");
  members.insert({
    "chkSumMode",
      _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::InstanceAccessor("chkSumMode",
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_get,
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_LIN_SUBSCIBE_CFG_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_get,
        &_exports_ZCAN_LIN_SUBSCIBE_CFG_templ::_wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_UDS_REQUEST_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_UDS_REQUEST_templ(const Napi::CallbackInfo &);
_exports_ZCAN_UDS_REQUEST_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_req_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_req_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_channel_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_channel_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_frame_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_frame_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_reserved0_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_reserved0_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_src_addr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_src_addr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_dst_addr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_dst_addr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_suppress_response_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_suppress_response_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_sid_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_sid_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_reserved1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_reserved1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_data_len_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_data_len_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_REQUEST_reserved2_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_REQUEST_reserved2_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_UDS_REQUEST(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_UDS_REQUEST_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_UDS_REQUEST_inst : public _exports_ZCAN_UDS_REQUEST_templ<_exports_ZCAN_UDS_REQUEST_inst> {
public:
  using _exports_ZCAN_UDS_REQUEST_templ::_exports_ZCAN_UDS_REQUEST_templ;
  virtual ~_exports_ZCAN_UDS_REQUEST_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_UDS_REQUEST_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_UDS_REQUEST_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_UDS_REQUEST (_exports_ZCAN_UDS_REQUEST) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_UDS_REQUEST_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_UDS_REQUEST_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_UDS_REQUEST_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_UDS_REQUEST_inst>::DefineClass(env, "ZCAN_UDS_REQUEST", symbolTable);
}

void _exports_ZCAN_UDS_REQUEST_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_UDS_REQUEST_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_UDS_REQUEST_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req_id");
  members.insert({
    "req_id",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("req_id",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_req_id_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_req_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channel");
  members.insert({
    "channel",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("channel",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_channel_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_channel_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("frame_type");
  members.insert({
    "frame_type",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("frame_type",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_frame_type_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_frame_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved0");
  members.insert({
    "reserved0",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("reserved0",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved0_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved0_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("src_addr");
  members.insert({
    "src_addr",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("src_addr",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_src_addr_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_src_addr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dst_addr");
  members.insert({
    "dst_addr",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("dst_addr",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_dst_addr_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_dst_addr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("suppress_response");
  members.insert({
    "suppress_response",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("suppress_response",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_suppress_response_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_suppress_response_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sid");
  members.insert({
    "sid",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("sid",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_sid_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_sid_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved1");
  members.insert({
    "reserved1",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("reserved1",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved1_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("data",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_data_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data_len");
  members.insert({
    "data_len",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("data_len",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_data_len_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_data_len_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved2");
  members.insert({
    "reserved2",
      _exports_ZCAN_UDS_REQUEST_templ::InstanceAccessor("reserved2",
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved2_get,
        &_exports_ZCAN_UDS_REQUEST_templ::_wrap_ZCAN_UDS_REQUEST_reserved2_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZLIN_UDS_REQUEST_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZLIN_UDS_REQUEST_templ(const Napi::CallbackInfo &);
_exports_ZLIN_UDS_REQUEST_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_req_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_req_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_channel_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_channel_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_suppress_response_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_suppress_response_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_sid_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_sid_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_Nad_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_Nad_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_reserved1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_reserved1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_data_len_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_data_len_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZLIN_UDS_REQUEST_reserved2_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZLIN_UDS_REQUEST_reserved2_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZLIN_UDS_REQUEST(const Napi::CallbackInfo &);
virtual ~_exports_ZLIN_UDS_REQUEST_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZLIN_UDS_REQUEST_inst : public _exports_ZLIN_UDS_REQUEST_templ<_exports_ZLIN_UDS_REQUEST_inst> {
public:
  using _exports_ZLIN_UDS_REQUEST_templ::_exports_ZLIN_UDS_REQUEST_templ;
  virtual ~_exports_ZLIN_UDS_REQUEST_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZLIN_UDS_REQUEST_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZLIN_UDS_REQUEST_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZLIN_UDS_REQUEST (_exports_ZLIN_UDS_REQUEST) */
// jsnapi_getclass
Napi::Function _exports_ZLIN_UDS_REQUEST_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZLIN_UDS_REQUEST_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZLIN_UDS_REQUEST_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZLIN_UDS_REQUEST_inst>::DefineClass(env, "ZLIN_UDS_REQUEST", symbolTable);
}

void _exports_ZLIN_UDS_REQUEST_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZLIN_UDS_REQUEST_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZLIN_UDS_REQUEST_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req_id");
  members.insert({
    "req_id",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("req_id",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_req_id_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_req_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channel");
  members.insert({
    "channel",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("channel",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_channel_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_channel_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("suppress_response");
  members.insert({
    "suppress_response",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("suppress_response",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_suppress_response_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_suppress_response_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sid");
  members.insert({
    "sid",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("sid",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_sid_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_sid_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("Nad");
  members.insert({
    "Nad",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("Nad",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_Nad_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_Nad_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved1");
  members.insert({
    "reserved1",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("reserved1",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_reserved1_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_reserved1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("data",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_data_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data_len");
  members.insert({
    "data_len",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("data_len",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_data_len_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_data_len_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved2");
  members.insert({
    "reserved2",
      _exports_ZLIN_UDS_REQUEST_templ::InstanceAccessor("reserved2",
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_reserved2_get,
        &_exports_ZLIN_UDS_REQUEST_templ::_wrap_ZLIN_UDS_REQUEST_reserved2_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZDOIP_REQUEST_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZDOIP_REQUEST_templ(const Napi::CallbackInfo &);
_exports_ZDOIP_REQUEST_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_req_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_req_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_reserved0_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_reserved0_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_doipVersion_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_doipVersion_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_rcType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_rcType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_sourceAddress_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_sourceAddress_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_serverAddress_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_serverAddress_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_connectTimeoutMs_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_connectTimeoutMs_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_routingTimeoutMs_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_routingTimeoutMs_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_targetAddress_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_targetAddress_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_sid_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_sid_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_suppressPosResp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_suppressPosResp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_waitForNegResp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_waitForNegResp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_reserved1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_reserved1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_requestTimeoutMs_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_requestTimeoutMs_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_dataLength_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_dataLength_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDOIP_REQUEST_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDOIP_REQUEST_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZDOIP_REQUEST(const Napi::CallbackInfo &);
virtual ~_exports_ZDOIP_REQUEST_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZDOIP_REQUEST_inst : public _exports_ZDOIP_REQUEST_templ<_exports_ZDOIP_REQUEST_inst> {
public:
  using _exports_ZDOIP_REQUEST_templ::_exports_ZDOIP_REQUEST_templ;
  virtual ~_exports_ZDOIP_REQUEST_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZDOIP_REQUEST_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZDOIP_REQUEST_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZDOIP_REQUEST (_exports_ZDOIP_REQUEST) */
// jsnapi_getclass
Napi::Function _exports_ZDOIP_REQUEST_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZDOIP_REQUEST_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZDOIP_REQUEST_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZDOIP_REQUEST_inst>::DefineClass(env, "ZDOIP_REQUEST", symbolTable);
}

void _exports_ZDOIP_REQUEST_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZDOIP_REQUEST_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZDOIP_REQUEST_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req_id");
  members.insert({
    "req_id",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("req_id",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_req_id_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_req_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved0");
  members.insert({
    "reserved0",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("reserved0",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_reserved0_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_reserved0_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("doipVersion");
  members.insert({
    "doipVersion",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("doipVersion",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_doipVersion_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_doipVersion_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rcType");
  members.insert({
    "rcType",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("rcType",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_rcType_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_rcType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sourceAddress");
  members.insert({
    "sourceAddress",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("sourceAddress",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_sourceAddress_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_sourceAddress_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("serverAddress");
  members.insert({
    "serverAddress",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("serverAddress",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_serverAddress_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_serverAddress_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("connectTimeoutMs");
  members.insert({
    "connectTimeoutMs",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("connectTimeoutMs",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_connectTimeoutMs_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_connectTimeoutMs_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("routingTimeoutMs");
  members.insert({
    "routingTimeoutMs",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("routingTimeoutMs",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_routingTimeoutMs_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_routingTimeoutMs_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("targetAddress");
  members.insert({
    "targetAddress",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("targetAddress",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_targetAddress_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_targetAddress_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sid");
  members.insert({
    "sid",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("sid",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_sid_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_sid_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("suppressPosResp");
  members.insert({
    "suppressPosResp",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("suppressPosResp",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_suppressPosResp_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_suppressPosResp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("waitForNegResp");
  members.insert({
    "waitForNegResp",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("waitForNegResp",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_waitForNegResp_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_waitForNegResp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved1");
  members.insert({
    "reserved1",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("reserved1",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_reserved1_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_reserved1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("requestTimeoutMs");
  members.insert({
    "requestTimeoutMs",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("requestTimeoutMs",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_requestTimeoutMs_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_requestTimeoutMs_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataLength");
  members.insert({
    "dataLength",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("dataLength",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_dataLength_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_dataLength_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_ZDOIP_REQUEST_templ::InstanceAccessor("data",
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_data_get,
        &_exports_ZDOIP_REQUEST_templ::_wrap_ZDOIP_REQUEST_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_UDS_RESPONSE_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_UDS_RESPONSE_templ(const Napi::CallbackInfo &);
_exports_ZCAN_UDS_RESPONSE_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_RESPONSE_status_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_RESPONSE_status_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_RESPONSE_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_RESPONSE_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_RESPONSE_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_RESPONSE_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_UDS_RESPONSE(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_UDS_RESPONSE_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_UDS_RESPONSE_inst : public _exports_ZCAN_UDS_RESPONSE_templ<_exports_ZCAN_UDS_RESPONSE_inst> {
public:
  using _exports_ZCAN_UDS_RESPONSE_templ::_exports_ZCAN_UDS_RESPONSE_templ;
  virtual ~_exports_ZCAN_UDS_RESPONSE_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_UDS_RESPONSE_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_UDS_RESPONSE_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_UDS_RESPONSE (_exports_ZCAN_UDS_RESPONSE) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_UDS_RESPONSE_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_UDS_RESPONSE_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_UDS_RESPONSE_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_UDS_RESPONSE_inst>::DefineClass(env, "ZCAN_UDS_RESPONSE", symbolTable);
}

void _exports_ZCAN_UDS_RESPONSE_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_UDS_RESPONSE_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_UDS_RESPONSE_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("status");
  members.insert({
    "status",
      _exports_ZCAN_UDS_RESPONSE_templ::InstanceAccessor("status",
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_status_get,
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_status_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_UDS_RESPONSE_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_reserved_get,
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_ZCAN_UDS_RESPONSE_templ::InstanceAccessor("type",
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_type_get,
        &_exports_ZCAN_UDS_RESPONSE_templ::_wrap_ZCAN_UDS_RESPONSE_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_UDS_CTRL_REQ_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_UDS_CTRL_REQ_templ(const Napi::CallbackInfo &);
_exports_ZCAN_UDS_CTRL_REQ_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_CTRL_REQ_reqID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_CTRL_REQ_reqID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_CTRL_REQ_cmd_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_CTRL_REQ_cmd_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_CTRL_REQ_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_CTRL_REQ_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_UDS_CTRL_REQ(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_UDS_CTRL_REQ_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_UDS_CTRL_REQ_inst : public _exports_ZCAN_UDS_CTRL_REQ_templ<_exports_ZCAN_UDS_CTRL_REQ_inst> {
public:
  using _exports_ZCAN_UDS_CTRL_REQ_templ::_exports_ZCAN_UDS_CTRL_REQ_templ;
  virtual ~_exports_ZCAN_UDS_CTRL_REQ_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_UDS_CTRL_REQ_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_UDS_CTRL_REQ_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_UDS_CTRL_REQ (_exports_ZCAN_UDS_CTRL_REQ) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_UDS_CTRL_REQ_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_UDS_CTRL_REQ_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_UDS_CTRL_REQ_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_UDS_CTRL_REQ_inst>::DefineClass(env, "ZCAN_UDS_CTRL_REQ", symbolTable);
}

void _exports_ZCAN_UDS_CTRL_REQ_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_UDS_CTRL_REQ_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_UDS_CTRL_REQ_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("reqID");
  members.insert({
    "reqID",
      _exports_ZCAN_UDS_CTRL_REQ_templ::InstanceAccessor("reqID",
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_reqID_get,
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_reqID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("cmd");
  members.insert({
    "cmd",
      _exports_ZCAN_UDS_CTRL_REQ_templ::InstanceAccessor("cmd",
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_cmd_get,
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_cmd_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_UDS_CTRL_REQ_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_reserved_get,
        &_exports_ZCAN_UDS_CTRL_REQ_templ::_wrap_ZCAN_UDS_CTRL_REQ_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCAN_UDS_CTRL_RESP_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCAN_UDS_CTRL_RESP_templ(const Napi::CallbackInfo &);
_exports_ZCAN_UDS_CTRL_RESP_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_CTRL_RESP_result_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_CTRL_RESP_result_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCAN_UDS_CTRL_RESP_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCAN_UDS_CTRL_RESP_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCAN_UDS_CTRL_RESP(const Napi::CallbackInfo &);
virtual ~_exports_ZCAN_UDS_CTRL_RESP_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCAN_UDS_CTRL_RESP_inst : public _exports_ZCAN_UDS_CTRL_RESP_templ<_exports_ZCAN_UDS_CTRL_RESP_inst> {
public:
  using _exports_ZCAN_UDS_CTRL_RESP_templ::_exports_ZCAN_UDS_CTRL_RESP_templ;
  virtual ~_exports_ZCAN_UDS_CTRL_RESP_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCAN_UDS_CTRL_RESP_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCAN_UDS_CTRL_RESP_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCAN_UDS_CTRL_RESP (_exports_ZCAN_UDS_CTRL_RESP) */
// jsnapi_getclass
Napi::Function _exports_ZCAN_UDS_CTRL_RESP_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCAN_UDS_CTRL_RESP_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCAN_UDS_CTRL_RESP_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCAN_UDS_CTRL_RESP_inst>::DefineClass(env, "ZCAN_UDS_CTRL_RESP", symbolTable);
}

void _exports_ZCAN_UDS_CTRL_RESP_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCAN_UDS_CTRL_RESP_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCAN_UDS_CTRL_RESP_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("result");
  members.insert({
    "result",
      _exports_ZCAN_UDS_CTRL_RESP_templ::InstanceAccessor("result",
        &_exports_ZCAN_UDS_CTRL_RESP_templ::_wrap_ZCAN_UDS_CTRL_RESP_result_get,
        &_exports_ZCAN_UDS_CTRL_RESP_templ::_wrap_ZCAN_UDS_CTRL_RESP_result_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCAN_UDS_CTRL_RESP_templ::InstanceAccessor("reserved",
        &_exports_ZCAN_UDS_CTRL_RESP_templ::_wrap_ZCAN_UDS_CTRL_RESP_reserved_get,
        &_exports_ZCAN_UDS_CTRL_RESP_templ::_wrap_ZCAN_UDS_CTRL_RESP_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANCANFDUdsData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANCANFDUdsData_templ(const Napi::CallbackInfo &);
_exports_ZCANCANFDUdsData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANCANFDUdsData_req_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANCANFDUdsData_req_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANCANFDUdsData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANCANFDUdsData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANCANFDUdsData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANCANFDUdsData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANCANFDUdsData_inst : public _exports_ZCANCANFDUdsData_templ<_exports_ZCANCANFDUdsData_inst> {
public:
  using _exports_ZCANCANFDUdsData_templ::_exports_ZCANCANFDUdsData_templ;
  virtual ~_exports_ZCANCANFDUdsData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANCANFDUdsData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANCANFDUdsData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANCANFDUdsData (_exports_ZCANCANFDUdsData) */
// jsnapi_getclass
Napi::Function _exports_ZCANCANFDUdsData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANCANFDUdsData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANCANFDUdsData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANCANFDUdsData_inst>::DefineClass(env, "ZCANCANFDUdsData", symbolTable);
}

void _exports_ZCANCANFDUdsData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANCANFDUdsData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANCANFDUdsData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req");
  members.insert({
    "req",
      _exports_ZCANCANFDUdsData_templ::InstanceAccessor("req",
        &_exports_ZCANCANFDUdsData_templ::_wrap_ZCANCANFDUdsData_req_get,
        &_exports_ZCANCANFDUdsData_templ::_wrap_ZCANCANFDUdsData_req_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANCANFDUdsData_templ::InstanceAccessor("reserved",
        &_exports_ZCANCANFDUdsData_templ::_wrap_ZCANCANFDUdsData_reserved_get,
        &_exports_ZCANCANFDUdsData_templ::_wrap_ZCANCANFDUdsData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANLINUdsData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANLINUdsData_templ(const Napi::CallbackInfo &);
_exports_ZCANLINUdsData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINUdsData_req_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINUdsData_req_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANLINUdsData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANLINUdsData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANLINUdsData(const Napi::CallbackInfo &);
virtual ~_exports_ZCANLINUdsData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANLINUdsData_inst : public _exports_ZCANLINUdsData_templ<_exports_ZCANLINUdsData_inst> {
public:
  using _exports_ZCANLINUdsData_templ::_exports_ZCANLINUdsData_templ;
  virtual ~_exports_ZCANLINUdsData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANLINUdsData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANLINUdsData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANLINUdsData (_exports_ZCANLINUdsData) */
// jsnapi_getclass
Napi::Function _exports_ZCANLINUdsData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANLINUdsData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANLINUdsData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANLINUdsData_inst>::DefineClass(env, "ZCANLINUdsData", symbolTable);
}

void _exports_ZCANLINUdsData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANLINUdsData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANLINUdsData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req");
  members.insert({
    "req",
      _exports_ZCANLINUdsData_templ::InstanceAccessor("req",
        &_exports_ZCANLINUdsData_templ::_wrap_ZCANLINUdsData_req_get,
        &_exports_ZCANLINUdsData_templ::_wrap_ZCANLINUdsData_req_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANLINUdsData_templ::InstanceAccessor("reserved",
        &_exports_ZCANLINUdsData_templ::_wrap_ZCANLINUdsData_reserved_get,
        &_exports_ZCANLINUdsData_templ::_wrap_ZCANLINUdsData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZDoIPUdsData_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZDoIPUdsData_templ(const Napi::CallbackInfo &);
_exports_ZDoIPUdsData_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDoIPUdsData_req_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDoIPUdsData_req_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZDoIPUdsData_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZDoIPUdsData_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZDoIPUdsData(const Napi::CallbackInfo &);
virtual ~_exports_ZDoIPUdsData_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZDoIPUdsData_inst : public _exports_ZDoIPUdsData_templ<_exports_ZDoIPUdsData_inst> {
public:
  using _exports_ZDoIPUdsData_templ::_exports_ZDoIPUdsData_templ;
  virtual ~_exports_ZDoIPUdsData_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZDoIPUdsData_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZDoIPUdsData_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZDoIPUdsData (_exports_ZDoIPUdsData) */
// jsnapi_getclass
Napi::Function _exports_ZDoIPUdsData_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZDoIPUdsData_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZDoIPUdsData_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZDoIPUdsData_inst>::DefineClass(env, "ZDoIPUdsData", symbolTable);
}

void _exports_ZDoIPUdsData_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZDoIPUdsData_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZDoIPUdsData_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("req");
  members.insert({
    "req",
      _exports_ZDoIPUdsData_templ::InstanceAccessor("req",
        &_exports_ZDoIPUdsData_templ::_wrap_ZDoIPUdsData_req_get,
        &_exports_ZDoIPUdsData_templ::_wrap_ZDoIPUdsData_req_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZDoIPUdsData_templ::InstanceAccessor("reserved",
        &_exports_ZDoIPUdsData_templ::_wrap_ZDoIPUdsData_reserved_get,
        &_exports_ZDoIPUdsData_templ::_wrap_ZDoIPUdsData_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ZCANUdsRequestDataObj_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ZCANUdsRequestDataObj_templ(const Napi::CallbackInfo &);
_exports_ZCANUdsRequestDataObj_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANUdsRequestDataObj_dataType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANUdsRequestDataObj_dataType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ZCANUdsRequestDataObj_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_ZCANUdsRequestDataObj_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ZCANUdsRequestDataObj(const Napi::CallbackInfo &);
virtual ~_exports_ZCANUdsRequestDataObj_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ZCANUdsRequestDataObj_inst : public _exports_ZCANUdsRequestDataObj_templ<_exports_ZCANUdsRequestDataObj_inst> {
public:
  using _exports_ZCANUdsRequestDataObj_templ::_exports_ZCANUdsRequestDataObj_templ;
  virtual ~_exports_ZCANUdsRequestDataObj_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ZCANUdsRequestDataObj_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ZCANUdsRequestDataObj_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ZCANUdsRequestDataObj (_exports_ZCANUdsRequestDataObj) */
// jsnapi_getclass
Napi::Function _exports_ZCANUdsRequestDataObj_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ZCANUdsRequestDataObj_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ZCANUdsRequestDataObj_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ZCANUdsRequestDataObj_inst>::DefineClass(env, "ZCANUdsRequestDataObj", symbolTable);
}

void _exports_ZCANUdsRequestDataObj_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ZCANUdsRequestDataObj_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ZCANUdsRequestDataObj_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("dataType");
  members.insert({
    "dataType",
      _exports_ZCANUdsRequestDataObj_templ::InstanceAccessor("dataType",
        &_exports_ZCANUdsRequestDataObj_templ::_wrap_ZCANUdsRequestDataObj_dataType_get,
        &_exports_ZCANUdsRequestDataObj_templ::_wrap_ZCANUdsRequestDataObj_dataType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_ZCANUdsRequestDataObj_templ::InstanceAccessor("reserved",
        &_exports_ZCANUdsRequestDataObj_templ::_wrap_ZCANUdsRequestDataObj_reserved_get,
        &_exports_ZCANUdsRequestDataObj_templ::_wrap_ZCANUdsRequestDataObj_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}





template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_exports_DEVICE_HANDLE_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_DEVICE_HANDLE;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  DEVICE_HANDLE *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DEVICE_HANDLE.");
  }
  result = (DEVICE_HANDLE *)new_DEVICE_HANDLE();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_exports_DEVICE_HANDLE_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_DEVICE_HANDLE(DEVICE_HANDLE *self){
  delete self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::~_exports_DEVICE_HANDLE_templ() {
  auto arg1 = reinterpret_cast<DEVICE_HANDLE *>(this->self);
  if (this->owned && arg1) {
    delete_DEVICE_HANDLE(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_DEVICE_HANDLE_assign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DEVICE_HANDLE *arg1 = (DEVICE_HANDLE *) 0 ;
  SwigValueWrapper< DEVICE_HANDLE > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DEVICE_HANDLE_assign.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DEVICE_HANDLE_assign" "', argument " "1"" of type '" "DEVICE_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< DEVICE_HANDLE * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DEVICE_HANDLE_assign" "', argument " "2"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DEVICE_HANDLE_assign" "', argument " "2"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg2 = *(reinterpret_cast< DEVICE_HANDLE * >(argp2));
      }
    }
  }
  DEVICE_HANDLE_assign(arg1,SWIG_STD_MOVE(arg2));
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_DEVICE_HANDLE_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DEVICE_HANDLE *arg1 = (DEVICE_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< DEVICE_HANDLE > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DEVICE_HANDLE_value.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DEVICE_HANDLE_value" "', argument " "1"" of type '" "DEVICE_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< DEVICE_HANDLE * >(argp1);result = DEVICE_HANDLE_value(arg1);
  jsresult = SWIG_NewPointerObj((new DEVICE_HANDLE(result)), SWIGTYPE_p_DEVICE_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_DEVICE_HANDLE_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DEVICE_HANDLE *arg1 = (DEVICE_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DEVICE_HANDLE *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DEVICE_HANDLE_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DEVICE_HANDLE_cast" "', argument " "1"" of type '" "DEVICE_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< DEVICE_HANDLE * >(argp1);result = (DEVICE_HANDLE *)DEVICE_HANDLE_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DEVICE_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_DEVICE_HANDLE_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DEVICE_HANDLE *arg1 = (DEVICE_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DEVICE_HANDLE *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DEVICE_HANDLE_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DEVICE_HANDLE_frompointer" "', argument " "1"" of type '" "DEVICE_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< DEVICE_HANDLE * >(argp1);result = (DEVICE_HANDLE *)DEVICE_HANDLE_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DEVICE_HANDLE, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_exports_CHANNEL_HANDLE_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_CHANNEL_HANDLE;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  CHANNEL_HANDLE *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CHANNEL_HANDLE.");
  }
  result = (CHANNEL_HANDLE *)new_CHANNEL_HANDLE();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_exports_CHANNEL_HANDLE_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_CHANNEL_HANDLE(CHANNEL_HANDLE *self){
  delete self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::~_exports_CHANNEL_HANDLE_templ() {
  auto arg1 = reinterpret_cast<CHANNEL_HANDLE *>(this->self);
  if (this->owned && arg1) {
    delete_CHANNEL_HANDLE(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_CHANNEL_HANDLE_assign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CHANNEL_HANDLE *arg1 = (CHANNEL_HANDLE *) 0 ;
  SwigValueWrapper< CHANNEL_HANDLE > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CHANNEL_HANDLE_assign.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_HANDLE_assign" "', argument " "1"" of type '" "CHANNEL_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_HANDLE * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(info[0], &argp2, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CHANNEL_HANDLE_assign" "', argument " "2"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CHANNEL_HANDLE_assign" "', argument " "2"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg2 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp2));
      }
    }
  }
  CHANNEL_HANDLE_assign(arg1,SWIG_STD_MOVE(arg2));
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_CHANNEL_HANDLE_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CHANNEL_HANDLE *arg1 = (CHANNEL_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< CHANNEL_HANDLE > result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CHANNEL_HANDLE_value.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_HANDLE_value" "', argument " "1"" of type '" "CHANNEL_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_HANDLE * >(argp1);result = CHANNEL_HANDLE_value(arg1);
  jsresult = SWIG_NewPointerObj((new CHANNEL_HANDLE(result)), SWIGTYPE_p_CHANNEL_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_CHANNEL_HANDLE_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CHANNEL_HANDLE *arg1 = (CHANNEL_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CHANNEL_HANDLE *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CHANNEL_HANDLE_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_HANDLE_cast" "', argument " "1"" of type '" "CHANNEL_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_HANDLE * >(argp1);result = (CHANNEL_HANDLE *)CHANNEL_HANDLE_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CHANNEL_HANDLE_templ<SWIG_OBJ_WRAP>::_wrap_CHANNEL_HANDLE_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CHANNEL_HANDLE *arg1 = (CHANNEL_HANDLE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CHANNEL_HANDLE *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CHANNEL_HANDLE_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHANNEL_HANDLE_frompointer" "', argument " "1"" of type '" "CHANNEL_HANDLE *""'"); 
  }
  arg1 = reinterpret_cast< CHANNEL_HANDLE * >(argp1);result = (CHANNEL_HANDLE *)CHANNEL_HANDLE_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CHANNEL_HANDLE, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_U32Array_templ<SWIG_OBJ_WRAP>::_exports_U32Array_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_U32Array;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  U32Array *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_U32Array.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_U32Array" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (U32Array *)new_U32Array(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_U32Array_templ<SWIG_OBJ_WRAP>::_exports_U32Array_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_U32Array(U32Array *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_U32Array_templ<SWIG_OBJ_WRAP>::~_exports_U32Array_templ() {
  auto arg1 = reinterpret_cast<U32Array *>(this->self);
  if (this->owned && arg1) {
    delete_U32Array(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U32Array_templ<SWIG_OBJ_WRAP>::_wrap_U32Array_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U32Array *arg1 = (U32Array *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U32Array_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U32Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U32Array_getitem" "', argument " "1"" of type '" "U32Array *""'"); 
  }
  arg1 = reinterpret_cast< U32Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "U32Array_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (uint32_t)U32Array_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U32Array_templ<SWIG_OBJ_WRAP>::_wrap_U32Array_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U32Array *arg1 = (U32Array *) 0 ;
  size_t arg2 ;
  uint32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U32Array_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U32Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U32Array_setitem" "', argument " "1"" of type '" "U32Array *""'"); 
  }
  arg1 = reinterpret_cast< U32Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "U32Array_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "U32Array_setitem" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);U32Array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U32Array_templ<SWIG_OBJ_WRAP>::_wrap_U32Array_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U32Array *arg1 = (U32Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U32Array_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U32Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U32Array_cast" "', argument " "1"" of type '" "U32Array *""'"); 
  }
  arg1 = reinterpret_cast< U32Array * >(argp1);result = (uint32_t *)U32Array_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U32Array_templ<SWIG_OBJ_WRAP>::_wrap_U32Array_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint32_t *arg1 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  U32Array *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U32Array_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U32Array_frompointer" "', argument " "1"" of type '" "uint32_t *""'"); 
  }
  arg1 = reinterpret_cast< uint32_t * >(argp1);result = (U32Array *)U32Array_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_U32Array, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::_exports_ByteArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ByteArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ByteArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ByteArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ByteArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (ByteArray *)new_ByteArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::_exports_ByteArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_ByteArray(ByteArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::~_exports_ByteArray_templ() {
  auto arg1 = reinterpret_cast<ByteArray *>(this->self);
  if (this->owned && arg1) {
    delete_ByteArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  BYTE result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_getitem" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (BYTE)ByteArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  size_t arg2 ;
  BYTE arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_setitem" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_char(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ByteArray_setitem" "', argument " "3"" of type '" "BYTE""'");
  } 
  arg3 = static_cast< BYTE >(val3);ByteArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_cast" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);result = (BYTE *)ByteArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  BYTE *arg1 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ByteArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_frompointer" "', argument " "1"" of type '" "BYTE *""'"); 
  }
  arg1 = reinterpret_cast< BYTE * >(argp1);result = (ByteArray *)ByteArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ByteArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_exports_ReceiveDataArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ReceiveDataArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ReceiveDataArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ReceiveDataArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReceiveDataArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (ReceiveDataArray *)new_ReceiveDataArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_exports_ReceiveDataArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_ReceiveDataArray(ReceiveDataArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::~_exports_ReceiveDataArray_templ() {
  auto arg1 = reinterpret_cast<ReceiveDataArray *>(this->self);
  if (this->owned && arg1) {
    delete_ReceiveDataArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveDataArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveDataArray *arg1 = (ReceiveDataArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  ZCAN_Receive_Data result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveDataArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveDataArray_getitem" "', argument " "1"" of type '" "ReceiveDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveDataArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReceiveDataArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = ReceiveDataArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_NewPointerObj((new ZCAN_Receive_Data(result)), SWIGTYPE_p_tagZCAN_Receive_Data, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveDataArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveDataArray *arg1 = (ReceiveDataArray *) 0 ;
  size_t arg2 ;
  ZCAN_Receive_Data arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveDataArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveDataArray_setitem" "', argument " "1"" of type '" "ReceiveDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveDataArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReceiveDataArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);{
    {
      res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_tagZCAN_Receive_Data,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReceiveDataArray_setitem" "', argument " "3"" of type '" "ZCAN_Receive_Data""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReceiveDataArray_setitem" "', argument " "3"" of type '" "ZCAN_Receive_Data""'");
      } else {
        arg3 = *(reinterpret_cast< ZCAN_Receive_Data * >(argp3));
      }
    }
  }
  ReceiveDataArray_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveDataArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveDataArray *arg1 = (ReceiveDataArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_Receive_Data *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveDataArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveDataArray_cast" "', argument " "1"" of type '" "ReceiveDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveDataArray * >(argp1);result = (ZCAN_Receive_Data *)ReceiveDataArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveDataArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_Receive_Data *arg1 = (ZCAN_Receive_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ReceiveDataArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveDataArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveDataArray_frompointer" "', argument " "1"" of type '" "ZCAN_Receive_Data *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_Receive_Data * >(argp1);result = (ReceiveDataArray *)ReceiveDataArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReceiveDataArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_exports_ReceiveFDDataArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ReceiveFDDataArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ReceiveFDDataArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ReceiveFDDataArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ReceiveFDDataArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (ReceiveFDDataArray *)new_ReceiveFDDataArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_exports_ReceiveFDDataArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_ReceiveFDDataArray(ReceiveFDDataArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::~_exports_ReceiveFDDataArray_templ() {
  auto arg1 = reinterpret_cast<ReceiveFDDataArray *>(this->self);
  if (this->owned && arg1) {
    delete_ReceiveFDDataArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveFDDataArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveFDDataArray *arg1 = (ReceiveFDDataArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  ZCAN_ReceiveFD_Data result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveFDDataArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveFDDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveFDDataArray_getitem" "', argument " "1"" of type '" "ReceiveFDDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveFDDataArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReceiveFDDataArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = ReceiveFDDataArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_NewPointerObj((new ZCAN_ReceiveFD_Data(result)), SWIGTYPE_p_tagZCAN_ReceiveFD_Data, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveFDDataArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveFDDataArray *arg1 = (ReceiveFDDataArray *) 0 ;
  size_t arg2 ;
  ZCAN_ReceiveFD_Data arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveFDDataArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveFDDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveFDDataArray_setitem" "', argument " "1"" of type '" "ReceiveFDDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveFDDataArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ReceiveFDDataArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);{
    {
      res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_tagZCAN_ReceiveFD_Data,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ReceiveFDDataArray_setitem" "', argument " "3"" of type '" "ZCAN_ReceiveFD_Data""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ReceiveFDDataArray_setitem" "', argument " "3"" of type '" "ZCAN_ReceiveFD_Data""'");
      } else {
        arg3 = *(reinterpret_cast< ZCAN_ReceiveFD_Data * >(argp3));
      }
    }
  }
  ReceiveFDDataArray_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveFDDataArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ReceiveFDDataArray *arg1 = (ReceiveFDDataArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_ReceiveFD_Data *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveFDDataArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ReceiveFDDataArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveFDDataArray_cast" "', argument " "1"" of type '" "ReceiveFDDataArray *""'"); 
  }
  arg1 = reinterpret_cast< ReceiveFDDataArray * >(argp1);result = (ZCAN_ReceiveFD_Data *)ReceiveFDDataArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ReceiveFDDataArray_templ<SWIG_OBJ_WRAP>::_wrap_ReceiveFDDataArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_ReceiveFD_Data *arg1 = (ZCAN_ReceiveFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ReceiveFDDataArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReceiveFDDataArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReceiveFDDataArray_frompointer" "', argument " "1"" of type '" "ZCAN_ReceiveFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_ReceiveFD_Data * >(argp1);result = (ReceiveFDDataArray *)ReceiveFDDataArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ReceiveFDDataArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_EFF_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_RTR_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_ERR_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x20000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_ID_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1FFFFFFFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_SFF_MASK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x000007FFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_EFF_MASK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1FFFFFFFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_ERR_MASK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1FFFFFFFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_SFF_ID_BITS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(11));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_EFF_ID_BITS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(29));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_MAX_DLC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_MAX_DLEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANFD_MAX_DLC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(15));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANFD_MAX_DLEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(64));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TX_DELAY_SEND_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x80));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TX_DELAY_SEND_TIME_UNIT_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x40));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TX_ECHO_FLAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x20));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_can_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  canid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_can_id_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "can_frame_can_id_set" "', argument " "2"" of type '" "canid_t""'");
  } 
  arg2 = static_cast< canid_t >(val2);if (arg1) (arg1)->can_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_can_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canid_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_can_id_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (canid_t) ((arg1)->can_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_can_dlc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_can_dlc_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "can_frame_can_dlc_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->can_dlc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_can_dlc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_can_dlc_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (BYTE) ((arg1)->can_dlc);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___pad_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___pad_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "can_frame___pad_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->__pad = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___pad_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___pad_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (BYTE) ((arg1)->__pad);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___res0_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___res0_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "can_frame___res0_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->__res0 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___res0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___res0_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (BYTE) ((arg1)->__res0);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___res1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___res1_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "can_frame___res1_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->__res1 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame___res1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame___res1_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (BYTE) ((arg1)->__res1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_data_set" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "can_frame_data_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->data[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_can_frame_templ<SWIG_OBJ_WRAP>::_wrap_can_frame_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  can_frame *arg1 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "can_frame_data_get" "', argument " "1"" of type '" "can_frame *""'"); 
  }
  arg1 = reinterpret_cast< can_frame * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_can_frame_templ<SWIG_OBJ_WRAP>::_exports_can_frame_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_can_frame;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  can_frame *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_can_frame.");
  }
  result = (can_frame *)new can_frame();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_can_frame_templ<SWIG_OBJ_WRAP>::_exports_can_frame_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_can_frame_templ<SWIG_OBJ_WRAP>::~_exports_can_frame_templ() {
  auto arg1 = reinterpret_cast<can_frame *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_CANFD_BRS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANFD_ESI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_can_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  canid_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_can_id_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_frame_can_id_set" "', argument " "2"" of type '" "canid_t""'");
  } 
  arg2 = static_cast< canid_t >(val2);if (arg1) (arg1)->can_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_can_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canid_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_can_id_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (canid_t) ((arg1)->can_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_len_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_len_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_frame_len_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->len = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_len_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_len_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (BYTE) ((arg1)->len);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_flags_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_frame_flags_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_flags_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (BYTE) ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame___res0_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame___res0_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_frame___res0_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->__res0 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame___res0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame___res0_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (BYTE) ((arg1)->__res0);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame___res1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame___res1_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_frame___res1_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->__res1 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame___res1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame___res1_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (BYTE) ((arg1)->__res1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_data_set" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "canfd_frame_data_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->data[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""BYTE [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_wrap_canfd_frame_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd_frame *arg1 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_frame_data_get" "', argument " "1"" of type '" "canfd_frame *""'"); 
  }
  arg1 = reinterpret_cast< canfd_frame * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_exports_canfd_frame_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_canfd_frame;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  canfd_frame *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_canfd_frame.");
  }
  result = (canfd_frame *)new canfd_frame();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_canfd_frame_templ<SWIG_OBJ_WRAP>::_exports_canfd_frame_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_canfd_frame_templ<SWIG_OBJ_WRAP>::~_exports_canfd_frame_templ() {
  auto arg1 = reinterpret_cast<canfd_frame *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_PCI5121_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI9810_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI9820_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CAN232_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI5110_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANLITE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ISA9620_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(9));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ISA5420_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PC104CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(11));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANETUDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(12));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANETE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(12));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DNP9810_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(13));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI9840_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(14));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PC104CAN2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(15));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI9820I_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANETTCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(17));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_9220_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(18));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI5010U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(19));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN_E_U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(20));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN_2E_U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(21));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCI5020U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(22));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_EG20T_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(23));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE9221_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(24));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_WIFICAN_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(25));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_WIFICAN_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(26));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIe9120_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(27));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIe9110_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(28));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIe9140_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(29));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN_4E_U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(31));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANDTU_200UR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(32));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANDTU_MINI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(33));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCAN_8E_U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(34));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANREPLAY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(35));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANDTU_NET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(36));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANDTU_100UR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(37));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_100U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(38));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_200U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(39));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_400U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(40));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCANFD_200U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(41));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCANFD_100U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(42));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCANFD_MINI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(43));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDCOM_100IE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(44));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANSCOPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(45));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CLOUD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(46));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANDTU_NET_400_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(47));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(48));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_200U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(48));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(49));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_200U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(49));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(50));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_100U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(50));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(51));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_100U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(51));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_400U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(52));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_400U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(53));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDBLUE_200U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(54));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_100U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(55));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_100U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(56));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_800U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(57));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDNET_800U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(58));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCANFD_800U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(59));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_100U_EX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(60));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_400U_EX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(61));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_200U_MINI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(62));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_PCIE_CANFD_200U_M2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(63));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_400_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(64));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_400_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(65));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_200U_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(66));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDWIFI_200U_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(67));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_800ER_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(68));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_800ER_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(69));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_800EWGR_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(70));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_800EWGR_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(71));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_600EWGR_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(72));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_600EWGR_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(73));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_CASCADE_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(74));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_CASCADE_UDP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(75));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_USBCANFD_400U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(76));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDDTU_200U_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(77));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ZPSCANFD_TCP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(78));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ZPSCANFD_USB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(79));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CANFDBRIDGE_PLUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(80));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_OFFLINE_DEVICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(98));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_VIRTUAL_DEVICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(99));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0001));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_ERRALARM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0002));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_PASSIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0004));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_LOSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0008));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_BUSERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0010));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_BUSOFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0020));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CAN_BUFFER_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0040));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_DEVICEOPENED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0100));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_DEVICEOPEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0200));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_DEVICENOTOPEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0400));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_BUFFEROVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x0800));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_DEVICENOTEXIST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x1000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_LOADKERNELDLL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CMDFAILED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x4000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_BUFFERCREATE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x8000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CANETE_PORTOPENED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00010000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CANETE_INDEXUSED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00020000));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_REF_TYPE_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030001));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_CREATE_SOCKET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030002));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_OPEN_CONNECT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030003));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_NO_STARTUP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030004));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_NO_CONNECTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030005));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_SEND_PARTIAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030006));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERROR_SEND_TOO_FAST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00030007));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_ONLINE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_OFFLINE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_UNSUPPORTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_STATUS_BUFFER_TOO_SMALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DEF_CAN_UDS_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DEF_LIN_UDS_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DEF_DOIP_UDS_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_DESIP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_DESPORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_CHGDESIPANDPORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_SRCPORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_TCP_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TCP_CLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TCP_SERVER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_CLIENT_COUNT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_CLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_DISCONN_CLINET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CMD_SET_RECONNECT_TIME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TYPE_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TYPE_CANFD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TYPE_ALL_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_DEVNAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_DEVNAME");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_ENABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_ENABLE");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_MODE");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_TXATTEMPTS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_TXATTEMPTS");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_NOMINALBAUD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_NOMINALBAUD");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_DATABAUD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_DATABAUD");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_USERES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_USERES");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_SNDCFG_INTERVAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_SNDCFG_INTERVAL");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_ENABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_BUSRATIO_ENABLE");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_PERIOD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_FromCharPtr((const char *)"DYNAMIC_CONFIG_CAN%d_BUSRATIO_PERIOD");
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG_DATA *arg1 = (tagZCAN_DYNAMIC_CONFIG_DATA *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_key_set" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG_DATA * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_key_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->key,arg2,64*sizeof(char));
  else memset(arg1->key,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_key_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG_DATA *arg1 = (tagZCAN_DYNAMIC_CONFIG_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_key_get" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG_DATA * >(argp1);result = (char *)(char *) ((arg1)->key);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG_DATA *arg1 = (tagZCAN_DYNAMIC_CONFIG_DATA *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_value_set" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG_DATA * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_value_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->value,arg2,64*sizeof(char));
  else memset(arg1->value,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_DATA_value_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG_DATA *arg1 = (tagZCAN_DYNAMIC_CONFIG_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_DATA_value_get" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG_DATA * >(argp1);result = (char *)(char *) ((arg1)->value);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_DYNAMIC_CONFIG_DATA *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_DYNAMIC_CONFIG_DATA.");
  }
  result = (tagZCAN_DYNAMIC_CONFIG_DATA *)new tagZCAN_DYNAMIC_CONFIG_DATA();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_DYNAMIC_CONFIG_DATA_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_DYNAMIC_CONFIG_DATA *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_CANFD_FILTER_COUNT_MAX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANFD_DATA_LEN_MAX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(64));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DYNAMIC_CONFIG_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DYNAMIC_CONFIG_FILTER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::_wrap_unionCANFDFilterRulePresent_rawValue_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unionCANFDFilterRulePresent *arg1 = (unionCANFDFilterRulePresent *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_unionCANFDFilterRulePresent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unionCANFDFilterRulePresent_rawValue_set" "', argument " "1"" of type '" "unionCANFDFilterRulePresent *""'"); 
  }
  arg1 = reinterpret_cast< unionCANFDFilterRulePresent * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "unionCANFDFilterRulePresent_rawValue_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->rawValue = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::_wrap_unionCANFDFilterRulePresent_rawValue_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unionCANFDFilterRulePresent *arg1 = (unionCANFDFilterRulePresent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_unionCANFDFilterRulePresent, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "unionCANFDFilterRulePresent_rawValue_get" "', argument " "1"" of type '" "unionCANFDFilterRulePresent *""'"); 
  }
  arg1 = reinterpret_cast< unionCANFDFilterRulePresent * >(argp1);result = (unsigned int) ((arg1)->rawValue);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::_exports_unionCANFDFilterRulePresent_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_unionCANFDFilterRulePresent;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  unionCANFDFilterRulePresent *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_unionCANFDFilterRulePresent.");
  }
  result = (unionCANFDFilterRulePresent *)new unionCANFDFilterRulePresent();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::_exports_unionCANFDFilterRulePresent_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_unionCANFDFilterRulePresent_templ<SWIG_OBJ_WRAP>::~_exports_unionCANFDFilterRulePresent_templ() {
  auto arg1 = reinterpret_cast<unionCANFDFilterRulePresent *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_presentFlag_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  unionCANFDFilterRulePresent *arg2 = (unionCANFDFilterRulePresent *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_presentFlag_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unionCANFDFilterRulePresent, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANFD_FILTER_RULE_presentFlag_set" "', argument " "2"" of type '" "unionCANFDFilterRulePresent *""'"); 
  }
  arg2 = reinterpret_cast< unionCANFDFilterRulePresent * >(argp2);if (arg1) (arg1)->presentFlag = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_presentFlag_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unionCANFDFilterRulePresent *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_presentFlag_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (unionCANFDFilterRulePresent *)& ((arg1)->presentFlag);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unionCANFDFilterRulePresent, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nErr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nErr_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nErr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nErr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nErr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nErr_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nErr);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nChnl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nChnl_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nChnl_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nChnl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nChnl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nChnl_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nChnl);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFD_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFD_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nFD_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nFD = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFD_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nFD);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nExt_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nExt_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nExt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nExt = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nExt_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nExt_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nExt);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nRtr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nRtr_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nRtr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nRtr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nRtr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nRtr_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nRtr);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nLen_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nLen_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nLen_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nLen);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nBeginID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nBeginID_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nBeginID_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nBeginID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nBeginID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nBeginID_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nBeginID);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nEndID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nEndID_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nEndID_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nEndID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nEndID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nEndID_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nEndID);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nBeginTime_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nBeginTime_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nBeginTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nBeginTime = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nBeginTime_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nBeginTime_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nBeginTime);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nEndTime_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nEndTime_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nEndTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nEndTime = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nEndTime_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nEndTime_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nEndTime);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFilterDataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFilterDataLen_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nFilterDataLen_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nFilterDataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFilterDataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFilterDataLen_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nFilterDataLen);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nMaskDataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nMaskDataLen_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_RULE_nMaskDataLen_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nMaskDataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nMaskDataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nMaskDataLen_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (int) ((arg1)->nMaskDataLen);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFilterData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFilterData_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANFD_FILTER_RULE_nFilterData_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->nFilterData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""nFilterData""' of type '""BYTE [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nFilterData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nFilterData_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->nFilterData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nMaskData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nMaskData_set" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANFD_FILTER_RULE_nMaskData_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->nMaskData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""nMaskData""' of type '""BYTE [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_RULE_nMaskData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_RULE *arg1 = (CANFD_FILTER_RULE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_RULE_nMaskData_get" "', argument " "1"" of type '" "CANFD_FILTER_RULE *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_RULE * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->nMaskData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_exports_CANFD_FILTER_RULE_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_CANFD_FILTER_RULE;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  CANFD_FILTER_RULE *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CANFD_FILTER_RULE.");
  }
  result = (CANFD_FILTER_RULE *)new CANFD_FILTER_RULE();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::_exports_CANFD_FILTER_RULE_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CANFD_FILTER_RULE_templ<SWIG_OBJ_WRAP>::~_exports_CANFD_FILTER_RULE_templ() {
  auto arg1 = reinterpret_cast<CANFD_FILTER_RULE *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_CANFD_FILTER_BLACK_LIST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANFD_FILTER_WHITE_LIST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_bEnable_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_bEnable_set" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_CFG_bEnable_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->bEnable = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_bEnable_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_bEnable_get" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);result = (int) ((arg1)->bEnable);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_enBlackWhiteList_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  enumCANFDFilterBlackWhiteList arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_enBlackWhiteList_set" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANFD_FILTER_CFG_enBlackWhiteList_set" "', argument " "2"" of type '" "enumCANFDFilterBlackWhiteList""'");
  } 
  arg2 = static_cast< enumCANFDFilterBlackWhiteList >(val2);if (arg1) (arg1)->enBlackWhiteList = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_enBlackWhiteList_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  enumCANFDFilterBlackWhiteList result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_enBlackWhiteList_get" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);result = (enumCANFDFilterBlackWhiteList) ((arg1)->enBlackWhiteList);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_vecFilters_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  CANFD_FILTER_RULE *arg2 = (CANFD_FILTER_RULE *) (CANFD_FILTER_RULE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_vecFilters_set" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANFD_FILTER_CFG_vecFilters_set" "', argument " "2"" of type '" "CANFD_FILTER_RULE [16]""'"); 
  } 
  arg2 = reinterpret_cast< CANFD_FILTER_RULE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(CANFD_FILTER_RULE *)&arg1->vecFilters[ii] = *((CANFD_FILTER_RULE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""vecFilters""' of type '""CANFD_FILTER_RULE [16]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_wrap_CANFD_FILTER_CFG_vecFilters_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CANFD_FILTER_CFG *arg1 = (CANFD_FILTER_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CANFD_FILTER_RULE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CANFD_FILTER_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANFD_FILTER_CFG_vecFilters_get" "', argument " "1"" of type '" "CANFD_FILTER_CFG *""'"); 
  }
  arg1 = reinterpret_cast< CANFD_FILTER_CFG * >(argp1);result = (CANFD_FILTER_RULE *)(CANFD_FILTER_RULE *) ((arg1)->vecFilters);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CANFD_FILTER_RULE, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_exports_CANFD_FILTER_CFG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_CANFD_FILTER_CFG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  CANFD_FILTER_CFG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CANFD_FILTER_CFG.");
  }
  result = (CANFD_FILTER_CFG *)new CANFD_FILTER_CFG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::_exports_CANFD_FILTER_CFG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CANFD_FILTER_CFG_templ<SWIG_OBJ_WRAP>::~_exports_CANFD_FILTER_CFG_templ() {
  auto arg1 = reinterpret_cast<CANFD_FILTER_CFG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG *arg1 = (tagZCAN_DYNAMIC_CONFIG *) 0 ;
  DynamicConfigDataType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_set" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_set" "', argument " "2"" of type '" "DynamicConfigDataType""'");
  } 
  arg2 = static_cast< DynamicConfigDataType >(val2);if (arg1) (arg1)->dynamicConfigDataType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG *arg1 = (tagZCAN_DYNAMIC_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DynamicConfigDataType result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_dynamicConfigDataType_get" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG * >(argp1);result = (DynamicConfigDataType) ((arg1)->dynamicConfigDataType);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_isPersist_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG *arg1 = (tagZCAN_DYNAMIC_CONFIG *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_isPersist_set" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DYNAMIC_CONFIG_isPersist_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->isPersist = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DYNAMIC_CONFIG_isPersist_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DYNAMIC_CONFIG *arg1 = (tagZCAN_DYNAMIC_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DYNAMIC_CONFIG_isPersist_get" "', argument " "1"" of type '" "tagZCAN_DYNAMIC_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DYNAMIC_CONFIG * >(argp1);result = (UINT) ((arg1)->isPersist);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DYNAMIC_CONFIG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_DYNAMIC_CONFIG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_DYNAMIC_CONFIG.");
  }
  result = (tagZCAN_DYNAMIC_CONFIG *)new tagZCAN_DYNAMIC_CONFIG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DYNAMIC_CONFIG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DYNAMIC_CONFIG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_DYNAMIC_CONFIG_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_DYNAMIC_CONFIG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_hw_Version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_hw_Version_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_hw_Version_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->hw_Version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_hw_Version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_hw_Version_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT) ((arg1)->hw_Version);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_fw_Version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_fw_Version_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_fw_Version_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->fw_Version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_fw_Version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_fw_Version_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT) ((arg1)->fw_Version);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_dr_Version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_dr_Version_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_dr_Version_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->dr_Version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_dr_Version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_dr_Version_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT) ((arg1)->dr_Version);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_in_Version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_in_Version_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_in_Version_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->in_Version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_in_Version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_in_Version_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT) ((arg1)->in_Version);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_irq_Num_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_irq_Num_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_irq_Num_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->irq_Num = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_irq_Num_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_irq_Num_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT) ((arg1)->irq_Num);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_can_Num_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_can_Num_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_DEVICE_INFO_can_Num_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->can_Num = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_can_Num_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_can_Num_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (BYTE) ((arg1)->can_Num);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_str_Serial_Num_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  UCHAR *arg2 = (UCHAR *) (UCHAR *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_str_Serial_Num_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_DEVICE_INFO_str_Serial_Num_set" "', argument " "2"" of type '" "UCHAR [20]""'"); 
  } 
  arg2 = reinterpret_cast< UCHAR * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)20; ++ii) *(UCHAR *)&arg1->str_Serial_Num[ii] = *((UCHAR *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""str_Serial_Num""' of type '""UCHAR [20]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_str_Serial_Num_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UCHAR *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_str_Serial_Num_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (UCHAR *)(UCHAR *) ((arg1)->str_Serial_Num);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_str_hw_Type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  UCHAR *arg2 = (UCHAR *) (UCHAR *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_str_hw_Type_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_DEVICE_INFO_str_hw_Type_set" "', argument " "2"" of type '" "UCHAR [40]""'"); 
  } 
  arg2 = reinterpret_cast< UCHAR * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)40; ++ii) *(UCHAR *)&arg1->str_hw_Type[ii] = *((UCHAR *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""str_hw_Type""' of type '""UCHAR [40]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_str_hw_Type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UCHAR *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_str_hw_Type_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (UCHAR *)(UCHAR *) ((arg1)->str_hw_Type);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  USHORT *arg2 = (USHORT *) (USHORT *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_reserved_set" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_DEVICE_INFO_reserved_set" "', argument " "2"" of type '" "USHORT [4]""'"); 
  } 
  arg2 = reinterpret_cast< USHORT * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(USHORT *)&arg1->reserved[ii] = *((USHORT *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""USHORT [4]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_DEVICE_INFO_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_DEVICE_INFO *arg1 = (tagZCAN_DEVICE_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_DEVICE_INFO_reserved_get" "', argument " "1"" of type '" "tagZCAN_DEVICE_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_DEVICE_INFO * >(argp1);result = (USHORT *)(USHORT *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DEVICE_INFO_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_DEVICE_INFO;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_DEVICE_INFO *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_DEVICE_INFO.");
  }
  result = (tagZCAN_DEVICE_INFO *)new tagZCAN_DEVICE_INFO();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_DEVICE_INFO_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_DEVICE_INFO_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_DEVICE_INFO_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_DEVICE_INFO *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->acc_code = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_code_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (UINT) ((arg1)->acc_code);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->acc_mask = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_acc_mask_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (UINT) ((arg1)->acc_mask);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_reserved_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (UINT) ((arg1)->reserved);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->filter = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_filter_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (BYTE) ((arg1)->filter);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->timing0 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing0_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (BYTE) ((arg1)->timing0);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->timing1 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_timing1_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (BYTE) ((arg1)->timing1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->mode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_mode_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp1);result = (BYTE) ((arg1)->mode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN.");
  }
  result = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *)new ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_templ() {
  auto arg1 = reinterpret_cast<ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->acc_code = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_code_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->acc_code);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->acc_mask = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_acc_mask_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->acc_mask);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->abit_timing = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_abit_timing_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->abit_timing);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->dbit_timing = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_dbit_timing_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->dbit_timing);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->brp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_brp_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->brp);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->filter = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_filter_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (BYTE) ((arg1)->filter);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->mode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_mode_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (BYTE) ((arg1)->mode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->pad = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_pad_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (USHORT) ((arg1)->pad);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_reserved_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp1);result = (UINT) ((arg1)->reserved);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD.");
  }
  result = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *)new ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_templ() {
  auto arg1 = reinterpret_cast<ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO *) 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *arg2 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_can_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_can_set" "', argument " "2"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN * >(argp2);if (arg1) (arg1)->can = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_can_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_can_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO * >(argp1);result = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *)& ((arg1)->can);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO *) 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *arg2 = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_set" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_set" "', argument " "2"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD * >(argp2);if (arg1) (arg1)->canfd = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *arg1 = (ZCAN_CHANNEL_INIT_CONFIG_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_INFO_canfd_get" "', argument " "1"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO *""'"); 
  }
  arg1 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO * >(argp1);result = (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *)& ((arg1)->canfd);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  ZCAN_CHANNEL_INIT_CONFIG_INFO *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_INIT_CONFIG_INFO.");
  }
  result = (ZCAN_CHANNEL_INIT_CONFIG_INFO *)new ZCAN_CHANNEL_INIT_CONFIG_INFO();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_templ() {
  auto arg1 = reinterpret_cast<ZCAN_CHANNEL_INIT_CONFIG_INFO *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_INIT_CONFIG *arg1 = (tagZCAN_CHANNEL_INIT_CONFIG *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_can_type_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_can_type_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->can_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_can_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_INIT_CONFIG *arg1 = (tagZCAN_CHANNEL_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_can_type_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_INIT_CONFIG * >(argp1);result = (UINT) ((arg1)->can_type);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_info_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_INIT_CONFIG *arg1 = (tagZCAN_CHANNEL_INIT_CONFIG *) 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *arg2 = (ZCAN_CHANNEL_INIT_CONFIG_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_info_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_INIT_CONFIG * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_info_set" "', argument " "2"" of type '" "ZCAN_CHANNEL_INIT_CONFIG_INFO *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG_INFO * >(argp2);if (arg1) (arg1)->info = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_INIT_CONFIG_info_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_INIT_CONFIG *arg1 = (tagZCAN_CHANNEL_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_CHANNEL_INIT_CONFIG_INFO *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_INIT_CONFIG_info_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_INIT_CONFIG * >(argp1);result = (ZCAN_CHANNEL_INIT_CONFIG_INFO *)& ((arg1)->info);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_CHANNEL_INIT_CONFIG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_INIT_CONFIG.");
  }
  result = (tagZCAN_CHANNEL_INIT_CONFIG *)new tagZCAN_CHANNEL_INIT_CONFIG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_INIT_CONFIG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_INIT_CONFIG_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_CHANNEL_INIT_CONFIG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_error_code_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_error_code_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_ERR_INFO_error_code_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->error_code = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_error_code_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_error_code_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);result = (UINT) ((arg1)->error_code);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_passive_ErrData_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_CHANNEL_ERR_INFO_passive_ErrData_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->passive_ErrData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""passive_ErrData""' of type '""BYTE [3]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_passive_ErrData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_passive_ErrData_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->passive_ErrData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->arLost_ErrData = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_ERR_INFO *arg1 = (tagZCAN_CHANNEL_ERR_INFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_ERR_INFO_arLost_ErrData_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_ERR_INFO * >(argp1);result = (BYTE) ((arg1)->arLost_ErrData);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_ERR_INFO_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_CHANNEL_ERR_INFO *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_ERR_INFO.");
  }
  result = (tagZCAN_CHANNEL_ERR_INFO *)new tagZCAN_CHANNEL_ERR_INFO();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_ERR_INFO_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_ERR_INFO_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_ERR_INFO_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_CHANNEL_ERR_INFO *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_errInterrupt_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_errInterrupt_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_errInterrupt_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->errInterrupt = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_errInterrupt_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_errInterrupt_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->errInterrupt);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regMode_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regMode_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regStatus_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regStatus_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regStatus_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regStatus = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regStatus_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regStatus_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regStatus);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regALCapture_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regALCapture_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regALCapture_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regALCapture = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regALCapture_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regALCapture_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regALCapture);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regECCapture_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regECCapture_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regECCapture_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regECCapture = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regECCapture_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regECCapture_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regECCapture);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regEWLimit_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regEWLimit_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regEWLimit_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regEWLimit = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regEWLimit_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regEWLimit_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regEWLimit);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regRECounter_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regRECounter_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regRECounter_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regRECounter = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regRECounter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regRECounter_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regRECounter);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regTECounter_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regTECounter_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_regTECounter_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->regTECounter = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_regTECounter_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_regTECounter_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (BYTE) ((arg1)->regTECounter);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_Reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_Reserved_set" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_CHANNEL_STATUS_Reserved_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->Reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_CHANNEL_STATUS_Reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_CHANNEL_STATUS *arg1 = (tagZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CHANNEL_STATUS_Reserved_get" "', argument " "1"" of type '" "tagZCAN_CHANNEL_STATUS *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_CHANNEL_STATUS * >(argp1);result = (UINT) ((arg1)->Reserved);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_STATUS_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_CHANNEL_STATUS;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_CHANNEL_STATUS *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_CHANNEL_STATUS.");
  }
  result = (tagZCAN_CHANNEL_STATUS *)new tagZCAN_CHANNEL_STATUS();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_CHANNEL_STATUS_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_CHANNEL_STATUS_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_CHANNEL_STATUS_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_CHANNEL_STATUS *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Transmit_Data_frame_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Transmit_Data *arg1 = (tagZCAN_Transmit_Data *) 0 ;
  can_frame *arg2 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Transmit_Data_frame_set" "', argument " "1"" of type '" "tagZCAN_Transmit_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Transmit_Data * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_Transmit_Data_frame_set" "', argument " "2"" of type '" "can_frame *""'"); 
  }
  arg2 = reinterpret_cast< can_frame * >(argp2);if (arg1) (arg1)->frame = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Transmit_Data_frame_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Transmit_Data *arg1 = (tagZCAN_Transmit_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  can_frame *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Transmit_Data_frame_get" "', argument " "1"" of type '" "tagZCAN_Transmit_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Transmit_Data * >(argp1);result = (can_frame *)& ((arg1)->frame);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_can_frame, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Transmit_Data_transmit_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Transmit_Data *arg1 = (tagZCAN_Transmit_Data *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Transmit_Data_transmit_type_set" "', argument " "1"" of type '" "tagZCAN_Transmit_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Transmit_Data * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_Transmit_Data_transmit_type_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->transmit_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Transmit_Data_transmit_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Transmit_Data *arg1 = (tagZCAN_Transmit_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Transmit_Data_transmit_type_get" "', argument " "1"" of type '" "tagZCAN_Transmit_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Transmit_Data * >(argp1);result = (UINT) ((arg1)->transmit_type);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_Transmit_Data_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_Transmit_Data;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_Transmit_Data *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_Transmit_Data.");
  }
  result = (tagZCAN_Transmit_Data *)new tagZCAN_Transmit_Data();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_Transmit_Data_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_Transmit_Data_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_Transmit_Data_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_Transmit_Data *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Receive_Data_frame_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Receive_Data *arg1 = (tagZCAN_Receive_Data *) 0 ;
  can_frame *arg2 = (can_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Receive_Data_frame_set" "', argument " "1"" of type '" "tagZCAN_Receive_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Receive_Data * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_can_frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_Receive_Data_frame_set" "', argument " "2"" of type '" "can_frame *""'"); 
  }
  arg2 = reinterpret_cast< can_frame * >(argp2);if (arg1) (arg1)->frame = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Receive_Data_frame_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Receive_Data *arg1 = (tagZCAN_Receive_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  can_frame *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Receive_Data_frame_get" "', argument " "1"" of type '" "tagZCAN_Receive_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Receive_Data * >(argp1);result = (can_frame *)& ((arg1)->frame);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_can_frame, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Receive_Data_timestamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Receive_Data *arg1 = (tagZCAN_Receive_Data *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Receive_Data_timestamp_set" "', argument " "1"" of type '" "tagZCAN_Receive_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Receive_Data * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_Receive_Data_timestamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timestamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_Receive_Data_timestamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_Receive_Data *arg1 = (tagZCAN_Receive_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Receive_Data_timestamp_get" "', argument " "1"" of type '" "tagZCAN_Receive_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_Receive_Data * >(argp1);result =  ((arg1)->timestamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_Receive_Data_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_Receive_Data;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_Receive_Data *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_Receive_Data.");
  }
  result = (tagZCAN_Receive_Data *)new tagZCAN_Receive_Data();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_Receive_Data_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_Receive_Data_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_Receive_Data_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_Receive_Data *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_TransmitFD_Data_frame_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_TransmitFD_Data *arg1 = (tagZCAN_TransmitFD_Data *) 0 ;
  canfd_frame *arg2 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitFD_Data_frame_set" "', argument " "1"" of type '" "tagZCAN_TransmitFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_TransmitFD_Data * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_TransmitFD_Data_frame_set" "', argument " "2"" of type '" "canfd_frame *""'"); 
  }
  arg2 = reinterpret_cast< canfd_frame * >(argp2);if (arg1) (arg1)->frame = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_TransmitFD_Data_frame_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_TransmitFD_Data *arg1 = (tagZCAN_TransmitFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canfd_frame *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitFD_Data_frame_get" "', argument " "1"" of type '" "tagZCAN_TransmitFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_TransmitFD_Data * >(argp1);result = (canfd_frame *)& ((arg1)->frame);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_canfd_frame, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_TransmitFD_Data_transmit_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_TransmitFD_Data *arg1 = (tagZCAN_TransmitFD_Data *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitFD_Data_transmit_type_set" "', argument " "1"" of type '" "tagZCAN_TransmitFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_TransmitFD_Data * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_TransmitFD_Data_transmit_type_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->transmit_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_TransmitFD_Data_transmit_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_TransmitFD_Data *arg1 = (tagZCAN_TransmitFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitFD_Data_transmit_type_get" "', argument " "1"" of type '" "tagZCAN_TransmitFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_TransmitFD_Data * >(argp1);result = (UINT) ((arg1)->transmit_type);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_TransmitFD_Data_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_TransmitFD_Data;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_TransmitFD_Data *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_TransmitFD_Data.");
  }
  result = (tagZCAN_TransmitFD_Data *)new tagZCAN_TransmitFD_Data();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_TransmitFD_Data_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_TransmitFD_Data_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_TransmitFD_Data_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_TransmitFD_Data *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_ReceiveFD_Data_frame_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_ReceiveFD_Data *arg1 = (tagZCAN_ReceiveFD_Data *) 0 ;
  canfd_frame *arg2 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveFD_Data_frame_set" "', argument " "1"" of type '" "tagZCAN_ReceiveFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_ReceiveFD_Data * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReceiveFD_Data_frame_set" "', argument " "2"" of type '" "canfd_frame *""'"); 
  }
  arg2 = reinterpret_cast< canfd_frame * >(argp2);if (arg1) (arg1)->frame = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_ReceiveFD_Data_frame_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_ReceiveFD_Data *arg1 = (tagZCAN_ReceiveFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canfd_frame *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveFD_Data_frame_get" "', argument " "1"" of type '" "tagZCAN_ReceiveFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_ReceiveFD_Data * >(argp1);result = (canfd_frame *)& ((arg1)->frame);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_canfd_frame, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_ReceiveFD_Data_timestamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_ReceiveFD_Data *arg1 = (tagZCAN_ReceiveFD_Data *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveFD_Data_timestamp_set" "', argument " "1"" of type '" "tagZCAN_ReceiveFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_ReceiveFD_Data * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_ReceiveFD_Data_timestamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timestamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_ReceiveFD_Data_timestamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_ReceiveFD_Data *arg1 = (tagZCAN_ReceiveFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveFD_Data_timestamp_get" "', argument " "1"" of type '" "tagZCAN_ReceiveFD_Data *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_ReceiveFD_Data * >(argp1);result =  ((arg1)->timestamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_ReceiveFD_Data_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_ReceiveFD_Data;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_ReceiveFD_Data *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_ReceiveFD_Data.");
  }
  result = (tagZCAN_ReceiveFD_Data *)new tagZCAN_ReceiveFD_Data();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_ReceiveFD_Data_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_ReceiveFD_Data_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_ReceiveFD_Data_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_ReceiveFD_Data *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_enable_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_enable_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->enable = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_enable_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_enable_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);result = (USHORT) ((arg1)->enable);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_index_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_index_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->index = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_index_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_index_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);result = (USHORT) ((arg1)->index);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_interval_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_interval_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->interval = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_interval_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_interval_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);result = (UINT) ((arg1)->interval);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  ZCAN_Transmit_Data *arg2 = (ZCAN_Transmit_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_obj_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_obj_set" "', argument " "2"" of type '" "ZCAN_Transmit_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_Transmit_Data * >(argp2);if (arg1) (arg1)->obj = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_obj_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_Transmit_Data *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_obj_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ * >(argp1);result = (ZCAN_Transmit_Data *)& ((arg1)->obj);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_AUTO_TRANSMIT_OBJ *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_AUTO_TRANSMIT_OBJ.");
  }
  result = (tagZCAN_AUTO_TRANSMIT_OBJ *)new tagZCAN_AUTO_TRANSMIT_OBJ();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_AUTO_TRANSMIT_OBJ_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_AUTO_TRANSMIT_OBJ *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_enable_set" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_enable_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->enable = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_enable_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_enable_get" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);result = (USHORT) ((arg1)->enable);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_index_set" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_index_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->index = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_index_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_index_get" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);result = (USHORT) ((arg1)->index);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_interval_set" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_interval_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->interval = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_interval_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_interval_get" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);result = (UINT) ((arg1)->interval);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  ZCAN_TransmitFD_Data *arg2 = (ZCAN_TransmitFD_Data *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_obj_set" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_obj_set" "', argument " "2"" of type '" "ZCAN_TransmitFD_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_TransmitFD_Data * >(argp2);if (arg1) (arg1)->obj = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_wrap_ZCANFD_AUTO_TRANSMIT_OBJ_obj_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANFD_AUTO_TRANSMIT_OBJ *arg1 = (tagZCANFD_AUTO_TRANSMIT_OBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_TransmitFD_Data *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANFD_AUTO_TRANSMIT_OBJ_obj_get" "', argument " "1"" of type '" "tagZCANFD_AUTO_TRANSMIT_OBJ *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANFD_AUTO_TRANSMIT_OBJ * >(argp1);result = (ZCAN_TransmitFD_Data *)& ((arg1)->obj);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANFD_AUTO_TRANSMIT_OBJ *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANFD_AUTO_TRANSMIT_OBJ.");
  }
  result = (tagZCANFD_AUTO_TRANSMIT_OBJ *)new tagZCANFD_AUTO_TRANSMIT_OBJ();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ<SWIG_OBJ_WRAP>::~_exports_ZCANFD_AUTO_TRANSMIT_OBJ_templ() {
  auto arg1 = reinterpret_cast<tagZCANFD_AUTO_TRANSMIT_OBJ *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->index = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_index_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);result = (USHORT) ((arg1)->index);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_type_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);result = (USHORT) ((arg1)->type);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_set" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->value = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *arg1 = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_AUTO_TRANSMIT_OBJ_PARAM_value_get" "', argument " "1"" of type '" "tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *""'"); 
  }
  arg1 = reinterpret_cast< tagZCAN_AUTO_TRANSMIT_OBJ_PARAM * >(argp1);result = (UINT) ((arg1)->value);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_AUTO_TRANSMIT_OBJ_PARAM.");
  }
  result = (tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *)new tagZCAN_AUTO_TRANSMIT_OBJ_PARAM();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_templ() {
  auto arg1 = reinterpret_cast<tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCLOUD_MAX_DEVICES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(100));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCLOUD_MAX_CHANNEL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_enable_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_enable_set" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_CHNINFO_enable_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->enable = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_enable_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_enable_get" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);result = (BYTE) ((arg1)->enable);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_type_set" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_CHNINFO_type_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_type_get" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);result = (BYTE) ((arg1)->type);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_isUpload_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_isUpload_set" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_CHNINFO_isUpload_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->isUpload = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_isUpload_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_isUpload_get" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);result = (BYTE) ((arg1)->isUpload);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_isDownload_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_isDownload_set" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_CHNINFO_isDownload_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->isDownload = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_CHNINFO_isDownload_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_CHNINFO *arg1 = (tagZCLOUD_CHNINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_CHNINFO_isDownload_get" "', argument " "1"" of type '" "tagZCLOUD_CHNINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_CHNINFO * >(argp1);result = (BYTE) ((arg1)->isDownload);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_CHNINFO_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCLOUD_CHNINFO;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCLOUD_CHNINFO *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCLOUD_CHNINFO.");
  }
  result = (tagZCLOUD_CHNINFO *)new tagZCLOUD_CHNINFO();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_CHNINFO_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_CHNINFO_templ<SWIG_OBJ_WRAP>::~_exports_ZCLOUD_CHNINFO_templ() {
  auto arg1 = reinterpret_cast<tagZCLOUD_CHNINFO *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_devIndex_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_devIndex_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_DEVINFO_devIndex_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->devIndex = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_devIndex_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_devIndex_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (int) ((arg1)->devIndex);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_type_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_type_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->type,arg2,64*sizeof(char));
  else memset(arg1->type,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_type_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->type);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_id_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_id_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->id,arg2,64*sizeof(char));
  else memset(arg1->id,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_id_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->id);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_name_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_name_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_name_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->name,arg2,64*sizeof(char));
  else memset(arg1->name,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_name_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_name_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->name);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_owner_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_owner_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_owner_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->owner,arg2,64*sizeof(char));
  else memset(arg1->owner,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_owner_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_owner_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->owner);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_model_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_model_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_model_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->model,arg2,64*sizeof(char));
  else memset(arg1->model,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_model_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_model_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->model);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_fwVer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_fwVer_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_fwVer_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->fwVer,arg2,16*sizeof(char));
  else memset(arg1->fwVer,0,16*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_fwVer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_fwVer_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->fwVer);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_hwVer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_hwVer_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_hwVer_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->hwVer,arg2,16*sizeof(char));
  else memset(arg1->hwVer,0,16*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_hwVer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_hwVer_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->hwVer);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_serial_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_serial_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_serial_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->serial,arg2,64*sizeof(char));
  else memset(arg1->serial,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_serial_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_serial_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (char *)(char *) ((arg1)->serial);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_status_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_status_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_DEVINFO_status_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->status = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_status_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_status_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (int) ((arg1)->status);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_bGpsUpload_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_bGpsUpload_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_DEVINFO_bGpsUpload_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->bGpsUpload = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_bGpsUpload_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_bGpsUpload_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (BYTE) ((arg1)->bGpsUpload);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_channelCnt_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_channelCnt_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_DEVINFO_channelCnt_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->channelCnt = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_channelCnt_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_channelCnt_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (BYTE) ((arg1)->channelCnt);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_channels_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  ZCLOUD_CHNINFO *arg2 = (ZCLOUD_CHNINFO *) (ZCLOUD_CHNINFO *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_channels_set" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_DEVINFO_channels_set" "', argument " "2"" of type '" "ZCLOUD_CHNINFO [16]""'"); 
  } 
  arg2 = reinterpret_cast< ZCLOUD_CHNINFO * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) *(ZCLOUD_CHNINFO *)&arg1->channels[ii] = *((ZCLOUD_CHNINFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""channels""' of type '""ZCLOUD_CHNINFO [16]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_DEVINFO_channels_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_DEVINFO *arg1 = (tagZCLOUD_DEVINFO *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCLOUD_CHNINFO *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_DEVINFO_channels_get" "', argument " "1"" of type '" "tagZCLOUD_DEVINFO *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_DEVINFO * >(argp1);result = (ZCLOUD_CHNINFO *)(ZCLOUD_CHNINFO *) ((arg1)->channels);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCLOUD_CHNINFO, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_DEVINFO_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCLOUD_DEVINFO;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCLOUD_DEVINFO *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCLOUD_DEVINFO.");
  }
  result = (tagZCLOUD_DEVINFO *)new tagZCLOUD_DEVINFO();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_DEVINFO_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_DEVINFO_templ<SWIG_OBJ_WRAP>::~_exports_ZCLOUD_DEVINFO_templ() {
  auto arg1 = reinterpret_cast<tagZCLOUD_DEVINFO *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_username_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_username_set" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_USER_DATA_username_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->username,arg2,64*sizeof(char));
  else memset(arg1->username,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_username_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_username_get" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);result = (char *)(char *) ((arg1)->username);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_mobile_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_mobile_set" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_USER_DATA_mobile_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->mobile,arg2,64*sizeof(char));
  else memset(arg1->mobile,0,64*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_mobile_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_mobile_get" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);result = (char *)(char *) ((arg1)->mobile);
  {
    size_t size = SWIG_strnlen(result, 64);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_dllVer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[16] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_dllVer_set" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 16);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_USER_DATA_dllVer_set" "', argument " "2"" of type '" "char [16]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->dllVer,arg2,16*sizeof(char));
  else memset(arg1->dllVer,0,16*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_dllVer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_dllVer_get" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);result = (char *)(char *) ((arg1)->dllVer);
  {
    size_t size = SWIG_strnlen(result, 16);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_devCnt_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_devCnt_set" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_USER_DATA_devCnt_set" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);if (arg1) (arg1)->devCnt = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_devCnt_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_devCnt_get" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);result =  ((arg1)->devCnt);
  jsresult = SWIG_From_size_t  SWIG_NAPI_FROM_CALL_ARGS(static_cast< size_t >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_devices_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  ZCLOUD_DEVINFO *arg2 = (ZCLOUD_DEVINFO *) (ZCLOUD_DEVINFO *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_devices_set" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_USER_DATA_devices_set" "', argument " "2"" of type '" "ZCLOUD_DEVINFO [100]""'"); 
  } 
  arg2 = reinterpret_cast< ZCLOUD_DEVINFO * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)100; ++ii) *(ZCLOUD_DEVINFO *)&arg1->devices[ii] = *((ZCLOUD_DEVINFO *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""devices""' of type '""ZCLOUD_DEVINFO [100]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_USER_DATA_devices_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_USER_DATA *arg1 = (tagZCLOUD_USER_DATA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCLOUD_DEVINFO *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_USER_DATA_devices_get" "', argument " "1"" of type '" "tagZCLOUD_USER_DATA *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_USER_DATA * >(argp1);result = (ZCLOUD_DEVINFO *)(ZCLOUD_DEVINFO *) ((arg1)->devices);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCLOUD_DEVINFO, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_USER_DATA_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCLOUD_USER_DATA;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCLOUD_USER_DATA *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCLOUD_USER_DATA.");
  }
  result = (tagZCLOUD_USER_DATA *)new tagZCLOUD_USER_DATA();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_USER_DATA_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_USER_DATA_templ<SWIG_OBJ_WRAP>::~_exports_ZCLOUD_USER_DATA_templ() {
  auto arg1 = reinterpret_cast<tagZCLOUD_USER_DATA *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_latitude_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_latitude_set" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_GPS_FRAME_latitude_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);if (arg1) (arg1)->latitude = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_latitude_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_latitude_get" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);result = (float) ((arg1)->latitude);
  jsresult = SWIG_From_float  SWIG_NAPI_FROM_CALL_ARGS(static_cast< float >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_longitude_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_longitude_set" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_GPS_FRAME_longitude_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);if (arg1) (arg1)->longitude = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_longitude_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_longitude_get" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);result = (float) ((arg1)->longitude);
  jsresult = SWIG_From_float  SWIG_NAPI_FROM_CALL_ARGS(static_cast< float >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_speed_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_speed_set" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_GPS_FRAME_speed_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);if (arg1) (arg1)->speed = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_speed_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_speed_get" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);result = (float) ((arg1)->speed);
  jsresult = SWIG_From_float  SWIG_NAPI_FROM_CALL_ARGS(static_cast< float >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_tm_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  tagZCLOUD_GPS_FRAME::__gps_time *arg2 = (tagZCLOUD_GPS_FRAME::__gps_time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_tm_set" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_tagZCLOUD_GPS_FRAME____gps_time, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_GPS_FRAME_tm_set" "', argument " "2"" of type '" "tagZCLOUD_GPS_FRAME::__gps_time *""'"); 
  }
  arg2 = reinterpret_cast< tagZCLOUD_GPS_FRAME::__gps_time * >(argp2);if (arg1) (arg1)->tm = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_wrap_ZCLOUD_GPS_FRAME_tm_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCLOUD_GPS_FRAME *arg1 = (tagZCLOUD_GPS_FRAME *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  tagZCLOUD_GPS_FRAME::__gps_time *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_GPS_FRAME_tm_get" "', argument " "1"" of type '" "tagZCLOUD_GPS_FRAME *""'"); 
  }
  arg1 = reinterpret_cast< tagZCLOUD_GPS_FRAME * >(argp1);result = (tagZCLOUD_GPS_FRAME::__gps_time *)& ((arg1)->tm);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCLOUD_GPS_FRAME____gps_time, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_GPS_FRAME_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCLOUD_GPS_FRAME;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCLOUD_GPS_FRAME *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCLOUD_GPS_FRAME.");
  }
  result = (tagZCLOUD_GPS_FRAME *)new tagZCLOUD_GPS_FRAME();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::_exports_ZCLOUD_GPS_FRAME_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCLOUD_GPS_FRAME_templ<SWIG_OBJ_WRAP>::~_exports_ZCLOUD_GPS_FRAME_templ() {
  auto arg1 = reinterpret_cast<tagZCLOUD_GPS_FRAME *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagUSBCANFDTxTimeStamp *arg1 = (tagUSBCANFDTxTimeStamp *) 0 ;
  UINT *arg2 = (UINT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagUSBCANFDTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "USBCANFDTxTimeStamp_pTxTimeStampBuffer_set" "', argument " "1"" of type '" "tagUSBCANFDTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagUSBCANFDTxTimeStamp * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_int, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "USBCANFDTxTimeStamp_pTxTimeStampBuffer_set" "', argument " "2"" of type '" "UINT *""'"); 
  }
  arg2 = reinterpret_cast< UINT * >(argp2);if (arg1) (arg1)->pTxTimeStampBuffer = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_USBCANFDTxTimeStamp_pTxTimeStampBuffer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagUSBCANFDTxTimeStamp *arg1 = (tagUSBCANFDTxTimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagUSBCANFDTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "USBCANFDTxTimeStamp_pTxTimeStampBuffer_get" "', argument " "1"" of type '" "tagUSBCANFDTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagUSBCANFDTxTimeStamp * >(argp1);result = (UINT *) ((arg1)->pTxTimeStampBuffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagUSBCANFDTxTimeStamp *arg1 = (tagUSBCANFDTxTimeStamp *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagUSBCANFDTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "USBCANFDTxTimeStamp_nBufferTimeStampCount_set" "', argument " "1"" of type '" "tagUSBCANFDTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagUSBCANFDTxTimeStamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "USBCANFDTxTimeStamp_nBufferTimeStampCount_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->nBufferTimeStampCount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_USBCANFDTxTimeStamp_nBufferTimeStampCount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagUSBCANFDTxTimeStamp *arg1 = (tagUSBCANFDTxTimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagUSBCANFDTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "USBCANFDTxTimeStamp_nBufferTimeStampCount_get" "', argument " "1"" of type '" "tagUSBCANFDTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagUSBCANFDTxTimeStamp * >(argp1);result = (UINT) ((arg1)->nBufferTimeStampCount);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_exports_USBCANFDTxTimeStamp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagUSBCANFDTxTimeStamp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagUSBCANFDTxTimeStamp *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_USBCANFDTxTimeStamp.");
  }
  result = (tagUSBCANFDTxTimeStamp *)new tagUSBCANFDTxTimeStamp();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::_exports_USBCANFDTxTimeStamp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_USBCANFDTxTimeStamp_templ<SWIG_OBJ_WRAP>::~_exports_USBCANFDTxTimeStamp_templ() {
  auto arg1 = reinterpret_cast<tagUSBCANFDTxTimeStamp *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_pTxTimeStampBuffer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  UINT64 *arg2 = (UINT64 *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_pTxTimeStampBuffer_set" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned___int64, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TxTimeStamp_pTxTimeStampBuffer_set" "', argument " "2"" of type '" "UINT64 *""'"); 
  }
  arg2 = reinterpret_cast< UINT64 * >(argp2);if (arg1) (arg1)->pTxTimeStampBuffer = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_pTxTimeStampBuffer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_pTxTimeStampBuffer_get" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);result = (UINT64 *) ((arg1)->pTxTimeStampBuffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned___int64, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_nBufferTimeStampCount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_nBufferTimeStampCount_set" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxTimeStamp_nBufferTimeStampCount_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->nBufferTimeStampCount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_nBufferTimeStampCount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_nBufferTimeStampCount_get" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);result = (UINT) ((arg1)->nBufferTimeStampCount);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_nWaitTime_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_nWaitTime_set" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TxTimeStamp_nWaitTime_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nWaitTime = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TxTimeStamp_nWaitTime_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTxTimeStamp *arg1 = (tagTxTimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTxTimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TxTimeStamp_nWaitTime_get" "', argument " "1"" of type '" "tagTxTimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTxTimeStamp * >(argp1);result = (int) ((arg1)->nWaitTime);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_exports_TxTimeStamp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagTxTimeStamp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagTxTimeStamp *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TxTimeStamp.");
  }
  result = (tagTxTimeStamp *)new tagTxTimeStamp();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::_exports_TxTimeStamp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TxTimeStamp_templ<SWIG_OBJ_WRAP>::~_exports_TxTimeStamp_templ() {
  auto arg1 = reinterpret_cast<tagTxTimeStamp *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nTimeStampBegin_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nTimeStampBegin_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nTimeStampBegin_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->nTimeStampBegin = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nTimeStampBegin_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nTimeStampBegin_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result =  ((arg1)->nTimeStampBegin);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nTimeStampEnd_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nTimeStampEnd_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nTimeStampEnd_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->nTimeStampEnd = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nTimeStampEnd_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nTimeStampEnd_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result =  ((arg1)->nTimeStampEnd);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nChnl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nChnl_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nChnl_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->nChnl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nChnl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nChnl_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result = (BYTE) ((arg1)->nChnl);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nReserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nReserved_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nReserved_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->nReserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nReserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nReserved_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result = (BYTE) ((arg1)->nReserved);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nBusUsage_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nBusUsage_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nBusUsage_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->nBusUsage = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nBusUsage_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nBusUsage_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result = (USHORT) ((arg1)->nBusUsage);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nFrameCount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nFrameCount_set" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BusUsage_nFrameCount_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->nFrameCount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_BusUsage_templ<SWIG_OBJ_WRAP>::_wrap_BusUsage_nFrameCount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagBusUsage *arg1 = (tagBusUsage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagBusUsage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BusUsage_nFrameCount_get" "', argument " "1"" of type '" "tagBusUsage *""'"); 
  }
  arg1 = reinterpret_cast< tagBusUsage * >(argp1);result = (UINT) ((arg1)->nFrameCount);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_BusUsage_templ<SWIG_OBJ_WRAP>::_exports_BusUsage_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagBusUsage;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagBusUsage *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_BusUsage.");
  }
  result = (tagBusUsage *)new tagBusUsage();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_BusUsage_templ<SWIG_OBJ_WRAP>::_exports_BusUsage_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_BusUsage_templ<SWIG_OBJ_WRAP>::~_exports_BusUsage_templ() {
  auto arg1 = reinterpret_cast<tagBusUsage *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_ERR_TYPE_NO_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_ERR_TYPE_NO_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERR_TYPE_BUS_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_ERR_TYPE_BUS_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERR_TYPE_CONTROLLER_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_ERR_TYPE_CONTROLLER_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_ERR_TYPE_DEVICE_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_ERR_TYPE_DEVICE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_NODE_STATE_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_NODE_STATE_ACTIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_NODE_STATE_WARNNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_NODE_STATE_WARNNING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_NODE_STATE_PASSIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_NODE_STATE_PASSIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_NODE_STATE_BUSOFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_NODE_STATE_BUSOFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_NO_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_NO_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_BIT_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_BIT_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_ACK_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_ACK_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_CRC_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_CRC_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_FORM_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_FORM_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_STUFF_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_STUFF_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_OVERLOAD_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_OVERLOAD_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_ARBITRATION_LOST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_ARBITRATION_LOST));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_BUS_ERR_NODE_STATE_CHAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_BUS_ERR_NODE_STATE_CHAGE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CONTROLLER_RX_FIFO_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_CONTROLLER_RX_FIFO_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CONTROLLER_DRIVER_RX_BUFFER_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_CONTROLLER_DRIVER_RX_BUFFER_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CONTROLLER_DRIVER_TX_BUFFER_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_CONTROLLER_DRIVER_TX_BUFFER_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CONTROLLER_INTERNAL_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_CONTROLLER_INTERNAL_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DEVICE_APP_RX_BUFFER_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DEVICE_APP_RX_BUFFER_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DEVICE_APP_TX_BUFFER_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DEVICE_APP_TX_BUFFER_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DEVICE_APP_AUTO_SEND_FAILED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DEVICE_APP_AUTO_SEND_FAILED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_CONTROLLER_TX_FRAME_INVALID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_CONTROLLER_TX_FRAME_INVALID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_CAN_CANFD_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_CAN_CANFD_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_ERROR_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_ERROR_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_GPS_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_GPS_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_LIN_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_LIN_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_BUSUSAGE_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_BUSUSAGE_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_LIN_ERROR_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_LIN_ERROR_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_LIN_EX_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_LIN_EX_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DT_ZCAN_LIN_EVENT_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_DT_ZCAN_LIN_EVENT_DATA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_TX_DELAY_NO_DELAY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_TX_DELAY_NO_DELAY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_TX_DELAY_UNIT_MS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_TX_DELAY_UNIT_MS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_TX_DELAY_UNIT_100US_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ZCAN_TX_DELAY_UNIT_100US));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_timeStamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_timeStamp_set" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANCANFDData_timeStamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timeStamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_timeStamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_timeStamp_get" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);result =  ((arg1)->timeStamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_extraData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_extraData_set" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANCANFDData_extraData_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->extraData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""extraData""' of type '""BYTE [4]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_extraData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_extraData_get" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->extraData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_frame_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  canfd_frame *arg2 = (canfd_frame *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_frame_set" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_canfd_frame, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANCANFDData_frame_set" "', argument " "2"" of type '" "canfd_frame *""'"); 
  }
  arg2 = reinterpret_cast< canfd_frame * >(argp2);if (arg1) (arg1)->frame = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDData_frame_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDData *arg1 = (tagZCANCANFDData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canfd_frame *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDData_frame_get" "', argument " "1"" of type '" "tagZCANCANFDData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDData * >(argp1);result = (canfd_frame *)& ((arg1)->frame);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_canfd_frame, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_exports_ZCANCANFDData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANCANFDData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANCANFDData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANCANFDData.");
  }
  result = (tagZCANCANFDData *)new tagZCANCANFDData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::_exports_ZCANCANFDData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANCANFDData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANCANFDData_templ() {
  auto arg1 = reinterpret_cast<tagZCANCANFDData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_timeStamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_timeStamp_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_timeStamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timeStamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_timeStamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_timeStamp_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result =  ((arg1)->timeStamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errType_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_errType_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->errType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errType_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->errType);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errSubType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errSubType_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_errSubType_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->errSubType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errSubType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errSubType_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->errSubType);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_nodeState_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_nodeState_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_nodeState_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->nodeState = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_nodeState_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_nodeState_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->nodeState);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_rxErrCount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_rxErrCount_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_rxErrCount_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->rxErrCount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_rxErrCount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_rxErrCount_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->rxErrCount);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_txErrCount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_txErrCount_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_txErrCount_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->txErrCount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_txErrCount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_txErrCount_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->txErrCount);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errData_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANErrorData_errData_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->errData = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_errData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_errData_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE) ((arg1)->errData);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_reserved_set" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANErrorData_reserved_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [2]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANErrorData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANErrorData *arg1 = (tagZCANErrorData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANErrorData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANErrorData_reserved_get" "', argument " "1"" of type '" "tagZCANErrorData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANErrorData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_exports_ZCANErrorData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANErrorData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANErrorData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANErrorData.");
  }
  result = (tagZCANErrorData *)new tagZCANErrorData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::_exports_ZCANErrorData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANErrorData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANErrorData_templ() {
  auto arg1 = reinterpret_cast<tagZCANErrorData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_latitude_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_latitude_set" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANGPSData_latitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);if (arg1) (arg1)->latitude = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_latitude_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_latitude_get" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);result = (double) ((arg1)->latitude);
  jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_longitude_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_longitude_set" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANGPSData_longitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);if (arg1) (arg1)->longitude = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_longitude_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_longitude_get" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);result = (double) ((arg1)->longitude);
  jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_altitude_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_altitude_set" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANGPSData_altitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);if (arg1) (arg1)->altitude = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_altitude_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_altitude_get" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);result = (double) ((arg1)->altitude);
  jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_speed_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_speed_set" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANGPSData_speed_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);if (arg1) (arg1)->speed = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_speed_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_speed_get" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);result = (double) ((arg1)->speed);
  jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_courseAngle_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_courseAngle_set" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANGPSData_courseAngle_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);if (arg1) (arg1)->courseAngle = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANGPSData_courseAngle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANGPSData *arg1 = (tagZCANGPSData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANGPSData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANGPSData_courseAngle_get" "', argument " "1"" of type '" "tagZCANGPSData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANGPSData * >(argp1);result = (double) ((arg1)->courseAngle);
  jsresult = SWIG_From_double  SWIG_NAPI_FROM_CALL_ARGS(static_cast< double >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_exports_ZCANGPSData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANGPSData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANGPSData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANGPSData.");
  }
  result = (tagZCANGPSData *)new tagZCANGPSData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::_exports_ZCANGPSData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANGPSData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANGPSData_templ() {
  auto arg1 = reinterpret_cast<tagZCANGPSData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINData *arg1 = (tagZCANLINData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINData_reserved_set" "', argument " "1"" of type '" "tagZCANLINData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINData_reserved_set" "', argument " "2"" of type '" "BYTE [7]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [7]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINData *arg1 = (tagZCANLINData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINData_reserved_get" "', argument " "1"" of type '" "tagZCANLINData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANLINData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANLINData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANLINData.");
  }
  result = (tagZCANLINData *)new tagZCANLINData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANLINData_templ() {
  auto arg1 = reinterpret_cast<tagZCANLINData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_timeStamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_timeStamp_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINErrData_timeStamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timeStamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_timeStamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_timeStamp_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result =  ((arg1)->timeStamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_dataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_dataLen_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINErrData_dataLen_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_dataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_dataLen_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result = (BYTE) ((arg1)->dataLen);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_data_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINErrData_data_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->data[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_data_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_dir_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_dir_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINErrData_dir_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dir = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_dir_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_dir_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result = (BYTE) ((arg1)->dir);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_chkSum_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_chkSum_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINErrData_chkSum_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chkSum = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_chkSum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_chkSum_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result = (BYTE) ((arg1)->chkSum);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_reserved_set" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINErrData_reserved_set" "', argument " "2"" of type '" "BYTE [10]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)10; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [10]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINErrData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINErrData *arg1 = (tagZCANLINErrData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINErrData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINErrData_reserved_get" "', argument " "1"" of type '" "tagZCANLINErrData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINErrData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINErrData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANLINErrData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANLINErrData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANLINErrData.");
  }
  result = (tagZCANLINErrData *)new tagZCANLINErrData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINErrData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINErrData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANLINErrData_templ() {
  auto arg1 = reinterpret_cast<tagZCANLINErrData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_LIN_WAKE_UP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_LIN_ENTERED_SLEEP_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_LIN_EXITED_SLEEP_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_timeStamp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  UINT64 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_timeStamp_set" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINEventData_timeStamp_set" "', argument " "2"" of type '" "UINT64""'");
  } 
  arg2 = static_cast< UINT64 >(val2);if (arg1) (arg1)->timeStamp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_timeStamp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT64 result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_timeStamp_get" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);result =  ((arg1)->timeStamp);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  ZCAN_LIN_EVENT_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_type_set" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANLINEventData_type_set" "', argument " "2"" of type '" "ZCAN_LIN_EVENT_TYPE""'");
  } 
  arg2 = static_cast< ZCAN_LIN_EVENT_TYPE >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_LIN_EVENT_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_type_get" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);result = (ZCAN_LIN_EVENT_TYPE) ((arg1)->type);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_reserved_set" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINEventData_reserved_set" "', argument " "2"" of type '" "BYTE [7]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [7]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINEventData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINEventData *arg1 = (tagZCANLINEventData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINEventData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINEventData_reserved_get" "', argument " "1"" of type '" "tagZCANLINEventData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINEventData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINEventData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANLINEventData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANLINEventData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANLINEventData.");
  }
  result = (tagZCANLINEventData *)new tagZCANLINEventData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINEventData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINEventData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANLINEventData_templ() {
  auto arg1 = reinterpret_cast<tagZCANLINEventData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINExData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINExData *arg1 = (tagZCANLINExData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINExData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINExData_reserved_set" "', argument " "1"" of type '" "tagZCANLINExData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINExData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINExData_reserved_set" "', argument " "2"" of type '" "BYTE [7]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)7; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [7]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINExData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINExData *arg1 = (tagZCANLINExData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINExData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINExData_reserved_get" "', argument " "1"" of type '" "tagZCANLINExData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINExData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINExData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANLINExData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANLINExData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANLINExData.");
  }
  result = (tagZCANLINExData *)new tagZCANLINExData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINExData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINExData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANLINExData_templ() {
  auto arg1 = reinterpret_cast<tagZCANLINExData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_dataType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_dataType_set" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANDataObj_dataType_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_dataType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_dataType_get" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);result = (BYTE) ((arg1)->dataType);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_chnl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_chnl_set" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANDataObj_chnl_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chnl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_chnl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_chnl_get" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);result = (BYTE) ((arg1)->chnl);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_extraData_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_extraData_set" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANDataObj_extraData_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->extraData[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""extraData""' of type '""BYTE [4]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANDataObj_extraData_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANDataObj *arg1 = (tagZCANDataObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANDataObj_extraData_get" "', argument " "1"" of type '" "tagZCANDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANDataObj * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->extraData);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_exports_ZCANDataObj_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANDataObj;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANDataObj *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANDataObj.");
  }
  result = (tagZCANDataObj *)new tagZCANDataObj();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::_exports_ZCANDataObj_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANDataObj_templ<SWIG_OBJ_WRAP>::~_exports_ZCANDataObj_templ() {
  auto arg1 = reinterpret_cast<tagZCANDataObj *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_MSG_chnl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_MSG *arg1 = (_VCI_LIN_MSG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_MSG_chnl_set" "', argument " "1"" of type '" "_VCI_LIN_MSG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_MSG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_MSG_chnl_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chnl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_MSG_chnl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_MSG *arg1 = (_VCI_LIN_MSG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_MSG_chnl_get" "', argument " "1"" of type '" "_VCI_LIN_MSG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_MSG * >(argp1);result = (BYTE) ((arg1)->chnl);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_MSG_dataType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_MSG *arg1 = (_VCI_LIN_MSG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_MSG_dataType_set" "', argument " "1"" of type '" "_VCI_LIN_MSG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_MSG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_MSG_dataType_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_MSG_dataType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_MSG *arg1 = (_VCI_LIN_MSG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_MSG_dataType_get" "', argument " "1"" of type '" "_VCI_LIN_MSG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_MSG * >(argp1);result = (BYTE) ((arg1)->dataType);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_MSG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__VCI_LIN_MSG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _VCI_LIN_MSG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_LIN_MSG.");
  }
  result = (_VCI_LIN_MSG *)new _VCI_LIN_MSG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_MSG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_MSG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_LIN_MSG_templ() {
  auto arg1 = reinterpret_cast<_VCI_LIN_MSG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(DEFAULT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CLASSIC_CHKSUM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CLASSIC_CHKSUM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ENHANCE_CHKSUM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ENHANCE_CHKSUM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_AUTOMATIC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(AUTOMATIC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_linMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_linMode_set" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_INIT_CONFIG_linMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->linMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_linMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_linMode_get" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);result = (BYTE) ((arg1)->linMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_chkSumMode_set" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_INIT_CONFIG_chkSumMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chkSumMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_chkSumMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_chkSumMode_get" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);result = (BYTE) ((arg1)->chkSumMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_maxLength_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_maxLength_set" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_INIT_CONFIG_maxLength_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->maxLength = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_maxLength_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_maxLength_get" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);result = (BYTE) ((arg1)->maxLength);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_reserved_set" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_INIT_CONFIG_reserved_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_reserved_get" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);result = (BYTE) ((arg1)->reserved);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_linBaud_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_linBaud_set" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_INIT_CONFIG_linBaud_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->linBaud = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_INIT_CONFIG_linBaud_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_INIT_CONFIG *arg1 = (_VCI_LIN_INIT_CONFIG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_INIT_CONFIG_linBaud_get" "', argument " "1"" of type '" "_VCI_LIN_INIT_CONFIG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_INIT_CONFIG * >(argp1);result = (UINT) ((arg1)->linBaud);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_INIT_CONFIG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__VCI_LIN_INIT_CONFIG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _VCI_LIN_INIT_CONFIG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_LIN_INIT_CONFIG.");
  }
  result = (_VCI_LIN_INIT_CONFIG *)new _VCI_LIN_INIT_CONFIG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_INIT_CONFIG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_INIT_CONFIG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_LIN_INIT_CONFIG_templ() {
  auto arg1 = reinterpret_cast<_VCI_LIN_INIT_CONFIG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_ID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_ID_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_ID_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->ID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_ID_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);result = (BYTE) ((arg1)->ID);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_dataLen_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_dataLen_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_dataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_dataLen_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);result = (BYTE) ((arg1)->dataLen);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_data_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_LIN_PUBLISH_CFG_data_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->data[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_data_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_chkSumMode_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_chkSumMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chkSumMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_chkSumMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_chkSumMode_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);result = (BYTE) ((arg1)->chkSumMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_reserved_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_LIN_PUBLISH_CFG_reserved_set" "', argument " "2"" of type '" "BYTE [5]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [5]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG *arg1 = (_VCI_LIN_PUBLISH_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_reserved_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_PUBLISH_CFG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__VCI_LIN_PUBLISH_CFG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _VCI_LIN_PUBLISH_CFG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_LIN_PUBLISH_CFG.");
  }
  result = (_VCI_LIN_PUBLISH_CFG *)new _VCI_LIN_PUBLISH_CFG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_PUBLISH_CFG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_PUBLISH_CFG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_LIN_PUBLISH_CFG_templ() {
  auto arg1 = reinterpret_cast<_VCI_LIN_PUBLISH_CFG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_ID_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_ID_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->ID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_ID_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);result = (BYTE) ((arg1)->ID);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_dataLen_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_dataLen_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_dataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_dataLen_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);result = (BYTE) ((arg1)->dataLen);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_data_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_data_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->data[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""BYTE [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_data_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chkSumMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_chkSumMode_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);result = (BYTE) ((arg1)->chkSumMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_reserved_set" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_reserved_set" "', argument " "2"" of type '" "BYTE [5]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [5]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_PUBLISH_CFG_EX_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_PUBLISH_CFG_EX *arg1 = (_VCI_LIN_PUBLISH_CFG_EX *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_PUBLISH_CFG_EX_reserved_get" "', argument " "1"" of type '" "_VCI_LIN_PUBLISH_CFG_EX *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_PUBLISH_CFG_EX * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _VCI_LIN_PUBLISH_CFG_EX *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_LIN_PUBLISH_CFG_EX.");
  }
  result = (_VCI_LIN_PUBLISH_CFG_EX *)new _VCI_LIN_PUBLISH_CFG_EX();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_LIN_PUBLISH_CFG_EX_templ() {
  auto arg1 = reinterpret_cast<_VCI_LIN_PUBLISH_CFG_EX *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_ID_set" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_ID_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->ID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_ID_get" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);result = (BYTE) ((arg1)->ID);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_dataLen_set" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_dataLen_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->dataLen = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_dataLen_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_dataLen_get" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);result = (BYTE) ((arg1)->dataLen);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_set" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->chkSumMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_chkSumMode_get" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);result = (BYTE) ((arg1)->chkSumMode);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_reserved_set" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_reserved_set" "', argument " "2"" of type '" "BYTE [5]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)5; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [5]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_LIN_SUBSCIBE_CFG_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _VCI_LIN_SUBSCIBE_CFG *arg1 = (_VCI_LIN_SUBSCIBE_CFG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_LIN_SUBSCIBE_CFG_reserved_get" "', argument " "1"" of type '" "_VCI_LIN_SUBSCIBE_CFG *""'"); 
  }
  arg1 = reinterpret_cast< _VCI_LIN_SUBSCIBE_CFG * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_SUBSCIBE_CFG_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _VCI_LIN_SUBSCIBE_CFG *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_LIN_SUBSCIBE_CFG.");
  }
  result = (_VCI_LIN_SUBSCIBE_CFG *)new _VCI_LIN_SUBSCIBE_CFG();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_LIN_SUBSCIBE_CFG_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_LIN_SUBSCIBE_CFG_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_LIN_SUBSCIBE_CFG_templ() {
  auto arg1 = reinterpret_cast<_VCI_LIN_SUBSCIBE_CFG *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_TRANS_VER_0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_TRANS_VER_1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FRAME_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FRAME_CANFD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FRAME_CANFD_BRS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FILL_MODE_SHORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FILL_MODE_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_FILL_MODE_MAX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_req_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_req_id_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_req_id_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->req_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_req_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_req_id_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->req_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_channel_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_channel_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_channel_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->channel = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_channel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_channel_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->channel);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_frame_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  ZCAN_UDS_FRAME_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_frame_type_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_frame_type_set" "', argument " "2"" of type '" "ZCAN_UDS_FRAME_TYPE""'");
  } 
  arg2 = static_cast< ZCAN_UDS_FRAME_TYPE >(val2);if (arg1) (arg1)->frame_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_frame_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_FRAME_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_frame_type_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (ZCAN_UDS_FRAME_TYPE) ((arg1)->frame_type);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved0_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved0_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_REQUEST_reserved0_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->reserved0[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved0""' of type '""BYTE [2]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved0_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved0);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_src_addr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_src_addr_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_src_addr_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->src_addr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_src_addr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_src_addr_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->src_addr);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_dst_addr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_dst_addr_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_dst_addr_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->dst_addr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_dst_addr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_dst_addr_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->dst_addr);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_suppress_response_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_suppress_response_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_suppress_response_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->suppress_response = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_suppress_response_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_suppress_response_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->suppress_response);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_sid_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_sid_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_sid_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->sid = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_sid_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_sid_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->sid);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved1_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_REQUEST_reserved1_set" "', argument " "2"" of type '" "BYTE [6]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(BYTE *)&arg1->reserved1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved1""' of type '""BYTE [6]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved1_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_data_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_REQUEST_data_set" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_data_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_data_len_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_data_len_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_data_len_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->data_len = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_data_len_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_data_len_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->data_len);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved2_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved2_set" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_REQUEST_reserved2_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->reserved2 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_REQUEST_reserved2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_REQUEST *arg1 = (_ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_REQUEST_reserved2_get" "', argument " "1"" of type '" "_ZCAN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->reserved2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_REQUEST_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZCAN_UDS_REQUEST;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZCAN_UDS_REQUEST *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_UDS_REQUEST.");
  }
  result = (_ZCAN_UDS_REQUEST *)new _ZCAN_UDS_REQUEST();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_REQUEST_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_UDS_REQUEST_templ() {
  auto arg1 = reinterpret_cast<_ZCAN_UDS_REQUEST *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_req_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_req_id_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_req_id_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->req_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_req_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_req_id_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->req_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_channel_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_channel_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_channel_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->channel = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_channel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_channel_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->channel);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_suppress_response_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_suppress_response_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_suppress_response_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->suppress_response = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_suppress_response_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_suppress_response_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->suppress_response);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_sid_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_sid_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_sid_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->sid = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_sid_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_sid_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->sid);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_Nad_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_Nad_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_Nad_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->Nad = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_Nad_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_Nad_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE) ((arg1)->Nad);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_reserved1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_reserved1_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZLIN_UDS_REQUEST_reserved1_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->reserved1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved1""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_reserved1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_reserved1_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_data_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZLIN_UDS_REQUEST_data_set" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_data_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_data_len_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_data_len_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_data_len_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->data_len = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_data_len_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_data_len_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->data_len);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_reserved2_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_reserved2_set" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZLIN_UDS_REQUEST_reserved2_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->reserved2 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZLIN_UDS_REQUEST_reserved2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZLIN_UDS_REQUEST *arg1 = (_ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZLIN_UDS_REQUEST_reserved2_get" "', argument " "1"" of type '" "_ZLIN_UDS_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZLIN_UDS_REQUEST * >(argp1);result = (UINT) ((arg1)->reserved2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZLIN_UDS_REQUEST_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZLIN_UDS_REQUEST;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZLIN_UDS_REQUEST *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZLIN_UDS_REQUEST.");
  }
  result = (_ZLIN_UDS_REQUEST *)new _ZLIN_UDS_REQUEST();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZLIN_UDS_REQUEST_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZLIN_UDS_REQUEST_templ<SWIG_OBJ_WRAP>::~_exports_ZLIN_UDS_REQUEST_templ() {
  auto arg1 = reinterpret_cast<_ZLIN_UDS_REQUEST *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ACTIVATION_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ACTIVATION_WWH_OBD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ACTIVATION_CENTRAL_SECURITY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xE0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ISO_13400_2_2010_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ISO_13400_2_2012_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_ISO_13400_2_2019_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x03));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_DOIP_AUTO_DETECTED_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_req_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_req_id_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_req_id_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->req_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_req_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_req_id_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (UINT) ((arg1)->req_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_reserved0_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_reserved0_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_reserved0_set" "', argument " "2"" of type '" "BYTE [4]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)4; ++ii) *(BYTE *)&arg1->reserved0[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved0""' of type '""BYTE [4]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_reserved0_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_reserved0_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved0);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_doipVersion_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  ZCAN_DOIP_VERSION arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_doipVersion_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_doipVersion_set" "', argument " "2"" of type '" "ZCAN_DOIP_VERSION""'");
  } 
  arg2 = static_cast< ZCAN_DOIP_VERSION >(val2);if (arg1) (arg1)->doipVersion = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_doipVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_DOIP_VERSION result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_doipVersion_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (ZCAN_DOIP_VERSION) ((arg1)->doipVersion);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_rcType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  ZCAN_DOIP_ROUTING_ACT_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_rcType_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_rcType_set" "', argument " "2"" of type '" "ZCAN_DOIP_ROUTING_ACT_TYPE""'");
  } 
  arg2 = static_cast< ZCAN_DOIP_ROUTING_ACT_TYPE >(val2);if (arg1) (arg1)->rcType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_rcType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_DOIP_ROUTING_ACT_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_rcType_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (ZCAN_DOIP_ROUTING_ACT_TYPE) ((arg1)->rcType);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_sourceAddress_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_sourceAddress_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_sourceAddress_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->sourceAddress[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""sourceAddress""' of type '""BYTE [2]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_sourceAddress_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_sourceAddress_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->sourceAddress);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_serverAddress_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_serverAddress_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_serverAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->serverAddress,arg2,32*sizeof(char));
  else memset(arg1->serverAddress,0,32*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_serverAddress_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_serverAddress_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (char *)(char *) ((arg1)->serverAddress);
  {
    size_t size = SWIG_strnlen(result, 32);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_connectTimeoutMs_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_connectTimeoutMs_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_connectTimeoutMs_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->connectTimeoutMs = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_connectTimeoutMs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_connectTimeoutMs_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (USHORT) ((arg1)->connectTimeoutMs);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_routingTimeoutMs_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  USHORT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_routingTimeoutMs_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_routingTimeoutMs_set" "', argument " "2"" of type '" "USHORT""'");
  } 
  arg2 = static_cast< USHORT >(val2);if (arg1) (arg1)->routingTimeoutMs = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_routingTimeoutMs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  USHORT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_routingTimeoutMs_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (USHORT) ((arg1)->routingTimeoutMs);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_targetAddress_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_targetAddress_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_targetAddress_set" "', argument " "2"" of type '" "BYTE [2]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) *(BYTE *)&arg1->targetAddress[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""targetAddress""' of type '""BYTE [2]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_targetAddress_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_targetAddress_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->targetAddress);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_sid_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_sid_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_sid_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->sid = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_sid_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_sid_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE) ((arg1)->sid);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_suppressPosResp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_suppressPosResp_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_suppressPosResp_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->suppressPosResp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_suppressPosResp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_suppressPosResp_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE) ((arg1)->suppressPosResp);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_waitForNegResp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_waitForNegResp_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_waitForNegResp_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->waitForNegResp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_waitForNegResp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_waitForNegResp_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE) ((arg1)->waitForNegResp);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_reserved1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_reserved1_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_reserved1_set" "', argument " "2"" of type '" "BYTE [3]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)3; ++ii) *(BYTE *)&arg1->reserved1[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved1""' of type '""BYTE [3]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_reserved1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_reserved1_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_requestTimeoutMs_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_requestTimeoutMs_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_requestTimeoutMs_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->requestTimeoutMs = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_requestTimeoutMs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_requestTimeoutMs_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (UINT) ((arg1)->requestTimeoutMs);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_dataLength_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_dataLength_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZDOIP_REQUEST_dataLength_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->dataLength = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_dataLength_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_dataLength_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (UINT) ((arg1)->dataLength);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  BYTE *arg2 = (BYTE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_data_set" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDOIP_REQUEST_data_set" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_wrap_ZDOIP_REQUEST_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZDOIP_REQUEST *arg1 = (_ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDOIP_REQUEST_data_get" "', argument " "1"" of type '" "_ZDOIP_REQUEST *""'"); 
  }
  arg1 = reinterpret_cast< _ZDOIP_REQUEST * >(argp1);result = (BYTE *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZDOIP_REQUEST_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZDOIP_REQUEST;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZDOIP_REQUEST *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZDOIP_REQUEST.");
  }
  result = (_ZDOIP_REQUEST *)new _ZDOIP_REQUEST();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::_exports_ZDOIP_REQUEST_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZDOIP_REQUEST_templ<SWIG_OBJ_WRAP>::~_exports_ZDOIP_REQUEST_templ() {
  auto arg1 = reinterpret_cast<_ZDOIP_REQUEST *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_TRANSPORT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_CANCEL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x03));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_SUPPRESS_RESPONSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x04));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_BUSY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x05));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_REQ_PARAM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x06));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_OTHTER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x64));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_FAILED_TO_CREATE_SOCKET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x20));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_FAILED_TO_CONNECT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x21));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x22));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_ROUTING_NOT_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x23));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_BUFFER_TOO_SMALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x24));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_ROUTING_ALREADY_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x25));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INCORRECT_PATTERN_FORMAT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x26));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN_PAYLOAD_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x27));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_MESSAGE_TOO_LARGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x28));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_OUT_OF_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x29));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INVALID_PAYLOAD_LENGTH_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2A));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2B));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_INVALID_SOURCE_ADDRESS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2C));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_TARGET_ADDRESS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2D));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_MESSAGE_TOO_LARGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2E));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_OUT_OF_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x2F));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TARGET_UNREACHABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x30));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_NETWORK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x31));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TRANSPORT_PROTOCOL_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x32));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x33));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_INVALID_HANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x34));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_UNEXPECTED_NULL_POINTER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x35));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_UNKNOWN_HANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x36));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_OUT_OF_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x37));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_UNKNOWN_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x38));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_ERROR_DOIP_ROUTING_ACTIVE_FAIL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x39));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_RT_NEGATIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_RT_POSITIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_RT_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_status_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  ZCAN_UDS_ERROR arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_status_set" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_RESPONSE_status_set" "', argument " "2"" of type '" "ZCAN_UDS_ERROR""'");
  } 
  arg2 = static_cast< ZCAN_UDS_ERROR >(val2);if (arg1) (arg1)->status = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_status_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_ERROR result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_status_get" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);result = (ZCAN_UDS_ERROR) ((arg1)->status);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_reserved_set" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_RESPONSE_reserved_set" "', argument " "2"" of type '" "BYTE [6]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [6]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_reserved_get" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  ZCAN_UDS_RESPONSE_TYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_type_set" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_RESPONSE_type_set" "', argument " "2"" of type '" "ZCAN_UDS_RESPONSE_TYPE""'");
  } 
  arg2 = static_cast< ZCAN_UDS_RESPONSE_TYPE >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_RESPONSE_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_RESPONSE *arg1 = (_ZCAN_UDS_RESPONSE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_RESPONSE_TYPE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RESPONSE_type_get" "', argument " "1"" of type '" "_ZCAN_UDS_RESPONSE *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_RESPONSE * >(argp1);result = (ZCAN_UDS_RESPONSE_TYPE) ((arg1)->type);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_RESPONSE_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZCAN_UDS_RESPONSE;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZCAN_UDS_RESPONSE *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_UDS_RESPONSE.");
  }
  result = (_ZCAN_UDS_RESPONSE *)new _ZCAN_UDS_RESPONSE();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_RESPONSE_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_RESPONSE_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_UDS_RESPONSE_templ() {
  auto arg1 = reinterpret_cast<_ZCAN_UDS_RESPONSE *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_CTRL_STOP_REQ_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_reqID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  UINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_reqID_set" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_CTRL_REQ_reqID_set" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);if (arg1) (arg1)->reqID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_reqID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_reqID_get" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);result = (UINT) ((arg1)->reqID);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_cmd_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  ZCAN_UDS_CTRL_CODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_cmd_set" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_CTRL_REQ_cmd_set" "', argument " "2"" of type '" "ZCAN_UDS_CTRL_CODE""'");
  } 
  arg2 = static_cast< ZCAN_UDS_CTRL_CODE >(val2);if (arg1) (arg1)->cmd = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_cmd_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_CTRL_CODE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_cmd_get" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);result = (ZCAN_UDS_CTRL_CODE) ((arg1)->cmd);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_reserved_set" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_CTRL_REQ_reserved_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_REQ_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_REQ *arg1 = (_ZCAN_UDS_CTRL_REQ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_REQ_reserved_get" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_REQ *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_REQ * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_CTRL_REQ_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZCAN_UDS_CTRL_REQ;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZCAN_UDS_CTRL_REQ *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_UDS_CTRL_REQ.");
  }
  result = (_ZCAN_UDS_CTRL_REQ *)new _ZCAN_UDS_CTRL_REQ();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_CTRL_REQ_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_CTRL_REQ_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_UDS_CTRL_REQ_templ() {
  auto arg1 = reinterpret_cast<_ZCAN_UDS_CTRL_REQ *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_CTRL_RESULT_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ZCAN_UDS_CTRL_RESULT_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_RESP_result_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_RESP *arg1 = (_ZCAN_UDS_CTRL_RESP *) 0 ;
  ZCAN_UDS_CTRL_RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_RESP_result_set" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_RESP * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_CTRL_RESP_result_set" "', argument " "2"" of type '" "ZCAN_UDS_CTRL_RESULT""'");
  } 
  arg2 = static_cast< ZCAN_UDS_CTRL_RESULT >(val2);if (arg1) (arg1)->result = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_RESP_result_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_RESP *arg1 = (_ZCAN_UDS_CTRL_RESP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_CTRL_RESULT result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_RESP_result_get" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_RESP * >(argp1);result = (ZCAN_UDS_CTRL_RESULT) ((arg1)->result);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_RESP_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_RESP *arg1 = (_ZCAN_UDS_CTRL_RESP *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_RESP_reserved_set" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_RESP * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_CTRL_RESP_reserved_set" "', argument " "2"" of type '" "BYTE [12]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)12; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [12]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_wrap_ZCAN_UDS_CTRL_RESP_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _ZCAN_UDS_CTRL_RESP *arg1 = (_ZCAN_UDS_CTRL_RESP *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_CTRL_RESP_reserved_get" "', argument " "1"" of type '" "_ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg1 = reinterpret_cast< _ZCAN_UDS_CTRL_RESP * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_CTRL_RESP_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__ZCAN_UDS_CTRL_RESP;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _ZCAN_UDS_CTRL_RESP *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCAN_UDS_CTRL_RESP.");
  }
  result = (_ZCAN_UDS_CTRL_RESP *)new _ZCAN_UDS_CTRL_RESP();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::_exports_ZCAN_UDS_CTRL_RESP_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCAN_UDS_CTRL_RESP_templ<SWIG_OBJ_WRAP>::~_exports_ZCAN_UDS_CTRL_RESP_templ() {
  auto arg1 = reinterpret_cast<_ZCAN_UDS_CTRL_RESP *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDUdsData_req_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDUdsData *arg1 = (tagZCANCANFDUdsData *) 0 ;
  ZCAN_UDS_REQUEST *arg2 = (ZCAN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDUdsData_req_set" "', argument " "1"" of type '" "tagZCANCANFDUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__ZCAN_UDS_REQUEST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANCANFDUdsData_req_set" "', argument " "2"" of type '" "ZCAN_UDS_REQUEST const *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_UDS_REQUEST * >(argp2);if (arg1) (arg1)->req = (ZCAN_UDS_REQUEST const *)arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDUdsData_req_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDUdsData *arg1 = (tagZCANCANFDUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_REQUEST *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDUdsData_req_get" "', argument " "1"" of type '" "tagZCANCANFDUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDUdsData * >(argp1);result = (ZCAN_UDS_REQUEST *) ((arg1)->req);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDUdsData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDUdsData *arg1 = (tagZCANCANFDUdsData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDUdsData_reserved_set" "', argument " "1"" of type '" "tagZCANCANFDUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANCANFDUdsData_reserved_set" "', argument " "2"" of type '" "BYTE [24]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)24; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [24]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANCANFDUdsData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANCANFDUdsData *arg1 = (tagZCANCANFDUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANCANFDUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANCANFDUdsData_reserved_get" "', argument " "1"" of type '" "tagZCANCANFDUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANCANFDUdsData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZCANCANFDUdsData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANCANFDUdsData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANCANFDUdsData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANCANFDUdsData.");
  }
  result = (tagZCANCANFDUdsData *)new tagZCANCANFDUdsData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZCANCANFDUdsData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANCANFDUdsData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANCANFDUdsData_templ() {
  auto arg1 = reinterpret_cast<tagZCANCANFDUdsData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINUdsData_req_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINUdsData *arg1 = (tagZCANLINUdsData *) 0 ;
  ZLIN_UDS_REQUEST *arg2 = (ZLIN_UDS_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINUdsData_req_set" "', argument " "1"" of type '" "tagZCANLINUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__ZLIN_UDS_REQUEST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINUdsData_req_set" "', argument " "2"" of type '" "ZLIN_UDS_REQUEST const *""'"); 
  }
  arg2 = reinterpret_cast< ZLIN_UDS_REQUEST * >(argp2);if (arg1) (arg1)->req = (ZLIN_UDS_REQUEST const *)arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINUdsData_req_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINUdsData *arg1 = (tagZCANLINUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZLIN_UDS_REQUEST *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINUdsData_req_get" "', argument " "1"" of type '" "tagZCANLINUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINUdsData * >(argp1);result = (ZLIN_UDS_REQUEST *) ((arg1)->req);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__ZLIN_UDS_REQUEST, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINUdsData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINUdsData *arg1 = (tagZCANLINUdsData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINUdsData_reserved_set" "', argument " "1"" of type '" "tagZCANLINUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANLINUdsData_reserved_set" "', argument " "2"" of type '" "BYTE [24]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)24; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [24]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZCANLINUdsData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANLINUdsData *arg1 = (tagZCANLINUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANLINUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANLINUdsData_reserved_get" "', argument " "1"" of type '" "tagZCANLINUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANLINUdsData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINUdsData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANLINUdsData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANLINUdsData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANLINUdsData.");
  }
  result = (tagZCANLINUdsData *)new tagZCANLINUdsData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZCANLINUdsData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANLINUdsData_templ<SWIG_OBJ_WRAP>::~_exports_ZCANLINUdsData_templ() {
  auto arg1 = reinterpret_cast<tagZCANLINUdsData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZDoIPUdsData_req_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZDoIPUdsData *arg1 = (tagZDoIPUdsData *) 0 ;
  ZDOIP_REQUEST *arg2 = (ZDOIP_REQUEST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZDoIPUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDoIPUdsData_req_set" "', argument " "1"" of type '" "tagZDoIPUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZDoIPUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__ZDOIP_REQUEST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDoIPUdsData_req_set" "', argument " "2"" of type '" "ZDOIP_REQUEST const *""'"); 
  }
  arg2 = reinterpret_cast< ZDOIP_REQUEST * >(argp2);if (arg1) (arg1)->req = (ZDOIP_REQUEST const *)arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZDoIPUdsData_req_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZDoIPUdsData *arg1 = (tagZDoIPUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZDOIP_REQUEST *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZDoIPUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDoIPUdsData_req_get" "', argument " "1"" of type '" "tagZDoIPUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZDoIPUdsData * >(argp1);result = (ZDOIP_REQUEST *) ((arg1)->req);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__ZDOIP_REQUEST, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZDoIPUdsData_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZDoIPUdsData *arg1 = (tagZDoIPUdsData *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZDoIPUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDoIPUdsData_reserved_set" "', argument " "1"" of type '" "tagZDoIPUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZDoIPUdsData * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZDoIPUdsData_reserved_set" "', argument " "2"" of type '" "BYTE [24]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)24; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [24]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_wrap_ZDoIPUdsData_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZDoIPUdsData *arg1 = (tagZDoIPUdsData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZDoIPUdsData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZDoIPUdsData_reserved_get" "', argument " "1"" of type '" "tagZDoIPUdsData *""'"); 
  }
  arg1 = reinterpret_cast< tagZDoIPUdsData * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZDoIPUdsData_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZDoIPUdsData;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZDoIPUdsData *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZDoIPUdsData.");
  }
  result = (tagZDoIPUdsData *)new tagZDoIPUdsData();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::_exports_ZDoIPUdsData_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZDoIPUdsData_templ<SWIG_OBJ_WRAP>::~_exports_ZDoIPUdsData_templ() {
  auto arg1 = reinterpret_cast<tagZDoIPUdsData *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANUdsRequestDataObj_dataType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANUdsRequestDataObj *arg1 = (tagZCANUdsRequestDataObj *) 0 ;
  ZCAN_UDS_DATA_DEF arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANUdsRequestDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANUdsRequestDataObj_dataType_set" "', argument " "1"" of type '" "tagZCANUdsRequestDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANUdsRequestDataObj * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCANUdsRequestDataObj_dataType_set" "', argument " "2"" of type '" "ZCAN_UDS_DATA_DEF""'");
  } 
  arg2 = static_cast< ZCAN_UDS_DATA_DEF >(val2);if (arg1) (arg1)->dataType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANUdsRequestDataObj_dataType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANUdsRequestDataObj *arg1 = (tagZCANUdsRequestDataObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ZCAN_UDS_DATA_DEF result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANUdsRequestDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANUdsRequestDataObj_dataType_get" "', argument " "1"" of type '" "tagZCANUdsRequestDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANUdsRequestDataObj * >(argp1);result = (ZCAN_UDS_DATA_DEF) ((arg1)->dataType);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANUdsRequestDataObj_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANUdsRequestDataObj *arg1 = (tagZCANUdsRequestDataObj *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANUdsRequestDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANUdsRequestDataObj_reserved_set" "', argument " "1"" of type '" "tagZCANUdsRequestDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANUdsRequestDataObj * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCANUdsRequestDataObj_reserved_set" "', argument " "2"" of type '" "BYTE [32]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(BYTE *)&arg1->reserved[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""reserved""' of type '""BYTE [32]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_wrap_ZCANUdsRequestDataObj_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagZCANUdsRequestDataObj *arg1 = (tagZCANUdsRequestDataObj *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagZCANUdsRequestDataObj, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCANUdsRequestDataObj_reserved_get" "', argument " "1"" of type '" "tagZCANUdsRequestDataObj *""'"); 
  }
  arg1 = reinterpret_cast< tagZCANUdsRequestDataObj * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_exports_ZCANUdsRequestDataObj_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagZCANUdsRequestDataObj;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagZCANUdsRequestDataObj *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ZCANUdsRequestDataObj.");
  }
  result = (tagZCANUdsRequestDataObj *)new tagZCANUdsRequestDataObj();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::_exports_ZCANUdsRequestDataObj_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ZCANUdsRequestDataObj_templ<SWIG_OBJ_WRAP>::~_exports_ZCANUdsRequestDataObj_templ() {
  auto arg1 = reinterpret_cast<tagZCANUdsRequestDataObj *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_INVALID_DEVICE_HANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_OpenDevice(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  UINT arg1 ;
  UINT arg2 ;
  UINT arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  SwigValueWrapper< DEVICE_HANDLE > result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_OpenDevice.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ZCAN_OpenDevice" "', argument " "1"" of type '" "UINT""'");
  } 
  arg1 = static_cast< UINT >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_OpenDevice" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_OpenDevice" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = ZCAN_OpenDevice(arg1,arg2,arg3);
  jsresult = SWIG_NewPointerObj((new DEVICE_HANDLE(result)), SWIGTYPE_p_DEVICE_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_CloseDevice(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_CloseDevice.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_CloseDevice" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_CloseDevice" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_CloseDevice(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_GetDeviceInf(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCAN_DEVICE_INFO *arg2 = (ZCAN_DEVICE_INFO *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_GetDeviceInf.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_GetDeviceInf" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_GetDeviceInf" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_DEVICE_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_GetDeviceInf" "', argument " "2"" of type '" "ZCAN_DEVICE_INFO *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_DEVICE_INFO * >(argp2);result = (UINT)ZCAN_GetDeviceInf(SWIG_STD_MOVE(arg1),arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_IsDeviceOnLine(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_IsDeviceOnLine.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_IsDeviceOnLine" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_IsDeviceOnLine" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_IsDeviceOnLine(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_INVALID_CHANNEL_HANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_InitCAN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  UINT arg2 ;
  ZCAN_CHANNEL_INIT_CONFIG *arg3 = (ZCAN_CHANNEL_INIT_CONFIG *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< CHANNEL_HANDLE > result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_InitCAN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_InitCAN" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_InitCAN" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_InitCAN" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_InitCAN" "', argument " "3"" of type '" "ZCAN_CHANNEL_INIT_CONFIG *""'"); 
  }
  arg3 = reinterpret_cast< ZCAN_CHANNEL_INIT_CONFIG * >(argp3);result = ZCAN_InitCAN(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_NewPointerObj((new CHANNEL_HANDLE(result)), SWIGTYPE_p_CHANNEL_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_StartCAN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_StartCAN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_StartCAN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_StartCAN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_StartCAN(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ResetCAN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ResetCAN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ResetCAN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ResetCAN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_ResetCAN(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ClearBuffer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ClearBuffer.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ClearBuffer" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ClearBuffer" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_ClearBuffer(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ReadChannelErrInfo(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_CHANNEL_ERR_INFO *arg2 = (ZCAN_CHANNEL_ERR_INFO *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ReadChannelErrInfo.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReadChannelErrInfo" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ReadChannelErrInfo" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReadChannelErrInfo" "', argument " "2"" of type '" "ZCAN_CHANNEL_ERR_INFO *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_CHANNEL_ERR_INFO * >(argp2);result = (UINT)ZCAN_ReadChannelErrInfo(SWIG_STD_MOVE(arg1),arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ReadChannelStatus(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_CHANNEL_STATUS *arg2 = (ZCAN_CHANNEL_STATUS *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ReadChannelStatus.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReadChannelStatus" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ReadChannelStatus" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_CHANNEL_STATUS, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReadChannelStatus" "', argument " "2"" of type '" "ZCAN_CHANNEL_STATUS *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_CHANNEL_STATUS * >(argp2);result = (UINT)ZCAN_ReadChannelStatus(SWIG_STD_MOVE(arg1),arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_GetReceiveNum(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  BYTE arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_GetReceiveNum.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_GetReceiveNum" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_GetReceiveNum" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_GetReceiveNum" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);result = (UINT)ZCAN_GetReceiveNum(SWIG_STD_MOVE(arg1),arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_Transmit(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_Transmit_Data *arg2 = (ZCAN_Transmit_Data *) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_Transmit.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Transmit" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_Transmit" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_Transmit_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_Transmit" "', argument " "2"" of type '" "ZCAN_Transmit_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_Transmit_Data * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_Transmit" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_Transmit(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_Receive(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_Receive_Data *arg2 = (ZCAN_Receive_Data *) 0 ;
  UINT arg3 ;
  int arg4 = (int) -1 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_Receive.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_Receive" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_Receive" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_Receive_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_Receive" "', argument " "2"" of type '" "ZCAN_Receive_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_Receive_Data * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_Receive" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCAN_Receive" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (UINT)ZCAN_Receive(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_TransmitFD(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_TransmitFD_Data *arg2 = (ZCAN_TransmitFD_Data *) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_TransmitFD.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitFD" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_TransmitFD" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_TransmitFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_TransmitFD" "', argument " "2"" of type '" "ZCAN_TransmitFD_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_TransmitFD_Data * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_TransmitFD" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_TransmitFD(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ReceiveFD(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  ZCAN_ReceiveFD_Data *arg2 = (ZCAN_ReceiveFD_Data *) 0 ;
  UINT arg3 ;
  int arg4 = (int) -1 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ReceiveFD.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveFD" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ReceiveFD" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCAN_ReceiveFD_Data, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReceiveFD" "', argument " "2"" of type '" "ZCAN_ReceiveFD_Data *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_ReceiveFD_Data * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_ReceiveFD" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCAN_ReceiveFD" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (UINT)ZCAN_ReceiveFD(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_TransmitData(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCANDataObj *arg2 = (ZCANDataObj *) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_TransmitData.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitData" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_TransmitData" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_TransmitData" "', argument " "2"" of type '" "ZCANDataObj *""'"); 
  }
  arg2 = reinterpret_cast< ZCANDataObj * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_TransmitData" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_TransmitData(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ReceiveData(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCANDataObj *arg2 = (ZCANDataObj *) 0 ;
  UINT arg3 ;
  int arg4 = (int) -1 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ReceiveData.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveData" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ReceiveData" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCANDataObj, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReceiveData" "', argument " "2"" of type '" "ZCANDataObj *""'"); 
  }
  arg2 = reinterpret_cast< ZCANDataObj * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_ReceiveData" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCAN_ReceiveData" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (UINT)ZCAN_ReceiveData(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_SetValue(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_SetValue.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_SetValue" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_SetValue" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_SetValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);res3 = SWIG_AsCharPtrAndSize(info[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_SetValue" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);result = (UINT)ZCAN_SetValue(SWIG_STD_MOVE(arg1),(char const *)arg2,(char const *)arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_GetValue(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  char *arg2 = (char *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_GetValue.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_GetValue" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_GetValue" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_GetValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);result = (void *)ZCAN_GetValue(SWIG_STD_MOVE(arg1),(char const *)arg2);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetIProperty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  IProperty *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetIProperty.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetIProperty" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GetIProperty" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  result = (IProperty *)GetIProperty(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IProperty, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ReleaseIProperty(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  IProperty *arg1 = (IProperty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ReleaseIProperty.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_IProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ReleaseIProperty" "', argument " "1"" of type '" "IProperty *""'"); 
  }
  arg1 = reinterpret_cast< IProperty * >(argp1);result = (UINT)ReleaseIProperty(arg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_SetServerInfo(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  unsigned short arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned short arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  unsigned short val4 ;
  int ecode4 = 0 ;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_SetServerInfo.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_SetServerInfo" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCLOUD_SetServerInfo" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);res3 = SWIG_AsCharPtrAndSize(info[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCLOUD_SetServerInfo" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);ecode4 = SWIG_AsVal_unsigned_SS_short(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCLOUD_SetServerInfo" "', argument " "4"" of type '" "unsigned short""'");
  } 
  arg4 = static_cast< unsigned short >(val4);ZCLOUD_SetServerInfo((char const *)arg1,arg2,(char const *)arg3,arg4);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_ConnectServer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_ConnectServer.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_ConnectServer" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_ConnectServer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);result = (UINT)ZCLOUD_ConnectServer((char const *)arg1,(char const *)arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_IsConnected(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_IsConnected.");
  }
  
  result = (UINT)ZCLOUD_IsConnected();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_DisconnectServer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_DisconnectServer.");
  }
  
  result = (UINT)ZCLOUD_DisconnectServer();
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_GetUserData(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 = (int) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  ZCLOUD_USER_DATA *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_GetUserData.");
  }
  
  if(info.Length() > 0)
  {
    ecode1 = SWIG_AsVal_int(info[0], &val1);
    if (!SWIG_IsOK(ecode1)) {
      SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "ZCLOUD_GetUserData" "', argument " "1"" of type '" "int""'");
    } 
    arg1 = static_cast< int >(val1);
  }
  result = (ZCLOUD_USER_DATA *)ZCLOUD_GetUserData(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_tagZCLOUD_USER_DATA, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCLOUD_ReceiveGPS(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCLOUD_GPS_FRAME *arg2 = (ZCLOUD_GPS_FRAME *) 0 ;
  UINT arg3 ;
  int arg4 = (int) -1 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCLOUD_ReceiveGPS.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCLOUD_ReceiveGPS" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCLOUD_ReceiveGPS" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCLOUD_GPS_FRAME, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCLOUD_ReceiveGPS" "', argument " "2"" of type '" "ZCLOUD_GPS_FRAME *""'"); 
  }
  arg2 = reinterpret_cast< ZCLOUD_GPS_FRAME * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCLOUD_ReceiveGPS" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCLOUD_ReceiveGPS" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  result = (UINT)ZCLOUD_ReceiveGPS(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_InitLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  UINT arg2 ;
  PZCAN_LIN_INIT_CONFIG arg3 = (PZCAN_LIN_INIT_CONFIG) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  SwigValueWrapper< CHANNEL_HANDLE > result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_InitLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_InitLIN" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_InitLIN" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_InitLIN" "', argument " "2"" of type '" "UINT""'");
  } 
  arg2 = static_cast< UINT >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p__VCI_LIN_INIT_CONFIG, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_InitLIN" "', argument " "3"" of type '" "PZCAN_LIN_INIT_CONFIG""'"); 
  }
  arg3 = reinterpret_cast< PZCAN_LIN_INIT_CONFIG >(argp3);result = ZCAN_InitLIN(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_NewPointerObj((new CHANNEL_HANDLE(result)), SWIGTYPE_p_CHANNEL_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_StartLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_StartLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_StartLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_StartLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_StartLIN(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ResetLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ResetLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ResetLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ResetLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_ResetLIN(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_TransmitLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_MSG arg2 = (PZCAN_LIN_MSG) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_TransmitLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_TransmitLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_TransmitLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_TransmitLIN" "', argument " "2"" of type '" "PZCAN_LIN_MSG""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_MSG >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_TransmitLIN" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_TransmitLIN(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_GetLINReceiveNum(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_GetLINReceiveNum.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_GetLINReceiveNum" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_GetLINReceiveNum" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_GetLINReceiveNum(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ReceiveLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_MSG arg2 = (PZCAN_LIN_MSG) 0 ;
  UINT arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ReceiveLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ReceiveLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ReceiveLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ReceiveLIN" "', argument " "2"" of type '" "PZCAN_LIN_MSG""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_MSG >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_ReceiveLIN" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);ecode4 = SWIG_AsVal_int(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ZCAN_ReceiveLIN" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);result = (UINT)ZCAN_ReceiveLIN(SWIG_STD_MOVE(arg1),arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_SetLINSubscribe(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_SUBSCIBE_CFG arg2 = (PZCAN_LIN_SUBSCIBE_CFG) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_SetLINSubscribe.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_SetLINSubscribe" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_SetLINSubscribe" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_SetLINSubscribe" "', argument " "2"" of type '" "PZCAN_LIN_SUBSCIBE_CFG""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_SUBSCIBE_CFG >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_SetLINSubscribe" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_SetLINSubscribe(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_SetLINPublish(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_PUBLISH_CFG arg2 = (PZCAN_LIN_PUBLISH_CFG) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_SetLINPublish.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_SetLINPublish" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_SetLINPublish" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_SetLINPublish" "', argument " "2"" of type '" "PZCAN_LIN_PUBLISH_CFG""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_PUBLISH_CFG >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_SetLINPublish" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_SetLINPublish(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_SetLINPublishEx(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_PUBLISH_CFG_EX arg2 = (PZCAN_LIN_PUBLISH_CFG_EX) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_SetLINPublishEx.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_SetLINPublishEx" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_SetLINPublishEx" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_SetLINPublishEx" "', argument " "2"" of type '" "PZCAN_LIN_PUBLISH_CFG_EX""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_PUBLISH_CFG_EX >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_SetLINPublishEx" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_SetLINPublishEx(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_WakeUpLIN(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_WakeUpLIN.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_WakeUpLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_WakeUpLIN" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  result = (UINT)ZCAN_WakeUpLIN(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_UDS_Request(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCAN_UDS_REQUEST *arg2 = (ZCAN_UDS_REQUEST *) 0 ;
  ZCAN_UDS_RESPONSE *arg3 = (ZCAN_UDS_RESPONSE *) 0 ;
  BYTE *arg4 = (BYTE *) 0 ;
  UINT arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  ZCAN_RET_STATUS result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_UDS_Request.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_Request" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_UDS_Request" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__ZCAN_UDS_REQUEST, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_Request" "', argument " "2"" of type '" "ZCAN_UDS_REQUEST const *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_UDS_REQUEST * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_UDS_Request" "', argument " "3"" of type '" "ZCAN_UDS_RESPONSE *""'"); 
  }
  arg3 = reinterpret_cast< ZCAN_UDS_RESPONSE * >(argp3);res4 = SWIG_ConvertPtr(info[3], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ZCAN_UDS_Request" "', argument " "4"" of type '" "BYTE *""'"); 
  }
  arg4 = reinterpret_cast< BYTE * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ZCAN_UDS_Request" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);result = (ZCAN_RET_STATUS)ZCAN_UDS_Request(SWIG_STD_MOVE(arg1),(_ZCAN_UDS_REQUEST const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_UDS_Control(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCAN_UDS_CTRL_REQ *arg2 = (ZCAN_UDS_CTRL_REQ *) 0 ;
  ZCAN_UDS_CTRL_RESP *arg3 = (ZCAN_UDS_CTRL_RESP *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  ZCAN_RET_STATUS result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_UDS_Control.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_Control" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_UDS_Control" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_Control" "', argument " "2"" of type '" "ZCAN_UDS_CTRL_REQ const *""'"); 
  }
  arg2 = reinterpret_cast< ZCAN_UDS_CTRL_REQ * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_UDS_Control" "', argument " "3"" of type '" "ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg3 = reinterpret_cast< ZCAN_UDS_CTRL_RESP * >(argp3);result = (ZCAN_RET_STATUS)ZCAN_UDS_Control(SWIG_STD_MOVE(arg1),(_ZCAN_UDS_CTRL_REQ const *)arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_UDS_RequestEX(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCANUdsRequestDataObj *arg2 = (ZCANUdsRequestDataObj *) 0 ;
  ZCAN_UDS_RESPONSE *arg3 = (ZCAN_UDS_RESPONSE *) 0 ;
  BYTE *arg4 = (BYTE *) 0 ;
  UINT arg5 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  ZCAN_RET_STATUS result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_UDS_RequestEX.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_RequestEX" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_UDS_RequestEX" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagZCANUdsRequestDataObj, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_UDS_RequestEX" "', argument " "2"" of type '" "ZCANUdsRequestDataObj const *""'"); 
  }
  arg2 = reinterpret_cast< ZCANUdsRequestDataObj * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p__ZCAN_UDS_RESPONSE, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_UDS_RequestEX" "', argument " "3"" of type '" "ZCAN_UDS_RESPONSE *""'"); 
  }
  arg3 = reinterpret_cast< ZCAN_UDS_RESPONSE * >(argp3);res4 = SWIG_ConvertPtr(info[3], &argp4,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ZCAN_UDS_RequestEX" "', argument " "4"" of type '" "BYTE *""'"); 
  }
  arg4 = reinterpret_cast< BYTE * >(argp4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ZCAN_UDS_RequestEX" "', argument " "5"" of type '" "UINT""'");
  } 
  arg5 = static_cast< UINT >(val5);result = (ZCAN_RET_STATUS)ZCAN_UDS_RequestEX(SWIG_STD_MOVE(arg1),(tagZCANUdsRequestDataObj const *)arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_UDS_ControlEX(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< DEVICE_HANDLE > arg1 ;
  ZCAN_UDS_DATA_DEF arg2 ;
  ZCAN_UDS_CTRL_REQ *arg3 = (ZCAN_UDS_CTRL_REQ *) 0 ;
  ZCAN_UDS_CTRL_RESP *arg4 = (ZCAN_UDS_CTRL_RESP *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  ZCAN_RET_STATUS result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_UDS_ControlEX.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_DEVICE_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_UDS_ControlEX" "', argument " "1"" of type '" "DEVICE_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_UDS_ControlEX" "', argument " "1"" of type '" "DEVICE_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< DEVICE_HANDLE * >(argp1));
      }
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ZCAN_UDS_ControlEX" "', argument " "2"" of type '" "ZCAN_UDS_DATA_DEF""'");
  } 
  arg2 = static_cast< ZCAN_UDS_DATA_DEF >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p__ZCAN_UDS_CTRL_REQ, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ZCAN_UDS_ControlEX" "', argument " "3"" of type '" "ZCAN_UDS_CTRL_REQ const *""'"); 
  }
  arg3 = reinterpret_cast< ZCAN_UDS_CTRL_REQ * >(argp3);res4 = SWIG_ConvertPtr(info[3], &argp4,SWIGTYPE_p__ZCAN_UDS_CTRL_RESP, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ZCAN_UDS_ControlEX" "', argument " "4"" of type '" "ZCAN_UDS_CTRL_RESP *""'"); 
  }
  arg4 = reinterpret_cast< ZCAN_UDS_CTRL_RESP * >(argp4);result = (ZCAN_RET_STATUS)ZCAN_UDS_ControlEX(SWIG_STD_MOVE(arg1),arg2,(_ZCAN_UDS_CTRL_REQ const *)arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_SetLINSlaveMsg(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  PZCAN_LIN_MSG arg2 = (PZCAN_LIN_MSG) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_SetLINSlaveMsg.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_SetLINSlaveMsg" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_SetLINSlaveMsg" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__VCI_LIN_MSG, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_SetLINSlaveMsg" "', argument " "2"" of type '" "PZCAN_LIN_MSG""'"); 
  }
  arg2 = reinterpret_cast< PZCAN_LIN_MSG >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_SetLINSlaveMsg" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_SetLINSlaveMsg(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_ZCAN_ClearLINSlaveMsg(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  BYTE *arg2 = (BYTE *) 0 ;
  UINT arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  UINT result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ZCAN_ClearLINSlaveMsg.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ZCAN_ClearLINSlaveMsg" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ZCAN_ClearLINSlaveMsg" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ZCAN_ClearLINSlaveMsg" "', argument " "2"" of type '" "BYTE *""'"); 
  }
  arg2 = reinterpret_cast< BYTE * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ZCAN_ClearLINSlaveMsg" "', argument " "3"" of type '" "UINT""'");
  } 
  arg3 = static_cast< UINT >(val3);result = (UINT)ZCAN_ClearLINSlaveMsg(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_LoadDll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_LoadDll.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDll" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);LoadDll((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_handleConver(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  SwigValueWrapper< CHANNEL_HANDLE > arg1 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_handleConver.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_CHANNEL_HANDLE,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "handleConver" "', argument " "1"" of type '" "CHANNEL_HANDLE""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "handleConver" "', argument " "1"" of type '" "CHANNEL_HANDLE""'");
      } else {
        arg1 = *(reinterpret_cast< CHANNEL_HANDLE * >(argp1));
      }
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "handleConver" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);handleConver(SWIG_STD_MOVE(arg1),arg2);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_CHANNEL_HANDLETo_p_CHANNEL_HANDLE(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((CHANNEL_HANDLE *)  ((CHANNEL_HANDLE *) x));
}
static void *_p_DEVICE_HANDLETo_p_DEVICE_HANDLE(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((DEVICE_HANDLE *)  ((DEVICE_HANDLE *) x));
}
static swig_type_info _swigt__p_ByteArray = {"_p_ByteArray", "p_ByteArray|ByteArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CANFD_FILTER_CFG = {"_p_CANFD_FILTER_CFG", "p_CANFD_FILTER_CFG|CANFD_FILTER_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CANFD_FILTER_RULE = {"_p_CANFD_FILTER_RULE", "p_CANFD_FILTER_RULE|CANFD_FILTER_RULE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CHANNEL_HANDLE = {"_p_CHANNEL_HANDLE", "CHANNEL_HANDLE *|p_CHANNEL_HANDLE", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DEVICE_HANDLE = {"_p_DEVICE_HANDLE", "DEVICE_HANDLE *|p_DEVICE_HANDLE", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IProperty = {"_p_IProperty", "IProperty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReceiveDataArray = {"_p_ReceiveDataArray", "ReceiveDataArray *|p_ReceiveDataArray", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ReceiveFDDataArray = {"_p_ReceiveFDDataArray", "p_ReceiveFDDataArray|ReceiveFDDataArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_U32Array = {"_p_U32Array", "p_U32Array|U32Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO = {"_p_ZCAN_CHANNEL_INIT_CONFIG_INFO", "p_ZCAN_CHANNEL_INIT_CONFIG_INFO|ZCAN_CHANNEL_INIT_CONFIG_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN = {"_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN", "ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN *|p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD = {"_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD", "p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD|ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__VCI_LIN_INIT_CONFIG = {"_p__VCI_LIN_INIT_CONFIG", "PZCAN_LIN_INIT_CONFIG|ZCAN_LIN_INIT_CONFIG *|p__VCI_LIN_INIT_CONFIG|_VCI_LIN_INIT_CONFIG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__VCI_LIN_MSG = {"_p__VCI_LIN_MSG", "PZCAN_LIN_MSG|ZCAN_LIN_MSG *|_VCI_LIN_MSG *|p__VCI_LIN_MSG", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__VCI_LIN_PUBLISH_CFG = {"_p__VCI_LIN_PUBLISH_CFG", "PZCAN_LIN_PUBLISH_CFG|ZCAN_LIN_PUBLISH_CFG *|p__VCI_LIN_PUBLISH_CFG|_VCI_LIN_PUBLISH_CFG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__VCI_LIN_PUBLISH_CFG_EX = {"_p__VCI_LIN_PUBLISH_CFG_EX", "PZCAN_LIN_PUBLISH_CFG_EX|ZCAN_LIN_PUBLISH_CFG_EX *|p__VCI_LIN_PUBLISH_CFG_EX|_VCI_LIN_PUBLISH_CFG_EX *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__VCI_LIN_SUBSCIBE_CFG = {"_p__VCI_LIN_SUBSCIBE_CFG", "PZCAN_LIN_SUBSCIBE_CFG|ZCAN_LIN_SUBSCIBE_CFG *|_VCI_LIN_SUBSCIBE_CFG *|p__VCI_LIN_SUBSCIBE_CFG", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZCAN_UDS_CTRL_REQ = {"_p__ZCAN_UDS_CTRL_REQ", "ZCAN_UDS_CTRL_REQ *|p__ZCAN_UDS_CTRL_REQ|_ZCAN_UDS_CTRL_REQ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZCAN_UDS_CTRL_RESP = {"_p__ZCAN_UDS_CTRL_RESP", "ZCAN_UDS_CTRL_RESP *|_ZCAN_UDS_CTRL_RESP *|p__ZCAN_UDS_CTRL_RESP", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZCAN_UDS_REQUEST = {"_p__ZCAN_UDS_REQUEST", "ZCAN_UDS_REQUEST *|p__ZCAN_UDS_REQUEST|_ZCAN_UDS_REQUEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZCAN_UDS_RESPONSE = {"_p__ZCAN_UDS_RESPONSE", "ZCAN_UDS_RESPONSE *|_ZCAN_UDS_RESPONSE *|p__ZCAN_UDS_RESPONSE", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZDOIP_REQUEST = {"_p__ZDOIP_REQUEST", "ZDOIP_REQUEST *|p__ZDOIP_REQUEST|_ZDOIP_REQUEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__ZLIN_UDS_REQUEST = {"_p__ZLIN_UDS_REQUEST", "ZLIN_UDS_REQUEST *|p__ZLIN_UDS_REQUEST|_ZLIN_UDS_REQUEST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "LONG64 *|LONGLONG *|__int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_can_frame = {"_p_can_frame", "p_can_frame|can_frame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_canfd_frame = {"_p_canfd_frame", "canfd_frame *|p_canfd_frame", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CCHAR *|CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT *|INT32 *|INT_PTR *|LONG32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "HRESULT *|LONG *|LONG_PTR *|SHANDLE_PTR *|SSIZE_T *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "LPCTSTR *|LPCUTSTR *|LPTCH *|LPTSTR *|LPUTSTR *|PCTSTR *|PCUTSTR *|PTCH *|PTSTR *|PUTSTR *|char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "PLCID *|unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|INT16 *|SHORT *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "INT8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagBusUsage = {"_p_tagBusUsage", "BusUsage *|tagBusUsage *|p_tagBusUsage", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagTxTimeStamp = {"_p_tagTxTimeStamp", "TxTimeStamp *|p_tagTxTimeStamp|tagTxTimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagUSBCANFDTxTimeStamp = {"_p_tagUSBCANFDTxTimeStamp", "USBCANFDTxTimeStamp *|p_tagUSBCANFDTxTimeStamp|tagUSBCANFDTxTimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANCANFDData = {"_p_tagZCANCANFDData", "ZCANCANFDData *|p_tagZCANCANFDData|tagZCANCANFDData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANCANFDUdsData = {"_p_tagZCANCANFDUdsData", "ZCANCANFDUdsData *|tagZCANCANFDUdsData *|p_tagZCANCANFDUdsData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANDataObj = {"_p_tagZCANDataObj", "ZCANDataObj *|p_tagZCANDataObj|tagZCANDataObj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANErrorData = {"_p_tagZCANErrorData", "ZCANErrorData *|p_tagZCANErrorData|tagZCANErrorData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANFD_AUTO_TRANSMIT_OBJ = {"_p_tagZCANFD_AUTO_TRANSMIT_OBJ", "ZCANFD_AUTO_TRANSMIT_OBJ *|tagZCANFD_AUTO_TRANSMIT_OBJ *|p_tagZCANFD_AUTO_TRANSMIT_OBJ", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANGPSData = {"_p_tagZCANGPSData", "ZCANGPSData *|p_tagZCANGPSData|tagZCANGPSData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANLINData = {"_p_tagZCANLINData", "ZCANLINData *|p_tagZCANLINData|tagZCANLINData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANLINErrData = {"_p_tagZCANLINErrData", "ZCANLINErrData *|p_tagZCANLINErrData|tagZCANLINErrData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANLINEventData = {"_p_tagZCANLINEventData", "ZCANLINEventData *|tagZCANLINEventData *|p_tagZCANLINEventData", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANLINExData = {"_p_tagZCANLINExData", "ZCANLINExData *|p_tagZCANLINExData|tagZCANLINExData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANLINUdsData = {"_p_tagZCANLINUdsData", "ZCANLINUdsData *|p_tagZCANLINUdsData|tagZCANLINUdsData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCANUdsRequestDataObj = {"_p_tagZCANUdsRequestDataObj", "ZCANUdsRequestDataObj *|p_tagZCANUdsRequestDataObj|tagZCANUdsRequestDataObj *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ = {"_p_tagZCAN_AUTO_TRANSMIT_OBJ", "ZCAN_AUTO_TRANSMIT_OBJ *|tagZCAN_AUTO_TRANSMIT_OBJ *|p_tagZCAN_AUTO_TRANSMIT_OBJ", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM = {"_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM", "ZCAN_AUTO_TRANSMIT_OBJ_PARAM *|p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM|tagZCAN_AUTO_TRANSMIT_OBJ_PARAM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_CHANNEL_ERR_INFO = {"_p_tagZCAN_CHANNEL_ERR_INFO", "ZCAN_CHANNEL_ERR_INFO *|p_tagZCAN_CHANNEL_ERR_INFO|tagZCAN_CHANNEL_ERR_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_CHANNEL_INIT_CONFIG = {"_p_tagZCAN_CHANNEL_INIT_CONFIG", "ZCAN_CHANNEL_INIT_CONFIG *|p_tagZCAN_CHANNEL_INIT_CONFIG|tagZCAN_CHANNEL_INIT_CONFIG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_CHANNEL_STATUS = {"_p_tagZCAN_CHANNEL_STATUS", "ZCAN_CHANNEL_STATUS *|p_tagZCAN_CHANNEL_STATUS|tagZCAN_CHANNEL_STATUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_DEVICE_INFO = {"_p_tagZCAN_DEVICE_INFO", "ZCAN_DEVICE_INFO *|p_tagZCAN_DEVICE_INFO|tagZCAN_DEVICE_INFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_DYNAMIC_CONFIG = {"_p_tagZCAN_DYNAMIC_CONFIG", "ZCAN_DYNAMIC_CONFIG *|p_tagZCAN_DYNAMIC_CONFIG|tagZCAN_DYNAMIC_CONFIG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_DYNAMIC_CONFIG_DATA = {"_p_tagZCAN_DYNAMIC_CONFIG_DATA", "ZCAN_DYNAMIC_CONFIG_DATA *|p_tagZCAN_DYNAMIC_CONFIG_DATA|tagZCAN_DYNAMIC_CONFIG_DATA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_ReceiveFD_Data = {"_p_tagZCAN_ReceiveFD_Data", "ZCAN_ReceiveFD_Data *|p_tagZCAN_ReceiveFD_Data|tagZCAN_ReceiveFD_Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_Receive_Data = {"_p_tagZCAN_Receive_Data", "ZCAN_Receive_Data *|p_tagZCAN_Receive_Data|tagZCAN_Receive_Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_TransmitFD_Data = {"_p_tagZCAN_TransmitFD_Data", "ZCAN_TransmitFD_Data *|tagZCAN_TransmitFD_Data *|p_tagZCAN_TransmitFD_Data", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCAN_Transmit_Data = {"_p_tagZCAN_Transmit_Data", "ZCAN_Transmit_Data *|p_tagZCAN_Transmit_Data|tagZCAN_Transmit_Data *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCLOUD_CHNINFO = {"_p_tagZCLOUD_CHNINFO", "ZCLOUD_CHNINFO *|p_tagZCLOUD_CHNINFO|tagZCLOUD_CHNINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCLOUD_DEVINFO = {"_p_tagZCLOUD_DEVINFO", "ZCLOUD_DEVINFO *|p_tagZCLOUD_DEVINFO|tagZCLOUD_DEVINFO *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCLOUD_GPS_FRAME = {"_p_tagZCLOUD_GPS_FRAME", "ZCLOUD_GPS_FRAME *|p_tagZCLOUD_GPS_FRAME|tagZCLOUD_GPS_FRAME *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCLOUD_GPS_FRAME____gps_time = {"_p_tagZCLOUD_GPS_FRAME____gps_time", "tagZCLOUD_GPS_FRAME::__gps_time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZCLOUD_USER_DATA = {"_p_tagZCLOUD_USER_DATA", "ZCLOUD_USER_DATA *|p_tagZCLOUD_USER_DATA|tagZCLOUD_USER_DATA *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagZDoIPUdsData = {"_p_tagZDoIPUdsData", "ZDoIPUdsData *|p_tagZDoIPUdsData|tagZDoIPUdsData *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unionCANFDFilterRulePresent = {"_p_unionCANFDFilterRulePresent", "unionCANFDFilterRulePresent *|p_unionCANFDFilterRulePresent", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "DWORD64 *|DWORDLONG *|UINT64 *|ULONG64 *|ULONGLONG *|unsigned __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "BOOLEAN *|BYTE *|FCHAR *|TBYTE *|UCHAR *|UINT8 *|ZCAN_DOIP_ROUTING_ACT_TYPE *|ZCAN_DOIP_VERSION *|ZCAN_LIN_EVENT_TYPE *|ZCAN_UDS_ERROR *|ZCAN_UDS_FILL_MODE *|ZCAN_UDS_FRAME_TYPE *|ZCAN_UDS_RESPONSE_TYPE *|ZCAN_UDS_TRANS_VER *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD32 *|DynamicConfigDataType *|UINT *|UINT32 *|UINT_PTR *|ULONG32 *|ZCAN_LAST_ERROR_STATUS *|ZCAN_RET_STATUS *|ZCAN_UDS_CTRL_CODE *|ZCAN_UDS_CTRL_RESULT *|ZCAN_UDS_DATA_DEF *|can_err_mask_t *|canid_t *|enumCANFDFilterBlackWhiteList *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "DWORD *|DWORD_PTR *|FLONG *|HANDLE_PTR *|LCID *|SIZE_T *|ULONG *|ULONG_PTR *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "FSHORT *|LANGID *|UHALF_PTR *|UINT16 *|USHORT *|WORD *|uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ByteArray,
  &_swigt__p_CANFD_FILTER_CFG,
  &_swigt__p_CANFD_FILTER_RULE,
  &_swigt__p_CHANNEL_HANDLE,
  &_swigt__p_DEVICE_HANDLE,
  &_swigt__p_IProperty,
  &_swigt__p_ReceiveDataArray,
  &_swigt__p_ReceiveFDDataArray,
  &_swigt__p_U32Array,
  &_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO,
  &_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN,
  &_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD,
  &_swigt__p__VCI_LIN_INIT_CONFIG,
  &_swigt__p__VCI_LIN_MSG,
  &_swigt__p__VCI_LIN_PUBLISH_CFG,
  &_swigt__p__VCI_LIN_PUBLISH_CFG_EX,
  &_swigt__p__VCI_LIN_SUBSCIBE_CFG,
  &_swigt__p__ZCAN_UDS_CTRL_REQ,
  &_swigt__p__ZCAN_UDS_CTRL_RESP,
  &_swigt__p__ZCAN_UDS_REQUEST,
  &_swigt__p__ZCAN_UDS_RESPONSE,
  &_swigt__p__ZDOIP_REQUEST,
  &_swigt__p__ZLIN_UDS_REQUEST,
  &_swigt__p___int64,
  &_swigt__p_can_frame,
  &_swigt__p_canfd_frame,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_tagBusUsage,
  &_swigt__p_tagTxTimeStamp,
  &_swigt__p_tagUSBCANFDTxTimeStamp,
  &_swigt__p_tagZCANCANFDData,
  &_swigt__p_tagZCANCANFDUdsData,
  &_swigt__p_tagZCANDataObj,
  &_swigt__p_tagZCANErrorData,
  &_swigt__p_tagZCANFD_AUTO_TRANSMIT_OBJ,
  &_swigt__p_tagZCANGPSData,
  &_swigt__p_tagZCANLINData,
  &_swigt__p_tagZCANLINErrData,
  &_swigt__p_tagZCANLINEventData,
  &_swigt__p_tagZCANLINExData,
  &_swigt__p_tagZCANLINUdsData,
  &_swigt__p_tagZCANUdsRequestDataObj,
  &_swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ,
  &_swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM,
  &_swigt__p_tagZCAN_CHANNEL_ERR_INFO,
  &_swigt__p_tagZCAN_CHANNEL_INIT_CONFIG,
  &_swigt__p_tagZCAN_CHANNEL_STATUS,
  &_swigt__p_tagZCAN_DEVICE_INFO,
  &_swigt__p_tagZCAN_DYNAMIC_CONFIG,
  &_swigt__p_tagZCAN_DYNAMIC_CONFIG_DATA,
  &_swigt__p_tagZCAN_ReceiveFD_Data,
  &_swigt__p_tagZCAN_Receive_Data,
  &_swigt__p_tagZCAN_TransmitFD_Data,
  &_swigt__p_tagZCAN_Transmit_Data,
  &_swigt__p_tagZCLOUD_CHNINFO,
  &_swigt__p_tagZCLOUD_DEVINFO,
  &_swigt__p_tagZCLOUD_GPS_FRAME,
  &_swigt__p_tagZCLOUD_GPS_FRAME____gps_time,
  &_swigt__p_tagZCLOUD_USER_DATA,
  &_swigt__p_tagZDoIPUdsData,
  &_swigt__p_unionCANFDFilterRulePresent,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ByteArray[] = {  {&_swigt__p_ByteArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CANFD_FILTER_CFG[] = {  {&_swigt__p_CANFD_FILTER_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CANFD_FILTER_RULE[] = {  {&_swigt__p_CANFD_FILTER_RULE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHANNEL_HANDLE[] = {  {&_swigt__p_CHANNEL_HANDLE, _p_CHANNEL_HANDLETo_p_CHANNEL_HANDLE, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DEVICE_HANDLE[] = {  {&_swigt__p_DEVICE_HANDLE, _p_DEVICE_HANDLETo_p_DEVICE_HANDLE, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IProperty[] = {  {&_swigt__p_IProperty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReceiveDataArray[] = {  {&_swigt__p_ReceiveDataArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ReceiveFDDataArray[] = {  {&_swigt__p_ReceiveFDDataArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_U32Array[] = {  {&_swigt__p_U32Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO[] = {  {&_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN[] = {  {&_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD[] = {  {&_swigt__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__VCI_LIN_INIT_CONFIG[] = {  {&_swigt__p__VCI_LIN_INIT_CONFIG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__VCI_LIN_MSG[] = {  {&_swigt__p__VCI_LIN_MSG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__VCI_LIN_PUBLISH_CFG[] = {  {&_swigt__p__VCI_LIN_PUBLISH_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__VCI_LIN_PUBLISH_CFG_EX[] = {  {&_swigt__p__VCI_LIN_PUBLISH_CFG_EX, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__VCI_LIN_SUBSCIBE_CFG[] = {  {&_swigt__p__VCI_LIN_SUBSCIBE_CFG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZCAN_UDS_CTRL_REQ[] = {  {&_swigt__p__ZCAN_UDS_CTRL_REQ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZCAN_UDS_CTRL_RESP[] = {  {&_swigt__p__ZCAN_UDS_CTRL_RESP, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZCAN_UDS_REQUEST[] = {  {&_swigt__p__ZCAN_UDS_REQUEST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZCAN_UDS_RESPONSE[] = {  {&_swigt__p__ZCAN_UDS_RESPONSE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZDOIP_REQUEST[] = {  {&_swigt__p__ZDOIP_REQUEST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__ZLIN_UDS_REQUEST[] = {  {&_swigt__p__ZLIN_UDS_REQUEST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_can_frame[] = {  {&_swigt__p_can_frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_canfd_frame[] = {  {&_swigt__p_canfd_frame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagBusUsage[] = {  {&_swigt__p_tagBusUsage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagTxTimeStamp[] = {  {&_swigt__p_tagTxTimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagUSBCANFDTxTimeStamp[] = {  {&_swigt__p_tagUSBCANFDTxTimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANCANFDData[] = {  {&_swigt__p_tagZCANCANFDData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANCANFDUdsData[] = {  {&_swigt__p_tagZCANCANFDUdsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANDataObj[] = {  {&_swigt__p_tagZCANDataObj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANErrorData[] = {  {&_swigt__p_tagZCANErrorData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANFD_AUTO_TRANSMIT_OBJ[] = {  {&_swigt__p_tagZCANFD_AUTO_TRANSMIT_OBJ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANGPSData[] = {  {&_swigt__p_tagZCANGPSData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANLINData[] = {  {&_swigt__p_tagZCANLINData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANLINErrData[] = {  {&_swigt__p_tagZCANLINErrData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANLINEventData[] = {  {&_swigt__p_tagZCANLINEventData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANLINExData[] = {  {&_swigt__p_tagZCANLINExData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANLINUdsData[] = {  {&_swigt__p_tagZCANLINUdsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCANUdsRequestDataObj[] = {  {&_swigt__p_tagZCANUdsRequestDataObj, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_AUTO_TRANSMIT_OBJ[] = {  {&_swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM[] = {  {&_swigt__p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_CHANNEL_ERR_INFO[] = {  {&_swigt__p_tagZCAN_CHANNEL_ERR_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_CHANNEL_INIT_CONFIG[] = {  {&_swigt__p_tagZCAN_CHANNEL_INIT_CONFIG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_CHANNEL_STATUS[] = {  {&_swigt__p_tagZCAN_CHANNEL_STATUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_DEVICE_INFO[] = {  {&_swigt__p_tagZCAN_DEVICE_INFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_DYNAMIC_CONFIG[] = {  {&_swigt__p_tagZCAN_DYNAMIC_CONFIG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_DYNAMIC_CONFIG_DATA[] = {  {&_swigt__p_tagZCAN_DYNAMIC_CONFIG_DATA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_ReceiveFD_Data[] = {  {&_swigt__p_tagZCAN_ReceiveFD_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_Receive_Data[] = {  {&_swigt__p_tagZCAN_Receive_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_TransmitFD_Data[] = {  {&_swigt__p_tagZCAN_TransmitFD_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCAN_Transmit_Data[] = {  {&_swigt__p_tagZCAN_Transmit_Data, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCLOUD_CHNINFO[] = {  {&_swigt__p_tagZCLOUD_CHNINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCLOUD_DEVINFO[] = {  {&_swigt__p_tagZCLOUD_DEVINFO, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCLOUD_GPS_FRAME[] = {  {&_swigt__p_tagZCLOUD_GPS_FRAME, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCLOUD_GPS_FRAME____gps_time[] = {  {&_swigt__p_tagZCLOUD_GPS_FRAME____gps_time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZCLOUD_USER_DATA[] = {  {&_swigt__p_tagZCLOUD_USER_DATA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagZDoIPUdsData[] = {  {&_swigt__p_tagZDoIPUdsData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unionCANFDFilterRulePresent[] = {  {&_swigt__p_unionCANFDFilterRulePresent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ByteArray,
  _swigc__p_CANFD_FILTER_CFG,
  _swigc__p_CANFD_FILTER_RULE,
  _swigc__p_CHANNEL_HANDLE,
  _swigc__p_DEVICE_HANDLE,
  _swigc__p_IProperty,
  _swigc__p_ReceiveDataArray,
  _swigc__p_ReceiveFDDataArray,
  _swigc__p_U32Array,
  _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO,
  _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN,
  _swigc__p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD,
  _swigc__p__VCI_LIN_INIT_CONFIG,
  _swigc__p__VCI_LIN_MSG,
  _swigc__p__VCI_LIN_PUBLISH_CFG,
  _swigc__p__VCI_LIN_PUBLISH_CFG_EX,
  _swigc__p__VCI_LIN_SUBSCIBE_CFG,
  _swigc__p__ZCAN_UDS_CTRL_REQ,
  _swigc__p__ZCAN_UDS_CTRL_RESP,
  _swigc__p__ZCAN_UDS_REQUEST,
  _swigc__p__ZCAN_UDS_RESPONSE,
  _swigc__p__ZDOIP_REQUEST,
  _swigc__p__ZLIN_UDS_REQUEST,
  _swigc__p___int64,
  _swigc__p_can_frame,
  _swigc__p_canfd_frame,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_tagBusUsage,
  _swigc__p_tagTxTimeStamp,
  _swigc__p_tagUSBCANFDTxTimeStamp,
  _swigc__p_tagZCANCANFDData,
  _swigc__p_tagZCANCANFDUdsData,
  _swigc__p_tagZCANDataObj,
  _swigc__p_tagZCANErrorData,
  _swigc__p_tagZCANFD_AUTO_TRANSMIT_OBJ,
  _swigc__p_tagZCANGPSData,
  _swigc__p_tagZCANLINData,
  _swigc__p_tagZCANLINErrData,
  _swigc__p_tagZCANLINEventData,
  _swigc__p_tagZCANLINExData,
  _swigc__p_tagZCANLINUdsData,
  _swigc__p_tagZCANUdsRequestDataObj,
  _swigc__p_tagZCAN_AUTO_TRANSMIT_OBJ,
  _swigc__p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM,
  _swigc__p_tagZCAN_CHANNEL_ERR_INFO,
  _swigc__p_tagZCAN_CHANNEL_INIT_CONFIG,
  _swigc__p_tagZCAN_CHANNEL_STATUS,
  _swigc__p_tagZCAN_DEVICE_INFO,
  _swigc__p_tagZCAN_DYNAMIC_CONFIG,
  _swigc__p_tagZCAN_DYNAMIC_CONFIG_DATA,
  _swigc__p_tagZCAN_ReceiveFD_Data,
  _swigc__p_tagZCAN_Receive_Data,
  _swigc__p_tagZCAN_TransmitFD_Data,
  _swigc__p_tagZCAN_Transmit_Data,
  _swigc__p_tagZCLOUD_CHNINFO,
  _swigc__p_tagZCLOUD_DEVINFO,
  _swigc__p_tagZCLOUD_GPS_FRAME,
  _swigc__p_tagZCLOUD_GPS_FRAME____gps_time,
  _swigc__p_tagZCLOUD_USER_DATA,
  _swigc__p_tagZDoIPUdsData,
  _swigc__p_unionCANFDFilterRulePresent,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr) return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);



extern void CreateTSFN(const Napi::CallbackInfo &info);
extern void FreeTSFN(const Napi::CallbackInfo &info);


do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CreateTSFN", CreateTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);

do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("FreeTSFN", FreeTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
	pd
  }));
} while (0);


  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */
  

  /* register classes */
  /* Class: DEVICE_HANDLE (_exports_DEVICE_HANDLE) */
// jsnapi_registerclass
Napi::Function _exports_DEVICE_HANDLE_ctor = _exports_DEVICE_HANDLE_inst::GetClass(env);
exports.Set("DEVICE_HANDLE", _exports_DEVICE_HANDLE_ctor);
if (SWIGTYPE_p_DEVICE_HANDLE->clientdata == nullptr) {
  SWIGTYPE_p_DEVICE_HANDLE->clientdata = new size_t(0);
}
Napi::FunctionReference *_exports_DEVICE_HANDLE_ctor_ref = new Napi::FunctionReference();
*_exports_DEVICE_HANDLE_ctor_ref = Napi::Persistent(_exports_DEVICE_HANDLE_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_DEVICE_HANDLE_ctor_ref;
/* Class: CHANNEL_HANDLE (_exports_CHANNEL_HANDLE) */
// jsnapi_registerclass
Napi::Function _exports_CHANNEL_HANDLE_ctor = _exports_CHANNEL_HANDLE_inst::GetClass(env);
exports.Set("CHANNEL_HANDLE", _exports_CHANNEL_HANDLE_ctor);
if (SWIGTYPE_p_CHANNEL_HANDLE->clientdata == nullptr) {
  SWIGTYPE_p_CHANNEL_HANDLE->clientdata = new size_t(1);
}
Napi::FunctionReference *_exports_CHANNEL_HANDLE_ctor_ref = new Napi::FunctionReference();
*_exports_CHANNEL_HANDLE_ctor_ref = Napi::Persistent(_exports_CHANNEL_HANDLE_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_CHANNEL_HANDLE_ctor_ref;
/* Class: U32Array (_exports_U32Array) */
// jsnapi_registerclass
Napi::Function _exports_U32Array_ctor = _exports_U32Array_inst::GetClass(env);
exports.Set("U32Array", _exports_U32Array_ctor);
if (SWIGTYPE_p_U32Array->clientdata == nullptr) {
  SWIGTYPE_p_U32Array->clientdata = new size_t(2);
}
Napi::FunctionReference *_exports_U32Array_ctor_ref = new Napi::FunctionReference();
*_exports_U32Array_ctor_ref = Napi::Persistent(_exports_U32Array_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _exports_U32Array_ctor_ref;
/* Class: ByteArray (_exports_ByteArray) */
// jsnapi_registerclass
Napi::Function _exports_ByteArray_ctor = _exports_ByteArray_inst::GetClass(env);
exports.Set("ByteArray", _exports_ByteArray_ctor);
if (SWIGTYPE_p_ByteArray->clientdata == nullptr) {
  SWIGTYPE_p_ByteArray->clientdata = new size_t(3);
}
Napi::FunctionReference *_exports_ByteArray_ctor_ref = new Napi::FunctionReference();
*_exports_ByteArray_ctor_ref = Napi::Persistent(_exports_ByteArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _exports_ByteArray_ctor_ref;
/* Class: ReceiveDataArray (_exports_ReceiveDataArray) */
// jsnapi_registerclass
Napi::Function _exports_ReceiveDataArray_ctor = _exports_ReceiveDataArray_inst::GetClass(env);
exports.Set("ReceiveDataArray", _exports_ReceiveDataArray_ctor);
if (SWIGTYPE_p_ReceiveDataArray->clientdata == nullptr) {
  SWIGTYPE_p_ReceiveDataArray->clientdata = new size_t(4);
}
Napi::FunctionReference *_exports_ReceiveDataArray_ctor_ref = new Napi::FunctionReference();
*_exports_ReceiveDataArray_ctor_ref = Napi::Persistent(_exports_ReceiveDataArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _exports_ReceiveDataArray_ctor_ref;
/* Class: ReceiveFDDataArray (_exports_ReceiveFDDataArray) */
// jsnapi_registerclass
Napi::Function _exports_ReceiveFDDataArray_ctor = _exports_ReceiveFDDataArray_inst::GetClass(env);
exports.Set("ReceiveFDDataArray", _exports_ReceiveFDDataArray_ctor);
if (SWIGTYPE_p_ReceiveFDDataArray->clientdata == nullptr) {
  SWIGTYPE_p_ReceiveFDDataArray->clientdata = new size_t(5);
}
Napi::FunctionReference *_exports_ReceiveFDDataArray_ctor_ref = new Napi::FunctionReference();
*_exports_ReceiveFDDataArray_ctor_ref = Napi::Persistent(_exports_ReceiveFDDataArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _exports_ReceiveFDDataArray_ctor_ref;
/* Class: can_frame (_exports_can_frame) */
// jsnapi_registerclass
Napi::Function _exports_can_frame_ctor = _exports_can_frame_inst::GetClass(env);
exports.Set("can_frame", _exports_can_frame_ctor);
if (SWIGTYPE_p_can_frame->clientdata == nullptr) {
  SWIGTYPE_p_can_frame->clientdata = new size_t(6);
}
Napi::FunctionReference *_exports_can_frame_ctor_ref = new Napi::FunctionReference();
*_exports_can_frame_ctor_ref = Napi::Persistent(_exports_can_frame_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _exports_can_frame_ctor_ref;
/* Class: canfd_frame (_exports_canfd_frame) */
// jsnapi_registerclass
Napi::Function _exports_canfd_frame_ctor = _exports_canfd_frame_inst::GetClass(env);
exports.Set("canfd_frame", _exports_canfd_frame_ctor);
if (SWIGTYPE_p_canfd_frame->clientdata == nullptr) {
  SWIGTYPE_p_canfd_frame->clientdata = new size_t(7);
}
Napi::FunctionReference *_exports_canfd_frame_ctor_ref = new Napi::FunctionReference();
*_exports_canfd_frame_ctor_ref = Napi::Persistent(_exports_canfd_frame_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _exports_canfd_frame_ctor_ref;
/* Class: ZCAN_DYNAMIC_CONFIG_DATA (_exports_ZCAN_DYNAMIC_CONFIG_DATA) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor = _exports_ZCAN_DYNAMIC_CONFIG_DATA_inst::GetClass(env);
exports.Set("ZCAN_DYNAMIC_CONFIG_DATA", _exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor);
if (SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG_DATA->clientdata = new size_t(8);
}
Napi::FunctionReference *_exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor_ref = Napi::Persistent(_exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor_ref;
/* Class: unionCANFDFilterRulePresent (_exports_unionCANFDFilterRulePresent) */
// jsnapi_registerclass
Napi::Function _exports_unionCANFDFilterRulePresent_ctor = _exports_unionCANFDFilterRulePresent_inst::GetClass(env);
exports.Set("unionCANFDFilterRulePresent", _exports_unionCANFDFilterRulePresent_ctor);
if (SWIGTYPE_p_unionCANFDFilterRulePresent->clientdata == nullptr) {
  SWIGTYPE_p_unionCANFDFilterRulePresent->clientdata = new size_t(9);
}
Napi::FunctionReference *_exports_unionCANFDFilterRulePresent_ctor_ref = new Napi::FunctionReference();
*_exports_unionCANFDFilterRulePresent_ctor_ref = Napi::Persistent(_exports_unionCANFDFilterRulePresent_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[9] = _exports_unionCANFDFilterRulePresent_ctor_ref;
/* Class: CANFD_FILTER_RULE (_exports_CANFD_FILTER_RULE) */
// jsnapi_registerclass
Napi::Function _exports_CANFD_FILTER_RULE_ctor = _exports_CANFD_FILTER_RULE_inst::GetClass(env);
exports.Set("CANFD_FILTER_RULE", _exports_CANFD_FILTER_RULE_ctor);
if (SWIGTYPE_p_CANFD_FILTER_RULE->clientdata == nullptr) {
  SWIGTYPE_p_CANFD_FILTER_RULE->clientdata = new size_t(10);
}
Napi::FunctionReference *_exports_CANFD_FILTER_RULE_ctor_ref = new Napi::FunctionReference();
*_exports_CANFD_FILTER_RULE_ctor_ref = Napi::Persistent(_exports_CANFD_FILTER_RULE_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[10] = _exports_CANFD_FILTER_RULE_ctor_ref;
/* Class: CANFD_FILTER_CFG (_exports_CANFD_FILTER_CFG) */
// jsnapi_registerclass
Napi::Function _exports_CANFD_FILTER_CFG_ctor = _exports_CANFD_FILTER_CFG_inst::GetClass(env);
exports.Set("CANFD_FILTER_CFG", _exports_CANFD_FILTER_CFG_ctor);
if (SWIGTYPE_p_CANFD_FILTER_CFG->clientdata == nullptr) {
  SWIGTYPE_p_CANFD_FILTER_CFG->clientdata = new size_t(11);
}
Napi::FunctionReference *_exports_CANFD_FILTER_CFG_ctor_ref = new Napi::FunctionReference();
*_exports_CANFD_FILTER_CFG_ctor_ref = Napi::Persistent(_exports_CANFD_FILTER_CFG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[11] = _exports_CANFD_FILTER_CFG_ctor_ref;
/* Class: ZCAN_DYNAMIC_CONFIG (_exports_ZCAN_DYNAMIC_CONFIG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_DYNAMIC_CONFIG_ctor = _exports_ZCAN_DYNAMIC_CONFIG_inst::GetClass(env);
exports.Set("ZCAN_DYNAMIC_CONFIG", _exports_ZCAN_DYNAMIC_CONFIG_ctor);
if (SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_DYNAMIC_CONFIG->clientdata = new size_t(12);
}
Napi::FunctionReference *_exports_ZCAN_DYNAMIC_CONFIG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_DYNAMIC_CONFIG_ctor_ref = Napi::Persistent(_exports_ZCAN_DYNAMIC_CONFIG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[12] = _exports_ZCAN_DYNAMIC_CONFIG_ctor_ref;
/* Class: ZCAN_DEVICE_INFO (_exports_ZCAN_DEVICE_INFO) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_DEVICE_INFO_ctor = _exports_ZCAN_DEVICE_INFO_inst::GetClass(env);
exports.Set("ZCAN_DEVICE_INFO", _exports_ZCAN_DEVICE_INFO_ctor);
if (SWIGTYPE_p_tagZCAN_DEVICE_INFO->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_DEVICE_INFO->clientdata = new size_t(13);
}
Napi::FunctionReference *_exports_ZCAN_DEVICE_INFO_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_DEVICE_INFO_ctor_ref = Napi::Persistent(_exports_ZCAN_DEVICE_INFO_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[13] = _exports_ZCAN_DEVICE_INFO_ctor_ref;
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN", _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor);
if (SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN->clientdata == nullptr) {
  SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN->clientdata = new size_t(14);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[14] = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor_ref;
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD", _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor);
if (SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD->clientdata == nullptr) {
  SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD->clientdata = new size_t(15);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[15] = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor_ref;
/* Class: ZCAN_CHANNEL_INIT_CONFIG_INFO (_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_INIT_CONFIG_INFO", _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor);
if (SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO->clientdata == nullptr) {
  SWIGTYPE_p_ZCAN_CHANNEL_INIT_CONFIG_INFO->clientdata = new size_t(16);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[16] = _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor_ref;
/* Class: ZCAN_CHANNEL_INIT_CONFIG (_exports_ZCAN_CHANNEL_INIT_CONFIG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_INIT_CONFIG_ctor = _exports_ZCAN_CHANNEL_INIT_CONFIG_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_INIT_CONFIG", _exports_ZCAN_CHANNEL_INIT_CONFIG_ctor);
if (SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_CHANNEL_INIT_CONFIG->clientdata = new size_t(17);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_INIT_CONFIG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_INIT_CONFIG_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_INIT_CONFIG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[17] = _exports_ZCAN_CHANNEL_INIT_CONFIG_ctor_ref;
/* Class: ZCAN_CHANNEL_ERR_INFO (_exports_ZCAN_CHANNEL_ERR_INFO) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_ERR_INFO_ctor = _exports_ZCAN_CHANNEL_ERR_INFO_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_ERR_INFO", _exports_ZCAN_CHANNEL_ERR_INFO_ctor);
if (SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_CHANNEL_ERR_INFO->clientdata = new size_t(18);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_ERR_INFO_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_ERR_INFO_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_ERR_INFO_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[18] = _exports_ZCAN_CHANNEL_ERR_INFO_ctor_ref;
/* Class: ZCAN_CHANNEL_STATUS (_exports_ZCAN_CHANNEL_STATUS) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_CHANNEL_STATUS_ctor = _exports_ZCAN_CHANNEL_STATUS_inst::GetClass(env);
exports.Set("ZCAN_CHANNEL_STATUS", _exports_ZCAN_CHANNEL_STATUS_ctor);
if (SWIGTYPE_p_tagZCAN_CHANNEL_STATUS->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_CHANNEL_STATUS->clientdata = new size_t(19);
}
Napi::FunctionReference *_exports_ZCAN_CHANNEL_STATUS_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_CHANNEL_STATUS_ctor_ref = Napi::Persistent(_exports_ZCAN_CHANNEL_STATUS_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[19] = _exports_ZCAN_CHANNEL_STATUS_ctor_ref;
/* Class: ZCAN_Transmit_Data (_exports_ZCAN_Transmit_Data) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_Transmit_Data_ctor = _exports_ZCAN_Transmit_Data_inst::GetClass(env);
exports.Set("ZCAN_Transmit_Data", _exports_ZCAN_Transmit_Data_ctor);
if (SWIGTYPE_p_tagZCAN_Transmit_Data->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_Transmit_Data->clientdata = new size_t(20);
}
Napi::FunctionReference *_exports_ZCAN_Transmit_Data_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_Transmit_Data_ctor_ref = Napi::Persistent(_exports_ZCAN_Transmit_Data_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[20] = _exports_ZCAN_Transmit_Data_ctor_ref;
/* Class: ZCAN_Receive_Data (_exports_ZCAN_Receive_Data) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_Receive_Data_ctor = _exports_ZCAN_Receive_Data_inst::GetClass(env);
exports.Set("ZCAN_Receive_Data", _exports_ZCAN_Receive_Data_ctor);
if (SWIGTYPE_p_tagZCAN_Receive_Data->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_Receive_Data->clientdata = new size_t(21);
}
Napi::FunctionReference *_exports_ZCAN_Receive_Data_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_Receive_Data_ctor_ref = Napi::Persistent(_exports_ZCAN_Receive_Data_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[21] = _exports_ZCAN_Receive_Data_ctor_ref;
/* Class: ZCAN_TransmitFD_Data (_exports_ZCAN_TransmitFD_Data) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_TransmitFD_Data_ctor = _exports_ZCAN_TransmitFD_Data_inst::GetClass(env);
exports.Set("ZCAN_TransmitFD_Data", _exports_ZCAN_TransmitFD_Data_ctor);
if (SWIGTYPE_p_tagZCAN_TransmitFD_Data->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_TransmitFD_Data->clientdata = new size_t(22);
}
Napi::FunctionReference *_exports_ZCAN_TransmitFD_Data_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_TransmitFD_Data_ctor_ref = Napi::Persistent(_exports_ZCAN_TransmitFD_Data_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[22] = _exports_ZCAN_TransmitFD_Data_ctor_ref;
/* Class: ZCAN_ReceiveFD_Data (_exports_ZCAN_ReceiveFD_Data) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_ReceiveFD_Data_ctor = _exports_ZCAN_ReceiveFD_Data_inst::GetClass(env);
exports.Set("ZCAN_ReceiveFD_Data", _exports_ZCAN_ReceiveFD_Data_ctor);
if (SWIGTYPE_p_tagZCAN_ReceiveFD_Data->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_ReceiveFD_Data->clientdata = new size_t(23);
}
Napi::FunctionReference *_exports_ZCAN_ReceiveFD_Data_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_ReceiveFD_Data_ctor_ref = Napi::Persistent(_exports_ZCAN_ReceiveFD_Data_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[23] = _exports_ZCAN_ReceiveFD_Data_ctor_ref;
/* Class: ZCAN_AUTO_TRANSMIT_OBJ (_exports_ZCAN_AUTO_TRANSMIT_OBJ) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor = _exports_ZCAN_AUTO_TRANSMIT_OBJ_inst::GetClass(env);
exports.Set("ZCAN_AUTO_TRANSMIT_OBJ", _exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor);
if (SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ->clientdata = new size_t(24);
}
Napi::FunctionReference *_exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor_ref = Napi::Persistent(_exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[24] = _exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor_ref;
/* Class: ZCANFD_AUTO_TRANSMIT_OBJ (_exports_ZCANFD_AUTO_TRANSMIT_OBJ) */
// jsnapi_registerclass
Napi::Function _exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor = _exports_ZCANFD_AUTO_TRANSMIT_OBJ_inst::GetClass(env);
exports.Set("ZCANFD_AUTO_TRANSMIT_OBJ", _exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor);
if (SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANFD_AUTO_TRANSMIT_OBJ->clientdata = new size_t(25);
}
Napi::FunctionReference *_exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor_ref = Napi::Persistent(_exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[25] = _exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor_ref;
/* Class: ZCAN_AUTO_TRANSMIT_OBJ_PARAM (_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor = _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_inst::GetClass(env);
exports.Set("ZCAN_AUTO_TRANSMIT_OBJ_PARAM", _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor);
if (SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM->clientdata == nullptr) {
  SWIGTYPE_p_tagZCAN_AUTO_TRANSMIT_OBJ_PARAM->clientdata = new size_t(26);
}
Napi::FunctionReference *_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor_ref = Napi::Persistent(_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[26] = _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor_ref;
/* Class: ZCLOUD_CHNINFO (_exports_ZCLOUD_CHNINFO) */
// jsnapi_registerclass
Napi::Function _exports_ZCLOUD_CHNINFO_ctor = _exports_ZCLOUD_CHNINFO_inst::GetClass(env);
exports.Set("ZCLOUD_CHNINFO", _exports_ZCLOUD_CHNINFO_ctor);
if (SWIGTYPE_p_tagZCLOUD_CHNINFO->clientdata == nullptr) {
  SWIGTYPE_p_tagZCLOUD_CHNINFO->clientdata = new size_t(27);
}
Napi::FunctionReference *_exports_ZCLOUD_CHNINFO_ctor_ref = new Napi::FunctionReference();
*_exports_ZCLOUD_CHNINFO_ctor_ref = Napi::Persistent(_exports_ZCLOUD_CHNINFO_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[27] = _exports_ZCLOUD_CHNINFO_ctor_ref;
/* Class: ZCLOUD_DEVINFO (_exports_ZCLOUD_DEVINFO) */
// jsnapi_registerclass
Napi::Function _exports_ZCLOUD_DEVINFO_ctor = _exports_ZCLOUD_DEVINFO_inst::GetClass(env);
exports.Set("ZCLOUD_DEVINFO", _exports_ZCLOUD_DEVINFO_ctor);
if (SWIGTYPE_p_tagZCLOUD_DEVINFO->clientdata == nullptr) {
  SWIGTYPE_p_tagZCLOUD_DEVINFO->clientdata = new size_t(28);
}
Napi::FunctionReference *_exports_ZCLOUD_DEVINFO_ctor_ref = new Napi::FunctionReference();
*_exports_ZCLOUD_DEVINFO_ctor_ref = Napi::Persistent(_exports_ZCLOUD_DEVINFO_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[28] = _exports_ZCLOUD_DEVINFO_ctor_ref;
/* Class: ZCLOUD_USER_DATA (_exports_ZCLOUD_USER_DATA) */
// jsnapi_registerclass
Napi::Function _exports_ZCLOUD_USER_DATA_ctor = _exports_ZCLOUD_USER_DATA_inst::GetClass(env);
exports.Set("ZCLOUD_USER_DATA", _exports_ZCLOUD_USER_DATA_ctor);
if (SWIGTYPE_p_tagZCLOUD_USER_DATA->clientdata == nullptr) {
  SWIGTYPE_p_tagZCLOUD_USER_DATA->clientdata = new size_t(29);
}
Napi::FunctionReference *_exports_ZCLOUD_USER_DATA_ctor_ref = new Napi::FunctionReference();
*_exports_ZCLOUD_USER_DATA_ctor_ref = Napi::Persistent(_exports_ZCLOUD_USER_DATA_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[29] = _exports_ZCLOUD_USER_DATA_ctor_ref;
/* Class: ZCLOUD_GPS_FRAME (_exports_ZCLOUD_GPS_FRAME) */
// jsnapi_registerclass
Napi::Function _exports_ZCLOUD_GPS_FRAME_ctor = _exports_ZCLOUD_GPS_FRAME_inst::GetClass(env);
exports.Set("ZCLOUD_GPS_FRAME", _exports_ZCLOUD_GPS_FRAME_ctor);
if (SWIGTYPE_p_tagZCLOUD_GPS_FRAME->clientdata == nullptr) {
  SWIGTYPE_p_tagZCLOUD_GPS_FRAME->clientdata = new size_t(30);
}
Napi::FunctionReference *_exports_ZCLOUD_GPS_FRAME_ctor_ref = new Napi::FunctionReference();
*_exports_ZCLOUD_GPS_FRAME_ctor_ref = Napi::Persistent(_exports_ZCLOUD_GPS_FRAME_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[30] = _exports_ZCLOUD_GPS_FRAME_ctor_ref;
/* Class: USBCANFDTxTimeStamp (_exports_USBCANFDTxTimeStamp) */
// jsnapi_registerclass
Napi::Function _exports_USBCANFDTxTimeStamp_ctor = _exports_USBCANFDTxTimeStamp_inst::GetClass(env);
exports.Set("USBCANFDTxTimeStamp", _exports_USBCANFDTxTimeStamp_ctor);
if (SWIGTYPE_p_tagUSBCANFDTxTimeStamp->clientdata == nullptr) {
  SWIGTYPE_p_tagUSBCANFDTxTimeStamp->clientdata = new size_t(31);
}
Napi::FunctionReference *_exports_USBCANFDTxTimeStamp_ctor_ref = new Napi::FunctionReference();
*_exports_USBCANFDTxTimeStamp_ctor_ref = Napi::Persistent(_exports_USBCANFDTxTimeStamp_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[31] = _exports_USBCANFDTxTimeStamp_ctor_ref;
/* Class: TxTimeStamp (_exports_TxTimeStamp) */
// jsnapi_registerclass
Napi::Function _exports_TxTimeStamp_ctor = _exports_TxTimeStamp_inst::GetClass(env);
exports.Set("TxTimeStamp", _exports_TxTimeStamp_ctor);
if (SWIGTYPE_p_tagTxTimeStamp->clientdata == nullptr) {
  SWIGTYPE_p_tagTxTimeStamp->clientdata = new size_t(32);
}
Napi::FunctionReference *_exports_TxTimeStamp_ctor_ref = new Napi::FunctionReference();
*_exports_TxTimeStamp_ctor_ref = Napi::Persistent(_exports_TxTimeStamp_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[32] = _exports_TxTimeStamp_ctor_ref;
/* Class: BusUsage (_exports_BusUsage) */
// jsnapi_registerclass
Napi::Function _exports_BusUsage_ctor = _exports_BusUsage_inst::GetClass(env);
exports.Set("BusUsage", _exports_BusUsage_ctor);
if (SWIGTYPE_p_tagBusUsage->clientdata == nullptr) {
  SWIGTYPE_p_tagBusUsage->clientdata = new size_t(33);
}
Napi::FunctionReference *_exports_BusUsage_ctor_ref = new Napi::FunctionReference();
*_exports_BusUsage_ctor_ref = Napi::Persistent(_exports_BusUsage_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[33] = _exports_BusUsage_ctor_ref;
/* Class: ZCANCANFDData (_exports_ZCANCANFDData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANCANFDData_ctor = _exports_ZCANCANFDData_inst::GetClass(env);
exports.Set("ZCANCANFDData", _exports_ZCANCANFDData_ctor);
if (SWIGTYPE_p_tagZCANCANFDData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANCANFDData->clientdata = new size_t(34);
}
Napi::FunctionReference *_exports_ZCANCANFDData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANCANFDData_ctor_ref = Napi::Persistent(_exports_ZCANCANFDData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[34] = _exports_ZCANCANFDData_ctor_ref;
/* Class: ZCANErrorData (_exports_ZCANErrorData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANErrorData_ctor = _exports_ZCANErrorData_inst::GetClass(env);
exports.Set("ZCANErrorData", _exports_ZCANErrorData_ctor);
if (SWIGTYPE_p_tagZCANErrorData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANErrorData->clientdata = new size_t(35);
}
Napi::FunctionReference *_exports_ZCANErrorData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANErrorData_ctor_ref = Napi::Persistent(_exports_ZCANErrorData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[35] = _exports_ZCANErrorData_ctor_ref;
/* Class: ZCANGPSData (_exports_ZCANGPSData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANGPSData_ctor = _exports_ZCANGPSData_inst::GetClass(env);
exports.Set("ZCANGPSData", _exports_ZCANGPSData_ctor);
if (SWIGTYPE_p_tagZCANGPSData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANGPSData->clientdata = new size_t(36);
}
Napi::FunctionReference *_exports_ZCANGPSData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANGPSData_ctor_ref = Napi::Persistent(_exports_ZCANGPSData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[36] = _exports_ZCANGPSData_ctor_ref;
/* Class: ZCANLINData (_exports_ZCANLINData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANLINData_ctor = _exports_ZCANLINData_inst::GetClass(env);
exports.Set("ZCANLINData", _exports_ZCANLINData_ctor);
if (SWIGTYPE_p_tagZCANLINData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANLINData->clientdata = new size_t(37);
}
Napi::FunctionReference *_exports_ZCANLINData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANLINData_ctor_ref = Napi::Persistent(_exports_ZCANLINData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[37] = _exports_ZCANLINData_ctor_ref;
/* Class: ZCANLINErrData (_exports_ZCANLINErrData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANLINErrData_ctor = _exports_ZCANLINErrData_inst::GetClass(env);
exports.Set("ZCANLINErrData", _exports_ZCANLINErrData_ctor);
if (SWIGTYPE_p_tagZCANLINErrData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANLINErrData->clientdata = new size_t(38);
}
Napi::FunctionReference *_exports_ZCANLINErrData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANLINErrData_ctor_ref = Napi::Persistent(_exports_ZCANLINErrData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[38] = _exports_ZCANLINErrData_ctor_ref;
/* Class: ZCANLINEventData (_exports_ZCANLINEventData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANLINEventData_ctor = _exports_ZCANLINEventData_inst::GetClass(env);
exports.Set("ZCANLINEventData", _exports_ZCANLINEventData_ctor);
if (SWIGTYPE_p_tagZCANLINEventData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANLINEventData->clientdata = new size_t(39);
}
Napi::FunctionReference *_exports_ZCANLINEventData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANLINEventData_ctor_ref = Napi::Persistent(_exports_ZCANLINEventData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[39] = _exports_ZCANLINEventData_ctor_ref;
/* Class: ZCANLINExData (_exports_ZCANLINExData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANLINExData_ctor = _exports_ZCANLINExData_inst::GetClass(env);
exports.Set("ZCANLINExData", _exports_ZCANLINExData_ctor);
if (SWIGTYPE_p_tagZCANLINExData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANLINExData->clientdata = new size_t(40);
}
Napi::FunctionReference *_exports_ZCANLINExData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANLINExData_ctor_ref = Napi::Persistent(_exports_ZCANLINExData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[40] = _exports_ZCANLINExData_ctor_ref;
/* Class: ZCANDataObj (_exports_ZCANDataObj) */
// jsnapi_registerclass
Napi::Function _exports_ZCANDataObj_ctor = _exports_ZCANDataObj_inst::GetClass(env);
exports.Set("ZCANDataObj", _exports_ZCANDataObj_ctor);
if (SWIGTYPE_p_tagZCANDataObj->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANDataObj->clientdata = new size_t(41);
}
Napi::FunctionReference *_exports_ZCANDataObj_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANDataObj_ctor_ref = Napi::Persistent(_exports_ZCANDataObj_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[41] = _exports_ZCANDataObj_ctor_ref;
/* Class: ZCAN_LIN_MSG (_exports_ZCAN_LIN_MSG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_LIN_MSG_ctor = _exports_ZCAN_LIN_MSG_inst::GetClass(env);
exports.Set("ZCAN_LIN_MSG", _exports_ZCAN_LIN_MSG_ctor);
if (SWIGTYPE_p__VCI_LIN_MSG->clientdata == nullptr) {
  SWIGTYPE_p__VCI_LIN_MSG->clientdata = new size_t(42);
}
Napi::FunctionReference *_exports_ZCAN_LIN_MSG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_LIN_MSG_ctor_ref = Napi::Persistent(_exports_ZCAN_LIN_MSG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[42] = _exports_ZCAN_LIN_MSG_ctor_ref;
/* Class: ZCAN_LIN_INIT_CONFIG (_exports_ZCAN_LIN_INIT_CONFIG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_LIN_INIT_CONFIG_ctor = _exports_ZCAN_LIN_INIT_CONFIG_inst::GetClass(env);
exports.Set("ZCAN_LIN_INIT_CONFIG", _exports_ZCAN_LIN_INIT_CONFIG_ctor);
if (SWIGTYPE_p__VCI_LIN_INIT_CONFIG->clientdata == nullptr) {
  SWIGTYPE_p__VCI_LIN_INIT_CONFIG->clientdata = new size_t(43);
}
Napi::FunctionReference *_exports_ZCAN_LIN_INIT_CONFIG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_LIN_INIT_CONFIG_ctor_ref = Napi::Persistent(_exports_ZCAN_LIN_INIT_CONFIG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[43] = _exports_ZCAN_LIN_INIT_CONFIG_ctor_ref;
/* Class: ZCAN_LIN_PUBLISH_CFG (_exports_ZCAN_LIN_PUBLISH_CFG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_LIN_PUBLISH_CFG_ctor = _exports_ZCAN_LIN_PUBLISH_CFG_inst::GetClass(env);
exports.Set("ZCAN_LIN_PUBLISH_CFG", _exports_ZCAN_LIN_PUBLISH_CFG_ctor);
if (SWIGTYPE_p__VCI_LIN_PUBLISH_CFG->clientdata == nullptr) {
  SWIGTYPE_p__VCI_LIN_PUBLISH_CFG->clientdata = new size_t(44);
}
Napi::FunctionReference *_exports_ZCAN_LIN_PUBLISH_CFG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_LIN_PUBLISH_CFG_ctor_ref = Napi::Persistent(_exports_ZCAN_LIN_PUBLISH_CFG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[44] = _exports_ZCAN_LIN_PUBLISH_CFG_ctor_ref;
/* Class: ZCAN_LIN_PUBLISH_CFG_EX (_exports_ZCAN_LIN_PUBLISH_CFG_EX) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor = _exports_ZCAN_LIN_PUBLISH_CFG_EX_inst::GetClass(env);
exports.Set("ZCAN_LIN_PUBLISH_CFG_EX", _exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor);
if (SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX->clientdata == nullptr) {
  SWIGTYPE_p__VCI_LIN_PUBLISH_CFG_EX->clientdata = new size_t(45);
}
Napi::FunctionReference *_exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor_ref = Napi::Persistent(_exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[45] = _exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor_ref;
/* Class: ZCAN_LIN_SUBSCIBE_CFG (_exports_ZCAN_LIN_SUBSCIBE_CFG) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_LIN_SUBSCIBE_CFG_ctor = _exports_ZCAN_LIN_SUBSCIBE_CFG_inst::GetClass(env);
exports.Set("ZCAN_LIN_SUBSCIBE_CFG", _exports_ZCAN_LIN_SUBSCIBE_CFG_ctor);
if (SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG->clientdata == nullptr) {
  SWIGTYPE_p__VCI_LIN_SUBSCIBE_CFG->clientdata = new size_t(46);
}
Napi::FunctionReference *_exports_ZCAN_LIN_SUBSCIBE_CFG_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_LIN_SUBSCIBE_CFG_ctor_ref = Napi::Persistent(_exports_ZCAN_LIN_SUBSCIBE_CFG_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[46] = _exports_ZCAN_LIN_SUBSCIBE_CFG_ctor_ref;
/* Class: ZCAN_UDS_REQUEST (_exports_ZCAN_UDS_REQUEST) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_UDS_REQUEST_ctor = _exports_ZCAN_UDS_REQUEST_inst::GetClass(env);
exports.Set("ZCAN_UDS_REQUEST", _exports_ZCAN_UDS_REQUEST_ctor);
if (SWIGTYPE_p__ZCAN_UDS_REQUEST->clientdata == nullptr) {
  SWIGTYPE_p__ZCAN_UDS_REQUEST->clientdata = new size_t(47);
}
Napi::FunctionReference *_exports_ZCAN_UDS_REQUEST_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_UDS_REQUEST_ctor_ref = Napi::Persistent(_exports_ZCAN_UDS_REQUEST_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[47] = _exports_ZCAN_UDS_REQUEST_ctor_ref;
/* Class: ZLIN_UDS_REQUEST (_exports_ZLIN_UDS_REQUEST) */
// jsnapi_registerclass
Napi::Function _exports_ZLIN_UDS_REQUEST_ctor = _exports_ZLIN_UDS_REQUEST_inst::GetClass(env);
exports.Set("ZLIN_UDS_REQUEST", _exports_ZLIN_UDS_REQUEST_ctor);
if (SWIGTYPE_p__ZLIN_UDS_REQUEST->clientdata == nullptr) {
  SWIGTYPE_p__ZLIN_UDS_REQUEST->clientdata = new size_t(48);
}
Napi::FunctionReference *_exports_ZLIN_UDS_REQUEST_ctor_ref = new Napi::FunctionReference();
*_exports_ZLIN_UDS_REQUEST_ctor_ref = Napi::Persistent(_exports_ZLIN_UDS_REQUEST_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[48] = _exports_ZLIN_UDS_REQUEST_ctor_ref;
/* Class: ZDOIP_REQUEST (_exports_ZDOIP_REQUEST) */
// jsnapi_registerclass
Napi::Function _exports_ZDOIP_REQUEST_ctor = _exports_ZDOIP_REQUEST_inst::GetClass(env);
exports.Set("ZDOIP_REQUEST", _exports_ZDOIP_REQUEST_ctor);
if (SWIGTYPE_p__ZDOIP_REQUEST->clientdata == nullptr) {
  SWIGTYPE_p__ZDOIP_REQUEST->clientdata = new size_t(49);
}
Napi::FunctionReference *_exports_ZDOIP_REQUEST_ctor_ref = new Napi::FunctionReference();
*_exports_ZDOIP_REQUEST_ctor_ref = Napi::Persistent(_exports_ZDOIP_REQUEST_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[49] = _exports_ZDOIP_REQUEST_ctor_ref;
/* Class: ZCAN_UDS_RESPONSE (_exports_ZCAN_UDS_RESPONSE) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_UDS_RESPONSE_ctor = _exports_ZCAN_UDS_RESPONSE_inst::GetClass(env);
exports.Set("ZCAN_UDS_RESPONSE", _exports_ZCAN_UDS_RESPONSE_ctor);
if (SWIGTYPE_p__ZCAN_UDS_RESPONSE->clientdata == nullptr) {
  SWIGTYPE_p__ZCAN_UDS_RESPONSE->clientdata = new size_t(50);
}
Napi::FunctionReference *_exports_ZCAN_UDS_RESPONSE_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_UDS_RESPONSE_ctor_ref = Napi::Persistent(_exports_ZCAN_UDS_RESPONSE_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[50] = _exports_ZCAN_UDS_RESPONSE_ctor_ref;
/* Class: ZCAN_UDS_CTRL_REQ (_exports_ZCAN_UDS_CTRL_REQ) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_UDS_CTRL_REQ_ctor = _exports_ZCAN_UDS_CTRL_REQ_inst::GetClass(env);
exports.Set("ZCAN_UDS_CTRL_REQ", _exports_ZCAN_UDS_CTRL_REQ_ctor);
if (SWIGTYPE_p__ZCAN_UDS_CTRL_REQ->clientdata == nullptr) {
  SWIGTYPE_p__ZCAN_UDS_CTRL_REQ->clientdata = new size_t(51);
}
Napi::FunctionReference *_exports_ZCAN_UDS_CTRL_REQ_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_UDS_CTRL_REQ_ctor_ref = Napi::Persistent(_exports_ZCAN_UDS_CTRL_REQ_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[51] = _exports_ZCAN_UDS_CTRL_REQ_ctor_ref;
/* Class: ZCAN_UDS_CTRL_RESP (_exports_ZCAN_UDS_CTRL_RESP) */
// jsnapi_registerclass
Napi::Function _exports_ZCAN_UDS_CTRL_RESP_ctor = _exports_ZCAN_UDS_CTRL_RESP_inst::GetClass(env);
exports.Set("ZCAN_UDS_CTRL_RESP", _exports_ZCAN_UDS_CTRL_RESP_ctor);
if (SWIGTYPE_p__ZCAN_UDS_CTRL_RESP->clientdata == nullptr) {
  SWIGTYPE_p__ZCAN_UDS_CTRL_RESP->clientdata = new size_t(52);
}
Napi::FunctionReference *_exports_ZCAN_UDS_CTRL_RESP_ctor_ref = new Napi::FunctionReference();
*_exports_ZCAN_UDS_CTRL_RESP_ctor_ref = Napi::Persistent(_exports_ZCAN_UDS_CTRL_RESP_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[52] = _exports_ZCAN_UDS_CTRL_RESP_ctor_ref;
/* Class: ZCANCANFDUdsData (_exports_ZCANCANFDUdsData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANCANFDUdsData_ctor = _exports_ZCANCANFDUdsData_inst::GetClass(env);
exports.Set("ZCANCANFDUdsData", _exports_ZCANCANFDUdsData_ctor);
if (SWIGTYPE_p_tagZCANCANFDUdsData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANCANFDUdsData->clientdata = new size_t(53);
}
Napi::FunctionReference *_exports_ZCANCANFDUdsData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANCANFDUdsData_ctor_ref = Napi::Persistent(_exports_ZCANCANFDUdsData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[53] = _exports_ZCANCANFDUdsData_ctor_ref;
/* Class: ZCANLINUdsData (_exports_ZCANLINUdsData) */
// jsnapi_registerclass
Napi::Function _exports_ZCANLINUdsData_ctor = _exports_ZCANLINUdsData_inst::GetClass(env);
exports.Set("ZCANLINUdsData", _exports_ZCANLINUdsData_ctor);
if (SWIGTYPE_p_tagZCANLINUdsData->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANLINUdsData->clientdata = new size_t(54);
}
Napi::FunctionReference *_exports_ZCANLINUdsData_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANLINUdsData_ctor_ref = Napi::Persistent(_exports_ZCANLINUdsData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[54] = _exports_ZCANLINUdsData_ctor_ref;
/* Class: ZDoIPUdsData (_exports_ZDoIPUdsData) */
// jsnapi_registerclass
Napi::Function _exports_ZDoIPUdsData_ctor = _exports_ZDoIPUdsData_inst::GetClass(env);
exports.Set("ZDoIPUdsData", _exports_ZDoIPUdsData_ctor);
if (SWIGTYPE_p_tagZDoIPUdsData->clientdata == nullptr) {
  SWIGTYPE_p_tagZDoIPUdsData->clientdata = new size_t(55);
}
Napi::FunctionReference *_exports_ZDoIPUdsData_ctor_ref = new Napi::FunctionReference();
*_exports_ZDoIPUdsData_ctor_ref = Napi::Persistent(_exports_ZDoIPUdsData_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[55] = _exports_ZDoIPUdsData_ctor_ref;
/* Class: ZCANUdsRequestDataObj (_exports_ZCANUdsRequestDataObj) */
// jsnapi_registerclass
Napi::Function _exports_ZCANUdsRequestDataObj_ctor = _exports_ZCANUdsRequestDataObj_inst::GetClass(env);
exports.Set("ZCANUdsRequestDataObj", _exports_ZCANUdsRequestDataObj_ctor);
if (SWIGTYPE_p_tagZCANUdsRequestDataObj->clientdata == nullptr) {
  SWIGTYPE_p_tagZCANUdsRequestDataObj->clientdata = new size_t(56);
}
Napi::FunctionReference *_exports_ZCANUdsRequestDataObj_ctor_ref = new Napi::FunctionReference();
*_exports_ZCANUdsRequestDataObj_ctor_ref = Napi::Persistent(_exports_ZCANUdsRequestDataObj_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[56] = _exports_ZCANUdsRequestDataObj_ctor_ref;


  /* enable inheritance */
  
Napi::Value jsObjectValue, jsSetProtoValue;
Napi::Object jsObject;
Napi::Function setProto;
NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
setProto = jsSetProtoValue.As<Napi::Function>();



  /* setup inheritances */
  
// Inheritance for _exports_DEVICE_HANDLE (DEVICE_HANDLE) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_DEVICE_HANDLE_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_DEVICE_HANDLE_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_CHANNEL_HANDLE (CHANNEL_HANDLE) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_CHANNEL_HANDLE_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_CHANNEL_HANDLE_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_U32Array (U32Array) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_U32Array_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_U32Array_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ByteArray (ByteArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ByteArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ByteArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ReceiveDataArray (ReceiveDataArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ReceiveDataArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ReceiveDataArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ReceiveFDDataArray (ReceiveFDDataArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ReceiveFDDataArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ReceiveFDDataArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_can_frame (can_frame) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_can_frame_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_can_frame_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_canfd_frame (canfd_frame) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_canfd_frame_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_canfd_frame_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_DYNAMIC_CONFIG_DATA (ZCAN_DYNAMIC_CONFIG_DATA) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_DYNAMIC_CONFIG_DATA_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_unionCANFDFilterRulePresent (unionCANFDFilterRulePresent) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_unionCANFDFilterRulePresent_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_unionCANFDFilterRulePresent_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_CANFD_FILTER_RULE (CANFD_FILTER_RULE) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_CANFD_FILTER_RULE_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_CANFD_FILTER_RULE_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_CANFD_FILTER_CFG (CANFD_FILTER_CFG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_CANFD_FILTER_CFG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_CANFD_FILTER_CFG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_DYNAMIC_CONFIG (ZCAN_DYNAMIC_CONFIG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_DYNAMIC_CONFIG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_DYNAMIC_CONFIG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_DEVICE_INFO (ZCAN_DEVICE_INFO) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_DEVICE_INFO_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_DEVICE_INFO_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN (ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CAN_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD (ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_CANFD_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO (ZCAN_CHANNEL_INIT_CONFIG_INFO) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_INIT_CONFIG_INFO_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_INIT_CONFIG (ZCAN_CHANNEL_INIT_CONFIG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_INIT_CONFIG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_INIT_CONFIG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_ERR_INFO (ZCAN_CHANNEL_ERR_INFO) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_ERR_INFO_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_ERR_INFO_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_CHANNEL_STATUS (ZCAN_CHANNEL_STATUS) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_CHANNEL_STATUS_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_CHANNEL_STATUS_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_Transmit_Data (ZCAN_Transmit_Data) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_Transmit_Data_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_Transmit_Data_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_Receive_Data (ZCAN_Receive_Data) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_Receive_Data_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_Receive_Data_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_TransmitFD_Data (ZCAN_TransmitFD_Data) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_TransmitFD_Data_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_TransmitFD_Data_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_ReceiveFD_Data (ZCAN_ReceiveFD_Data) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_ReceiveFD_Data_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_ReceiveFD_Data_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_AUTO_TRANSMIT_OBJ (ZCAN_AUTO_TRANSMIT_OBJ) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_AUTO_TRANSMIT_OBJ_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANFD_AUTO_TRANSMIT_OBJ (ZCANFD_AUTO_TRANSMIT_OBJ) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANFD_AUTO_TRANSMIT_OBJ_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM (ZCAN_AUTO_TRANSMIT_OBJ_PARAM) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_AUTO_TRANSMIT_OBJ_PARAM_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCLOUD_CHNINFO (ZCLOUD_CHNINFO) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCLOUD_CHNINFO_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCLOUD_CHNINFO_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCLOUD_DEVINFO (ZCLOUD_DEVINFO) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCLOUD_DEVINFO_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCLOUD_DEVINFO_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCLOUD_USER_DATA (ZCLOUD_USER_DATA) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCLOUD_USER_DATA_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCLOUD_USER_DATA_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCLOUD_GPS_FRAME (ZCLOUD_GPS_FRAME) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCLOUD_GPS_FRAME_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCLOUD_GPS_FRAME_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_USBCANFDTxTimeStamp (USBCANFDTxTimeStamp) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_USBCANFDTxTimeStamp_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_USBCANFDTxTimeStamp_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_TxTimeStamp (TxTimeStamp) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TxTimeStamp_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TxTimeStamp_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_BusUsage (BusUsage) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_BusUsage_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_BusUsage_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANCANFDData (ZCANCANFDData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANCANFDData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANCANFDData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANErrorData (ZCANErrorData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANErrorData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANErrorData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANGPSData (ZCANGPSData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANGPSData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANGPSData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANLINData (ZCANLINData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANLINData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANLINData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANLINErrData (ZCANLINErrData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANLINErrData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANLINErrData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANLINEventData (ZCANLINEventData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANLINEventData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANLINEventData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANLINExData (ZCANLINExData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANLINExData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANLINExData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANDataObj (ZCANDataObj) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANDataObj_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANDataObj_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_LIN_MSG (ZCAN_LIN_MSG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_LIN_MSG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_LIN_MSG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_LIN_INIT_CONFIG (ZCAN_LIN_INIT_CONFIG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_LIN_INIT_CONFIG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_LIN_INIT_CONFIG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_LIN_PUBLISH_CFG (ZCAN_LIN_PUBLISH_CFG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_LIN_PUBLISH_CFG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_LIN_PUBLISH_CFG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_LIN_PUBLISH_CFG_EX (ZCAN_LIN_PUBLISH_CFG_EX) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_LIN_PUBLISH_CFG_EX_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_LIN_SUBSCIBE_CFG (ZCAN_LIN_SUBSCIBE_CFG) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_LIN_SUBSCIBE_CFG_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_LIN_SUBSCIBE_CFG_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_UDS_REQUEST (ZCAN_UDS_REQUEST) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_UDS_REQUEST_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_UDS_REQUEST_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZLIN_UDS_REQUEST (ZLIN_UDS_REQUEST) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZLIN_UDS_REQUEST_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZLIN_UDS_REQUEST_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZDOIP_REQUEST (ZDOIP_REQUEST) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZDOIP_REQUEST_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZDOIP_REQUEST_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_UDS_RESPONSE (ZCAN_UDS_RESPONSE) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_UDS_RESPONSE_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_UDS_RESPONSE_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_UDS_CTRL_REQ (ZCAN_UDS_CTRL_REQ) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_UDS_CTRL_REQ_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_UDS_CTRL_REQ_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCAN_UDS_CTRL_RESP (ZCAN_UDS_CTRL_RESP) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCAN_UDS_CTRL_RESP_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCAN_UDS_CTRL_RESP_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANCANFDUdsData (ZCANCANFDUdsData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANCANFDUdsData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANCANFDUdsData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANLINUdsData (ZCANLINUdsData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANLINUdsData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANLINUdsData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZDoIPUdsData (ZDoIPUdsData) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZDoIPUdsData_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZDoIPUdsData_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ZCANUdsRequestDataObj (ZCANUdsRequestDataObj) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ZCANUdsRequestDataObj_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ZCANUdsRequestDataObj_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_EFF_FLAG_get, JS_veto_set_variable>("CAN_EFF_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_RTR_FLAG_get, JS_veto_set_variable>("CAN_RTR_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_ERR_FLAG_get, JS_veto_set_variable>("CAN_ERR_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_ID_FLAG_get, JS_veto_set_variable>("CAN_ID_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_SFF_MASK_get, JS_veto_set_variable>("CAN_SFF_MASK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_EFF_MASK_get, JS_veto_set_variable>("CAN_EFF_MASK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_ERR_MASK_get, JS_veto_set_variable>("CAN_ERR_MASK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_SFF_ID_BITS_get, JS_veto_set_variable>("CAN_SFF_ID_BITS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_EFF_ID_BITS_get, JS_veto_set_variable>("CAN_EFF_ID_BITS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_MAX_DLC_get, JS_veto_set_variable>("CAN_MAX_DLC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_MAX_DLEN_get, JS_veto_set_variable>("CAN_MAX_DLEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_MAX_DLC_get, JS_veto_set_variable>("CANFD_MAX_DLC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_MAX_DLEN_get, JS_veto_set_variable>("CANFD_MAX_DLEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TX_DELAY_SEND_FLAG_get, JS_veto_set_variable>("TX_DELAY_SEND_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TX_DELAY_SEND_TIME_UNIT_FLAG_get, JS_veto_set_variable>("TX_DELAY_SEND_TIME_UNIT_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TX_ECHO_FLAG_get, JS_veto_set_variable>("TX_ECHO_FLAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_BRS_get, JS_veto_set_variable>("CANFD_BRS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_ESI_get, JS_veto_set_variable>("CANFD_ESI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI5121_get, JS_veto_set_variable>("ZCAN_PCI5121");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI9810_get, JS_veto_set_variable>("ZCAN_PCI9810");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN1_get, JS_veto_set_variable>("ZCAN_USBCAN1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN2_get, JS_veto_set_variable>("ZCAN_USBCAN2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI9820_get, JS_veto_set_variable>("ZCAN_PCI9820");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CAN232_get, JS_veto_set_variable>("ZCAN_CAN232");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI5110_get, JS_veto_set_variable>("ZCAN_PCI5110");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANLITE_get, JS_veto_set_variable>("ZCAN_CANLITE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ISA9620_get, JS_veto_set_variable>("ZCAN_ISA9620");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ISA5420_get, JS_veto_set_variable>("ZCAN_ISA5420");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PC104CAN_get, JS_veto_set_variable>("ZCAN_PC104CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANETUDP_get, JS_veto_set_variable>("ZCAN_CANETUDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANETE_get, JS_veto_set_variable>("ZCAN_CANETE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DNP9810_get, JS_veto_set_variable>("ZCAN_DNP9810");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI9840_get, JS_veto_set_variable>("ZCAN_PCI9840");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PC104CAN2_get, JS_veto_set_variable>("ZCAN_PC104CAN2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI9820I_get, JS_veto_set_variable>("ZCAN_PCI9820I");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANETTCP_get, JS_veto_set_variable>("ZCAN_CANETTCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_9220_get, JS_veto_set_variable>("ZCAN_PCIE_9220");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI5010U_get, JS_veto_set_variable>("ZCAN_PCI5010U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN_E_U_get, JS_veto_set_variable>("ZCAN_USBCAN_E_U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN_2E_U_get, JS_veto_set_variable>("ZCAN_USBCAN_2E_U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCI5020U_get, JS_veto_set_variable>("ZCAN_PCI5020U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_EG20T_CAN_get, JS_veto_set_variable>("ZCAN_EG20T_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE9221_get, JS_veto_set_variable>("ZCAN_PCIE9221");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_WIFICAN_TCP_get, JS_veto_set_variable>("ZCAN_WIFICAN_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_WIFICAN_UDP_get, JS_veto_set_variable>("ZCAN_WIFICAN_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIe9120_get, JS_veto_set_variable>("ZCAN_PCIe9120");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIe9110_get, JS_veto_set_variable>("ZCAN_PCIe9110");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIe9140_get, JS_veto_set_variable>("ZCAN_PCIe9140");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN_4E_U_get, JS_veto_set_variable>("ZCAN_USBCAN_4E_U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANDTU_200UR_get, JS_veto_set_variable>("ZCAN_CANDTU_200UR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANDTU_MINI_get, JS_veto_set_variable>("ZCAN_CANDTU_MINI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCAN_8E_U_get, JS_veto_set_variable>("ZCAN_USBCAN_8E_U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANREPLAY_get, JS_veto_set_variable>("ZCAN_CANREPLAY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANDTU_NET_get, JS_veto_set_variable>("ZCAN_CANDTU_NET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANDTU_100UR_get, JS_veto_set_variable>("ZCAN_CANDTU_100UR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_100U_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_100U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_200U_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_200U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_400U_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_400U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCANFD_200U_get, JS_veto_set_variable>("ZCAN_USBCANFD_200U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCANFD_100U_get, JS_veto_set_variable>("ZCAN_USBCANFD_100U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCANFD_MINI_get, JS_veto_set_variable>("ZCAN_USBCANFD_MINI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDCOM_100IE_get, JS_veto_set_variable>("ZCAN_CANFDCOM_100IE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANSCOPE_get, JS_veto_set_variable>("ZCAN_CANSCOPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CLOUD_get, JS_veto_set_variable>("ZCAN_CLOUD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANDTU_NET_400_get, JS_veto_set_variable>("ZCAN_CANDTU_NET_400");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_TCP_get, JS_veto_set_variable>("ZCAN_CANFDNET_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_200U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDNET_200U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_UDP_get, JS_veto_set_variable>("ZCAN_CANFDNET_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_200U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDNET_200U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_TCP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_100U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_100U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_UDP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_100U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_100U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_400U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDNET_400U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_400U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDNET_400U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDBLUE_200U_get, JS_veto_set_variable>("ZCAN_CANFDBLUE_200U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_100U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDNET_100U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_100U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDNET_100U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_800U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDNET_800U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDNET_800U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDNET_800U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCANFD_800U_get, JS_veto_set_variable>("ZCAN_USBCANFD_800U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_100U_EX_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_100U_EX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_400U_EX_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_400U_EX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_200U_MINI_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_200U_MINI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_PCIE_CANFD_200U_M2_get, JS_veto_set_variable>("ZCAN_PCIE_CANFD_200U_M2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_400_TCP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_400_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_400_UDP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_400_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_200U_TCP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_200U_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDWIFI_200U_UDP_get, JS_veto_set_variable>("ZCAN_CANFDWIFI_200U_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_800ER_TCP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_800ER_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_800ER_UDP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_800ER_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_800EWGR_TCP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_800EWGR_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_800EWGR_UDP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_800EWGR_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_600EWGR_TCP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_600EWGR_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_600EWGR_UDP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_600EWGR_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_CASCADE_TCP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_CASCADE_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_CASCADE_UDP_get, JS_veto_set_variable>("ZCAN_CANFDDTU_CASCADE_UDP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_USBCANFD_400U_get, JS_veto_set_variable>("ZCAN_USBCANFD_400U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDDTU_200U_get, JS_veto_set_variable>("ZCAN_CANFDDTU_200U");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ZPSCANFD_TCP_get, JS_veto_set_variable>("ZCAN_ZPSCANFD_TCP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ZPSCANFD_USB_get, JS_veto_set_variable>("ZCAN_ZPSCANFD_USB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CANFDBRIDGE_PLUS_get, JS_veto_set_variable>("ZCAN_CANFDBRIDGE_PLUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_OFFLINE_DEVICE_get, JS_veto_set_variable>("ZCAN_OFFLINE_DEVICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_VIRTUAL_DEVICE_get, JS_veto_set_variable>("ZCAN_VIRTUAL_DEVICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_OVERFLOW_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_ERRALARM_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_ERRALARM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_PASSIVE_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_PASSIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_LOSE_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_LOSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_BUSERR_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_BUSERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_BUSOFF_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_BUSOFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CAN_BUFFER_OVERFLOW_get, JS_veto_set_variable>("ZCAN_ERROR_CAN_BUFFER_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_DEVICEOPENED_get, JS_veto_set_variable>("ZCAN_ERROR_DEVICEOPENED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_DEVICEOPEN_get, JS_veto_set_variable>("ZCAN_ERROR_DEVICEOPEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_DEVICENOTOPEN_get, JS_veto_set_variable>("ZCAN_ERROR_DEVICENOTOPEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_BUFFEROVERFLOW_get, JS_veto_set_variable>("ZCAN_ERROR_BUFFEROVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_DEVICENOTEXIST_get, JS_veto_set_variable>("ZCAN_ERROR_DEVICENOTEXIST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_LOADKERNELDLL_get, JS_veto_set_variable>("ZCAN_ERROR_LOADKERNELDLL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CMDFAILED_get, JS_veto_set_variable>("ZCAN_ERROR_CMDFAILED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_BUFFERCREATE_get, JS_veto_set_variable>("ZCAN_ERROR_BUFFERCREATE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CANETE_PORTOPENED_get, JS_veto_set_variable>("ZCAN_ERROR_CANETE_PORTOPENED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CANETE_INDEXUSED_get, JS_veto_set_variable>("ZCAN_ERROR_CANETE_INDEXUSED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_REF_TYPE_ID_get, JS_veto_set_variable>("ZCAN_ERROR_REF_TYPE_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_CREATE_SOCKET_get, JS_veto_set_variable>("ZCAN_ERROR_CREATE_SOCKET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_OPEN_CONNECT_get, JS_veto_set_variable>("ZCAN_ERROR_OPEN_CONNECT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_NO_STARTUP_get, JS_veto_set_variable>("ZCAN_ERROR_NO_STARTUP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_NO_CONNECTED_get, JS_veto_set_variable>("ZCAN_ERROR_NO_CONNECTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_SEND_PARTIAL_get, JS_veto_set_variable>("ZCAN_ERROR_SEND_PARTIAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERROR_SEND_TOO_FAST_get, JS_veto_set_variable>("ZCAN_ERROR_SEND_TOO_FAST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_ERR_get, JS_veto_set_variable>("STATUS_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_OK_get, JS_veto_set_variable>("STATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_ONLINE_get, JS_veto_set_variable>("STATUS_ONLINE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_OFFLINE_get, JS_veto_set_variable>("STATUS_OFFLINE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_UNSUPPORTED_get, JS_veto_set_variable>("STATUS_UNSUPPORTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STATUS_BUFFER_TOO_SMALL_get, JS_veto_set_variable>("STATUS_BUFFER_TOO_SMALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DEF_CAN_UDS_DATA_get, JS_veto_set_variable>("DEF_CAN_UDS_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DEF_LIN_UDS_DATA_get, JS_veto_set_variable>("DEF_LIN_UDS_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DEF_DOIP_UDS_DATA_get, JS_veto_set_variable>("DEF_DOIP_UDS_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_DESIP_get, JS_veto_set_variable>("CMD_DESIP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_DESPORT_get, JS_veto_set_variable>("CMD_DESPORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_CHGDESIPANDPORT_get, JS_veto_set_variable>("CMD_CHGDESIPANDPORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_SRCPORT_get, JS_veto_set_variable>("CMD_SRCPORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_TCP_TYPE_get, JS_veto_set_variable>("CMD_TCP_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TCP_CLIENT_get, JS_veto_set_variable>("TCP_CLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TCP_SERVER_get, JS_veto_set_variable>("TCP_SERVER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_CLIENT_COUNT_get, JS_veto_set_variable>("CMD_CLIENT_COUNT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_CLIENT_get, JS_veto_set_variable>("CMD_CLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_DISCONN_CLINET_get, JS_veto_set_variable>("CMD_DISCONN_CLINET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CMD_SET_RECONNECT_TIME_get, JS_veto_set_variable>("CMD_SET_RECONNECT_TIME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TYPE_CAN_get, JS_veto_set_variable>("TYPE_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TYPE_CANFD_get, JS_veto_set_variable>("TYPE_CANFD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TYPE_ALL_DATA_get, JS_veto_set_variable>("TYPE_ALL_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_DEVNAME_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_DEVNAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_ENABLE_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_ENABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_MODE_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_TXATTEMPTS_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_TXATTEMPTS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_NOMINALBAUD_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_NOMINALBAUD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_DATABAUD_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_DATABAUD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_USERES_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_USERES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_SNDCFG_INTERVAL_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_SNDCFG_INTERVAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_ENABLE_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_ENABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_PERIOD_get, JS_veto_set_variable>("ZCAN_DYNAMIC_CONFIG_CAN_BUSRATIO_PERIOD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_FILTER_COUNT_MAX_get, JS_veto_set_variable>("CANFD_FILTER_COUNT_MAX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_DATA_LEN_MAX_get, JS_veto_set_variable>("CANFD_DATA_LEN_MAX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DYNAMIC_CONFIG_CAN_get, JS_veto_set_variable>("DYNAMIC_CONFIG_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DYNAMIC_CONFIG_FILTER_get, JS_veto_set_variable>("DYNAMIC_CONFIG_FILTER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_FILTER_BLACK_LIST_get, JS_veto_set_variable>("CANFD_FILTER_BLACK_LIST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANFD_FILTER_WHITE_LIST_get, JS_veto_set_variable>("CANFD_FILTER_WHITE_LIST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCLOUD_MAX_DEVICES_get, JS_veto_set_variable>("ZCLOUD_MAX_DEVICES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCLOUD_MAX_CHANNEL_get, JS_veto_set_variable>("ZCLOUD_MAX_CHANNEL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERR_TYPE_NO_ERR_get, JS_veto_set_variable>("ZCAN_ERR_TYPE_NO_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERR_TYPE_BUS_ERR_get, JS_veto_set_variable>("ZCAN_ERR_TYPE_BUS_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERR_TYPE_CONTROLLER_ERR_get, JS_veto_set_variable>("ZCAN_ERR_TYPE_CONTROLLER_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_ERR_TYPE_DEVICE_ERR_get, JS_veto_set_variable>("ZCAN_ERR_TYPE_DEVICE_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_NODE_STATE_ACTIVE_get, JS_veto_set_variable>("ZCAN_NODE_STATE_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_NODE_STATE_WARNNING_get, JS_veto_set_variable>("ZCAN_NODE_STATE_WARNNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_NODE_STATE_PASSIVE_get, JS_veto_set_variable>("ZCAN_NODE_STATE_PASSIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_NODE_STATE_BUSOFF_get, JS_veto_set_variable>("ZCAN_NODE_STATE_BUSOFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_NO_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_NO_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_BIT_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_BIT_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_ACK_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_ACK_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_CRC_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_CRC_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_FORM_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_FORM_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_STUFF_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_STUFF_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_OVERLOAD_ERR_get, JS_veto_set_variable>("ZCAN_BUS_ERR_OVERLOAD_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_ARBITRATION_LOST_get, JS_veto_set_variable>("ZCAN_BUS_ERR_ARBITRATION_LOST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_BUS_ERR_NODE_STATE_CHAGE_get, JS_veto_set_variable>("ZCAN_BUS_ERR_NODE_STATE_CHAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CONTROLLER_RX_FIFO_OVERFLOW_get, JS_veto_set_variable>("ZCAN_CONTROLLER_RX_FIFO_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CONTROLLER_DRIVER_RX_BUFFER_OVERFLOW_get, JS_veto_set_variable>("ZCAN_CONTROLLER_DRIVER_RX_BUFFER_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CONTROLLER_DRIVER_TX_BUFFER_OVERFLOW_get, JS_veto_set_variable>("ZCAN_CONTROLLER_DRIVER_TX_BUFFER_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CONTROLLER_INTERNAL_ERROR_get, JS_veto_set_variable>("ZCAN_CONTROLLER_INTERNAL_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DEVICE_APP_RX_BUFFER_OVERFLOW_get, JS_veto_set_variable>("ZCAN_DEVICE_APP_RX_BUFFER_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DEVICE_APP_TX_BUFFER_OVERFLOW_get, JS_veto_set_variable>("ZCAN_DEVICE_APP_TX_BUFFER_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DEVICE_APP_AUTO_SEND_FAILED_get, JS_veto_set_variable>("ZCAN_DEVICE_APP_AUTO_SEND_FAILED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_CONTROLLER_TX_FRAME_INVALID_get, JS_veto_set_variable>("ZCAN_CONTROLLER_TX_FRAME_INVALID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_CAN_CANFD_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_CAN_CANFD_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_ERROR_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_ERROR_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_GPS_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_GPS_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_LIN_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_LIN_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_BUSUSAGE_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_BUSUSAGE_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_LIN_ERROR_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_LIN_ERROR_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_LIN_EX_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_LIN_EX_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DT_ZCAN_LIN_EVENT_DATA_get, JS_veto_set_variable>("ZCAN_DT_ZCAN_LIN_EVENT_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_TX_DELAY_NO_DELAY_get, JS_veto_set_variable>("ZCAN_TX_DELAY_NO_DELAY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_TX_DELAY_UNIT_MS_get, JS_veto_set_variable>("ZCAN_TX_DELAY_UNIT_MS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_TX_DELAY_UNIT_100US_get, JS_veto_set_variable>("ZCAN_TX_DELAY_UNIT_100US");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_LIN_WAKE_UP_get, JS_veto_set_variable>("ZCAN_LIN_WAKE_UP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_LIN_ENTERED_SLEEP_MODE_get, JS_veto_set_variable>("ZCAN_LIN_ENTERED_SLEEP_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_LIN_EXITED_SLEEP_MODE_get, JS_veto_set_variable>("ZCAN_LIN_EXITED_SLEEP_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DEFAULT_get, JS_veto_set_variable>("DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CLASSIC_CHKSUM_get, JS_veto_set_variable>("CLASSIC_CHKSUM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ENHANCE_CHKSUM_get, JS_veto_set_variable>("ENHANCE_CHKSUM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_AUTOMATIC_get, JS_veto_set_variable>("AUTOMATIC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_TRANS_VER_0_get, JS_veto_set_variable>("ZCAN_UDS_TRANS_VER_0");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_TRANS_VER_1_get, JS_veto_set_variable>("ZCAN_UDS_TRANS_VER_1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FRAME_CAN_get, JS_veto_set_variable>("ZCAN_UDS_FRAME_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FRAME_CANFD_get, JS_veto_set_variable>("ZCAN_UDS_FRAME_CANFD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FRAME_CANFD_BRS_get, JS_veto_set_variable>("ZCAN_UDS_FRAME_CANFD_BRS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FILL_MODE_SHORT_get, JS_veto_set_variable>("ZCAN_UDS_FILL_MODE_SHORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FILL_MODE_NONE_get, JS_veto_set_variable>("ZCAN_UDS_FILL_MODE_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_FILL_MODE_MAX_get, JS_veto_set_variable>("ZCAN_UDS_FILL_MODE_MAX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ACTIVATION_DEFAULT_get, JS_veto_set_variable>("ZCAN_DOIP_ACTIVATION_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ACTIVATION_WWH_OBD_get, JS_veto_set_variable>("ZCAN_DOIP_ACTIVATION_WWH_OBD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ACTIVATION_CENTRAL_SECURITY_get, JS_veto_set_variable>("ZCAN_DOIP_ACTIVATION_CENTRAL_SECURITY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ISO_13400_2_2010_get, JS_veto_set_variable>("ZCAN_DOIP_ISO_13400_2_2010");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ISO_13400_2_2012_get, JS_veto_set_variable>("ZCAN_DOIP_ISO_13400_2_2012");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_ISO_13400_2_2019_get, JS_veto_set_variable>("ZCAN_DOIP_ISO_13400_2_2019");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_DOIP_AUTO_DETECTED_VERSION_get, JS_veto_set_variable>("ZCAN_DOIP_AUTO_DETECTED_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_OK_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_TIMEOUT_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_TRANSPORT_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_TRANSPORT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_CANCEL_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_CANCEL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_SUPPRESS_RESPONSE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_SUPPRESS_RESPONSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_BUSY_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_BUSY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_REQ_PARAM_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_REQ_PARAM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_OTHTER_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_OTHTER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_FAILED_TO_CREATE_SOCKET_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_FAILED_TO_CREATE_SOCKET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_FAILED_TO_CONNECT_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_FAILED_TO_CONNECT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_TIMEOUT_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_ROUTING_NOT_ACTIVE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_ROUTING_NOT_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_BUFFER_TOO_SMALL_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_BUFFER_TOO_SMALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_ROUTING_ALREADY_ACTIVE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_ROUTING_ALREADY_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INCORRECT_PATTERN_FORMAT_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INCORRECT_PATTERN_FORMAT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN_PAYLOAD_TYPE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN_PAYLOAD_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_MESSAGE_TOO_LARGE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_MESSAGE_TOO_LARGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_OUT_OF_MEMORY_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_OUT_OF_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INVALID_PAYLOAD_LENGTH_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_INVALID_PAYLOAD_LENGTH");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_HEADER_NACK_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_INVALID_SOURCE_ADDRESS_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_INVALID_SOURCE_ADDRESS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_TARGET_ADDRESS_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_TARGET_ADDRESS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_MESSAGE_TOO_LARGE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_MESSAGE_TOO_LARGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_OUT_OF_MEMORY_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_OUT_OF_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TARGET_UNREACHABLE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TARGET_UNREACHABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_NETWORK_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_NETWORK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TRANSPORT_PROTOCOL_ERROR_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_TRANSPORT_PROTOCOL_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_DIAGNOSTIC_NACK_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_INVALID_HANDLE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_INVALID_HANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_UNEXPECTED_NULL_POINTER_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_UNEXPECTED_NULL_POINTER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_UNKNOWN_HANDLE_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_UNKNOWN_HANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_OUT_OF_MEMORY_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_OUT_OF_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_UNKNOWN_ERROR_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_UNKNOWN_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_ERROR_DOIP_ROUTING_ACTIVE_FAIL_get, JS_veto_set_variable>("ZCAN_UDS_ERROR_DOIP_ROUTING_ACTIVE_FAIL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_RT_NEGATIVE_get, JS_veto_set_variable>("ZCAN_UDS_RT_NEGATIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_RT_POSITIVE_get, JS_veto_set_variable>("ZCAN_UDS_RT_POSITIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_RT_NONE_get, JS_veto_set_variable>("ZCAN_UDS_RT_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_CTRL_STOP_REQ_get, JS_veto_set_variable>("ZCAN_UDS_CTRL_STOP_REQ");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_CTRL_RESULT_OK_get, JS_veto_set_variable>("ZCAN_UDS_CTRL_RESULT_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ZCAN_UDS_CTRL_RESULT_ERR_get, JS_veto_set_variable>("ZCAN_UDS_CTRL_RESULT_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_INVALID_DEVICE_HANDLE_get, JS_veto_set_variable>("INVALID_DEVICE_HANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_OpenDevice", _wrap_ZCAN_OpenDevice);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_CloseDevice", _wrap_ZCAN_CloseDevice);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_GetDeviceInf", _wrap_ZCAN_GetDeviceInf);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_IsDeviceOnLine", _wrap_ZCAN_IsDeviceOnLine);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_INVALID_CHANNEL_HANDLE_get, JS_veto_set_variable>("INVALID_CHANNEL_HANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_InitCAN", _wrap_ZCAN_InitCAN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_StartCAN", _wrap_ZCAN_StartCAN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ResetCAN", _wrap_ZCAN_ResetCAN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ClearBuffer", _wrap_ZCAN_ClearBuffer);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ReadChannelErrInfo", _wrap_ZCAN_ReadChannelErrInfo);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ReadChannelStatus", _wrap_ZCAN_ReadChannelStatus);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_GetReceiveNum", _wrap_ZCAN_GetReceiveNum);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_Transmit", _wrap_ZCAN_Transmit);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_Receive", _wrap_ZCAN_Receive);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_TransmitFD", _wrap_ZCAN_TransmitFD);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ReceiveFD", _wrap_ZCAN_ReceiveFD);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_TransmitData", _wrap_ZCAN_TransmitData);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ReceiveData", _wrap_ZCAN_ReceiveData);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_SetValue", _wrap_ZCAN_SetValue);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_GetValue", _wrap_ZCAN_GetValue);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetIProperty", _wrap_GetIProperty);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ReleaseIProperty", _wrap_ReleaseIProperty);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_SetServerInfo", _wrap_ZCLOUD_SetServerInfo);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_ConnectServer", _wrap_ZCLOUD_ConnectServer);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_IsConnected", _wrap_ZCLOUD_IsConnected);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_DisconnectServer", _wrap_ZCLOUD_DisconnectServer);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_GetUserData", _wrap_ZCLOUD_GetUserData);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCLOUD_ReceiveGPS", _wrap_ZCLOUD_ReceiveGPS);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_InitLIN", _wrap_ZCAN_InitLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_StartLIN", _wrap_ZCAN_StartLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ResetLIN", _wrap_ZCAN_ResetLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_TransmitLIN", _wrap_ZCAN_TransmitLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_GetLINReceiveNum", _wrap_ZCAN_GetLINReceiveNum);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ReceiveLIN", _wrap_ZCAN_ReceiveLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_SetLINSubscribe", _wrap_ZCAN_SetLINSubscribe);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_SetLINPublish", _wrap_ZCAN_SetLINPublish);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_SetLINPublishEx", _wrap_ZCAN_SetLINPublishEx);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_WakeUpLIN", _wrap_ZCAN_WakeUpLIN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_UDS_Request", _wrap_ZCAN_UDS_Request);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_UDS_Control", _wrap_ZCAN_UDS_Control);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_UDS_RequestEX", _wrap_ZCAN_UDS_RequestEX);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_UDS_ControlEX", _wrap_ZCAN_UDS_ControlEX);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_SetLINSlaveMsg", _wrap_ZCAN_SetLINSlaveMsg);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("ZCAN_ClearLINSlaveMsg", _wrap_ZCAN_ClearLINSlaveMsg);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("LoadDll", _wrap_LoadDll);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("handleConver", _wrap_handleConver);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(xmlpp, Init)

