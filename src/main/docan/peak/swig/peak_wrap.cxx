/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg)               SWIG_Error(code, msg)
#define SWIG_fail                               goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  throw Napi::Error::New(env, msg);
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      Napi::Error::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_OverflowError:
    case SWIG_IndexError:
      Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_ValueError:
    case SWIG_TypeError:
      Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
      return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(nullptr),
        owned(true),
        size(0),
        info(nullptr)
        {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() {};

    Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}


/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ByteArray swig_types[0]
#define SWIGTYPE_p_TimeStamp swig_types[1]
#define SWIGTYPE_p___int64 swig_types[2]
#define SWIGTYPE_p__cantp_baudrate swig_types[3]
#define SWIGTYPE_p__cantp_busstatus swig_types[4]
#define SWIGTYPE_p__cantp_can_info swig_types[5]
#define SWIGTYPE_p__cantp_can_msgtype swig_types[6]
#define SWIGTYPE_p__cantp_device swig_types[7]
#define SWIGTYPE_p__cantp_errstatus swig_types[8]
#define SWIGTYPE_p__cantp_handle swig_types[9]
#define SWIGTYPE_p__cantp_hwtype swig_types[10]
#define SWIGTYPE_p__cantp_infostatus swig_types[11]
#define SWIGTYPE_p__cantp_isotp_addressing swig_types[12]
#define SWIGTYPE_p__cantp_isotp_format swig_types[13]
#define SWIGTYPE_p__cantp_isotp_msgtype swig_types[14]
#define SWIGTYPE_p__cantp_mapping swig_types[15]
#define SWIGTYPE_p__cantp_msg swig_types[16]
#define SWIGTYPE_p__cantp_msgdata swig_types[17]
#define SWIGTYPE_p__cantp_msgdata_can swig_types[18]
#define SWIGTYPE_p__cantp_msgdata_canfd swig_types[19]
#define SWIGTYPE_p__cantp_msgdata_isotp swig_types[20]
#define SWIGTYPE_p__cantp_msgdirection swig_types[21]
#define SWIGTYPE_p__cantp_msgflag swig_types[22]
#define SWIGTYPE_p__cantp_msginfo swig_types[23]
#define SWIGTYPE_p__cantp_msgoption swig_types[24]
#define SWIGTYPE_p__cantp_msgoption_list swig_types[25]
#define SWIGTYPE_p__cantp_msgprogress swig_types[26]
#define SWIGTYPE_p__cantp_msgprogress_state swig_types[27]
#define SWIGTYPE_p__cantp_msgrule swig_types[28]
#define SWIGTYPE_p__cantp_msgtype swig_types[29]
#define SWIGTYPE_p__cantp_netaddrinfo swig_types[30]
#define SWIGTYPE_p__cantp_netstatus swig_types[31]
#define SWIGTYPE_p__cantp_option swig_types[32]
#define SWIGTYPE_p__cantp_parameter swig_types[33]
#define SWIGTYPE_p__cantp_status swig_types[34]
#define SWIGTYPE_p__cantp_statustype swig_types[35]
#define SWIGTYPE_p_char swig_types[36]
#define SWIGTYPE_p_float swig_types[37]
#define SWIGTYPE_p_int swig_types[38]
#define SWIGTYPE_p_long swig_types[39]
#define SWIGTYPE_p_long_long swig_types[40]
#define SWIGTYPE_p_p_char swig_types[41]
#define SWIGTYPE_p_p_unsigned_long swig_types[42]
#define SWIGTYPE_p_short swig_types[43]
#define SWIGTYPE_p_signed___int64 swig_types[44]
#define SWIGTYPE_p_signed_char swig_types[45]
#define SWIGTYPE_p_tagTPCANChannelInformation swig_types[46]
#define SWIGTYPE_p_tagTPCANMsg swig_types[47]
#define SWIGTYPE_p_tagTPCANMsgFD swig_types[48]
#define SWIGTYPE_p_tagTPCANTimestamp swig_types[49]
#define SWIGTYPE_p_unsigned___int64 swig_types[50]
#define SWIGTYPE_p_unsigned_char swig_types[51]
#define SWIGTYPE_p_unsigned_int swig_types[52]
#define SWIGTYPE_p_unsigned_long swig_types[53]
#define SWIGTYPE_p_unsigned_long_long swig_types[54]
#define SWIGTYPE_p_unsigned_short swig_types[55]
#define SWIGTYPE_p_void swig_types[56]
static swig_type_info *swig_types[58];
static swig_module_info swig_module = {swig_types, 57, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <windows.h>
#include <stdlib.h>
#include "PCAN-ISO-TP_2016.h"
#include "PCANBasic.h"


#include <stdint.h>		// Use the C99 official header


typedef uint64_t TimeStamp;

SWIGINTERN TimeStamp *new_TimeStamp(){
  return new uint64_t();
}

SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif

SWIGINTERN void TimeStamp_assign(TimeStamp *self,uint64_t value){
  *self = value;
}
SWIGINTERN uint64_t TimeStamp_value(TimeStamp *self){
  return *self;
}

#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long_SS_long(Napi::Env env, unsigned long long val)
{
  return Napi::Number::New(env, val);
}
#endif

SWIGINTERN uint64_t *TimeStamp_cast(TimeStamp *self){
  return self;
}
SWIGINTERN TimeStamp *TimeStamp_frompointer(uint64_t *t){
  return (TimeStamp *) t;
}

typedef uint8_t ByteArray;


SWIGINTERNINLINE int
SWIG_AsVal_size_t (Napi::Value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN ByteArray *new_ByteArray(size_t nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN uint8_t ByteArray_getitem(ByteArray *self,size_t index){
  return self[index];
}

SWIGINTERNINLINE Napi::Value
SWIG_From_unsigned_SS_char(Napi::Env env, unsigned char c)
{
  return Napi::Number::New(env, static_cast<double>(c));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (Napi::Value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN void ByteArray_setitem(ByteArray *self,size_t index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *ByteArray_cast(ByteArray *self){
  return self;
}
SWIGINTERN ByteArray *ByteArray_frompointer(uint8_t *t){
  return (ByteArray *) t;
}

SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_short (Napi::Value valRef, unsigned short* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned short>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_short(Napi::Env env, unsigned short val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}





SWIGINTERN
int SWIG_AsVal_long (Napi::Value obj, long* val)
{
  if (!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<long>(num.Int64Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_bool (Napi::Value obj, bool *val)
{
  if(!obj.IsBoolean()) {
    return SWIG_TypeError;
  }

  Napi::Boolean b;
  NAPI_CHECK_RESULT(obj.ToBoolean(), b);
  if (val) *val = b.Value();
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val)
{
  return Napi::Boolean::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long(Napi::Env env, unsigned long val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN int
SWIG_AsCharArray(Napi::Value obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Napi::Value
SWIG_Env_FromCharPtrAndSize(Napi::Env env, const char* carray, size_t size)
{
  if (carray) {
    Napi::String js_str = Napi::String::New(env, carray, size);
    return js_str;
  } else {
    return env.Undefined();
  }
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


void LoadDll(const char* path) {
  SetDllDirectory(path);
}

cantp_msgdata_isotp* GetMsgDataIsoTp(cantp_msg* msg) {
  return msg->msgdata.isotp;
}

cantp_msgdata* GetMsgDataAny(cantp_msg* msg) {
  return msg->msgdata.any;
}

cantp_msgdata_can* GetMsgDataCan(cantp_msg* msg) {
  return msg->msgdata.can;
}

cantp_msgdata_canfd* GetMsgDataCanFd(cantp_msg* msg) {
  return msg->msgdata.canfd;
}


#define SWIG_NAPI_INIT xmlpp_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TimeStamp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TimeStamp_templ(const Napi::CallbackInfo &);
_exports_TimeStamp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TimeStamp(const Napi::CallbackInfo &);
virtual ~_exports_TimeStamp_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_TimeStamp_assign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimeStamp_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TimeStamp_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_TimeStamp_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TimeStamp_inst : public _exports_TimeStamp_templ<_exports_TimeStamp_inst> {
public:
  using _exports_TimeStamp_templ::_exports_TimeStamp_templ;
  virtual ~_exports_TimeStamp_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TimeStamp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TimeStamp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TimeStamp (_exports_TimeStamp) */
// jsnapi_getclass
Napi::Function _exports_TimeStamp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TimeStamp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TimeStamp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TimeStamp_inst>::DefineClass(env, "TimeStamp", symbolTable);
}

void _exports_TimeStamp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TimeStamp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TimeStamp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("assign");
  members.insert({
    "assign",
      _exports_TimeStamp_templ::InstanceMethod("assign",
        &_exports_TimeStamp_templ::_wrap_TimeStamp_assign,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("value");
  members.insert({
    "value",
      _exports_TimeStamp_templ::InstanceMethod("value",
        &_exports_TimeStamp_templ::_wrap_TimeStamp_value,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_TimeStamp_templ::InstanceMethod("cast",
        &_exports_TimeStamp_templ::_wrap_TimeStamp_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_TimeStamp_templ::_wrap_TimeStamp_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_ByteArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_ByteArray_templ(const Napi::CallbackInfo &);
_exports_ByteArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_ByteArray(const Napi::CallbackInfo &);
virtual ~_exports_ByteArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_ByteArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_ByteArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_ByteArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_ByteArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_ByteArray_inst : public _exports_ByteArray_templ<_exports_ByteArray_inst> {
public:
  using _exports_ByteArray_templ::_exports_ByteArray_templ;
  virtual ~_exports_ByteArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: ByteArray (_exports_ByteArray) */
// jsnapi_getclass
Napi::Function _exports_ByteArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_ByteArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_ByteArray_inst>::DefineClass(env, "ByteArray", symbolTable);
}

void _exports_ByteArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_ByteArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_ByteArray_templ::InstanceMethod("getitem",
        &_exports_ByteArray_templ::_wrap_ByteArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_ByteArray_templ::InstanceMethod("setitem",
        &_exports_ByteArray_templ::_wrap_ByteArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_ByteArray_templ::InstanceMethod("cast",
        &_exports_ByteArray_templ::_wrap_ByteArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_ByteArray_templ::_wrap_ByteArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msginfo_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msginfo_templ(const Napi::CallbackInfo &);
_exports_cantp_msginfo_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msginfo_size_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msginfo_size_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msginfo_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msginfo_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msginfo_extra_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msginfo_extra_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msginfo(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msginfo_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msginfo_inst : public _exports_cantp_msginfo_templ<_exports_cantp_msginfo_inst> {
public:
  using _exports_cantp_msginfo_templ::_exports_cantp_msginfo_templ;
  virtual ~_exports_cantp_msginfo_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msginfo_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msginfo_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msginfo (_exports_cantp_msginfo) */
// jsnapi_getclass
Napi::Function _exports_cantp_msginfo_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msginfo_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msginfo_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msginfo_inst>::DefineClass(env, "cantp_msginfo", symbolTable);
}

void _exports_cantp_msginfo_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msginfo_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msginfo_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("size");
  members.insert({
    "size",
      _exports_cantp_msginfo_templ::InstanceAccessor("size",
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_size_get,
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_size_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_cantp_msginfo_templ::InstanceAccessor("flags",
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_flags_get,
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("extra");
  members.insert({
    "extra",
      _exports_cantp_msginfo_templ::InstanceAccessor("extra",
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_extra_get,
        &_exports_cantp_msginfo_templ::_wrap_cantp_msginfo_extra_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgoption_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgoption_templ(const Napi::CallbackInfo &);
_exports_cantp_msgoption_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgoption_name_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgoption_name_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgoption_value_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgoption_value_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgoption(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgoption_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgoption_inst : public _exports_cantp_msgoption_templ<_exports_cantp_msgoption_inst> {
public:
  using _exports_cantp_msgoption_templ::_exports_cantp_msgoption_templ;
  virtual ~_exports_cantp_msgoption_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgoption_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgoption_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgoption (_exports_cantp_msgoption) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgoption_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgoption_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgoption_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgoption_inst>::DefineClass(env, "cantp_msgoption", symbolTable);
}

void _exports_cantp_msgoption_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgoption_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgoption_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("name");
  members.insert({
    "name",
      _exports_cantp_msgoption_templ::InstanceAccessor("name",
        &_exports_cantp_msgoption_templ::_wrap_cantp_msgoption_name_get,
        &_exports_cantp_msgoption_templ::_wrap_cantp_msgoption_name_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("value");
  members.insert({
    "value",
      _exports_cantp_msgoption_templ::InstanceAccessor("value",
        &_exports_cantp_msgoption_templ::_wrap_cantp_msgoption_value_get,
        &_exports_cantp_msgoption_templ::_wrap_cantp_msgoption_value_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgoption_list_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgoption_list_templ(const Napi::CallbackInfo &);
_exports_cantp_msgoption_list_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgoption_list_buffer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgoption_list_buffer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgoption_list_count_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgoption_list_count_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgoption_list(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgoption_list_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgoption_list_inst : public _exports_cantp_msgoption_list_templ<_exports_cantp_msgoption_list_inst> {
public:
  using _exports_cantp_msgoption_list_templ::_exports_cantp_msgoption_list_templ;
  virtual ~_exports_cantp_msgoption_list_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgoption_list_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgoption_list_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgoption_list (_exports_cantp_msgoption_list) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgoption_list_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgoption_list_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgoption_list_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgoption_list_inst>::DefineClass(env, "cantp_msgoption_list", symbolTable);
}

void _exports_cantp_msgoption_list_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgoption_list_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgoption_list_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("buffer");
  members.insert({
    "buffer",
      _exports_cantp_msgoption_list_templ::InstanceAccessor("buffer",
        &_exports_cantp_msgoption_list_templ::_wrap_cantp_msgoption_list_buffer_get,
        &_exports_cantp_msgoption_list_templ::_wrap_cantp_msgoption_list_buffer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("count");
  members.insert({
    "count",
      _exports_cantp_msgoption_list_templ::InstanceAccessor("count",
        &_exports_cantp_msgoption_list_templ::_wrap_cantp_msgoption_list_count_get,
        &_exports_cantp_msgoption_list_templ::_wrap_cantp_msgoption_list_count_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_can_info_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_can_info_templ(const Napi::CallbackInfo &);
_exports_cantp_can_info_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_can_info_can_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_can_info_can_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_can_info_can_msgtype_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_can_info_can_msgtype_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_can_info_dlc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_can_info_dlc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_can_info(const Napi::CallbackInfo &);
virtual ~_exports_cantp_can_info_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_can_info_inst : public _exports_cantp_can_info_templ<_exports_cantp_can_info_inst> {
public:
  using _exports_cantp_can_info_templ::_exports_cantp_can_info_templ;
  virtual ~_exports_cantp_can_info_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_can_info_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_can_info_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_can_info (_exports_cantp_can_info) */
// jsnapi_getclass
Napi::Function _exports_cantp_can_info_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_can_info_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_can_info_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_can_info_inst>::DefineClass(env, "cantp_can_info", symbolTable);
}

void _exports_cantp_can_info_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_can_info_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_can_info_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("can_id");
  members.insert({
    "can_id",
      _exports_cantp_can_info_templ::InstanceAccessor("can_id",
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_can_id_get,
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_can_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_msgtype");
  members.insert({
    "can_msgtype",
      _exports_cantp_can_info_templ::InstanceAccessor("can_msgtype",
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_can_msgtype_get,
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_can_msgtype_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dlc");
  members.insert({
    "dlc",
      _exports_cantp_can_info_templ::InstanceAccessor("dlc",
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_dlc_get,
        &_exports_cantp_can_info_templ::_wrap_cantp_can_info_dlc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_netaddrinfo_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_netaddrinfo_templ(const Napi::CallbackInfo &);
_exports_cantp_netaddrinfo_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_msgtype_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_msgtype_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_format_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_format_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_target_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_target_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_source_addr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_source_addr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_target_addr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_target_addr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_netaddrinfo_extension_addr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_netaddrinfo_extension_addr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_netaddrinfo(const Napi::CallbackInfo &);
virtual ~_exports_cantp_netaddrinfo_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_netaddrinfo_inst : public _exports_cantp_netaddrinfo_templ<_exports_cantp_netaddrinfo_inst> {
public:
  using _exports_cantp_netaddrinfo_templ::_exports_cantp_netaddrinfo_templ;
  virtual ~_exports_cantp_netaddrinfo_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_netaddrinfo_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_netaddrinfo_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_netaddrinfo (_exports_cantp_netaddrinfo) */
// jsnapi_getclass
Napi::Function _exports_cantp_netaddrinfo_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_netaddrinfo_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_netaddrinfo_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_netaddrinfo_inst>::DefineClass(env, "cantp_netaddrinfo", symbolTable);
}

void _exports_cantp_netaddrinfo_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_netaddrinfo_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_netaddrinfo_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("msgtype");
  members.insert({
    "msgtype",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("msgtype",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_msgtype_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_msgtype_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("format");
  members.insert({
    "format",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("format",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_format_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_format_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("target_type");
  members.insert({
    "target_type",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("target_type",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_target_type_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_target_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("source_addr");
  members.insert({
    "source_addr",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("source_addr",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_source_addr_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_source_addr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("target_addr");
  members.insert({
    "target_addr",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("target_addr",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_target_addr_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_target_addr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("extension_addr");
  members.insert({
    "extension_addr",
      _exports_cantp_netaddrinfo_templ::InstanceAccessor("extension_addr",
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_extension_addr_get,
        &_exports_cantp_netaddrinfo_templ::_wrap_cantp_netaddrinfo_extension_addr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_mapping_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_mapping_templ(const Napi::CallbackInfo &);
_exports_cantp_mapping_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_uid_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_uid_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_can_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_can_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_can_id_flow_ctrl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_can_id_flow_ctrl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_can_msgtype_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_can_msgtype_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_can_tx_dlc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_can_tx_dlc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_mapping_netaddrinfo_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_mapping_netaddrinfo_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_mapping(const Napi::CallbackInfo &);
virtual ~_exports_cantp_mapping_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_mapping_inst : public _exports_cantp_mapping_templ<_exports_cantp_mapping_inst> {
public:
  using _exports_cantp_mapping_templ::_exports_cantp_mapping_templ;
  virtual ~_exports_cantp_mapping_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_mapping_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_mapping_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_mapping (_exports_cantp_mapping) */
// jsnapi_getclass
Napi::Function _exports_cantp_mapping_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_mapping_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_mapping_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_mapping_inst>::DefineClass(env, "cantp_mapping", symbolTable);
}

void _exports_cantp_mapping_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_mapping_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_mapping_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("uid");
  members.insert({
    "uid",
      _exports_cantp_mapping_templ::InstanceAccessor("uid",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_uid_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_uid_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_id");
  members.insert({
    "can_id",
      _exports_cantp_mapping_templ::InstanceAccessor("can_id",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_id_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_id_flow_ctrl");
  members.insert({
    "can_id_flow_ctrl",
      _exports_cantp_mapping_templ::InstanceAccessor("can_id_flow_ctrl",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_id_flow_ctrl_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_id_flow_ctrl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_msgtype");
  members.insert({
    "can_msgtype",
      _exports_cantp_mapping_templ::InstanceAccessor("can_msgtype",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_msgtype_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_msgtype_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_tx_dlc");
  members.insert({
    "can_tx_dlc",
      _exports_cantp_mapping_templ::InstanceAccessor("can_tx_dlc",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_tx_dlc_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_can_tx_dlc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netaddrinfo");
  members.insert({
    "netaddrinfo",
      _exports_cantp_mapping_templ::InstanceAccessor("netaddrinfo",
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_netaddrinfo_get,
        &_exports_cantp_mapping_templ::_wrap_cantp_mapping_netaddrinfo_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgrule_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgrule_templ(const Napi::CallbackInfo &);
_exports_cantp_msgrule_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_uid_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_uid_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_can_info_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_can_info_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_netaddrinfo_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_netaddrinfo_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_options_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_options_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgrule_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgrule_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgrule(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgrule_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgrule_inst : public _exports_cantp_msgrule_templ<_exports_cantp_msgrule_inst> {
public:
  using _exports_cantp_msgrule_templ::_exports_cantp_msgrule_templ;
  virtual ~_exports_cantp_msgrule_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgrule_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgrule_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgrule (_exports_cantp_msgrule) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgrule_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgrule_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgrule_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgrule_inst>::DefineClass(env, "cantp_msgrule", symbolTable);
}

void _exports_cantp_msgrule_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgrule_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgrule_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("uid");
  members.insert({
    "uid",
      _exports_cantp_msgrule_templ::InstanceAccessor("uid",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_uid_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_uid_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_cantp_msgrule_templ::InstanceAccessor("type",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_type_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_info");
  members.insert({
    "can_info",
      _exports_cantp_msgrule_templ::InstanceAccessor("can_info",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_can_info_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_can_info_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netaddrinfo");
  members.insert({
    "netaddrinfo",
      _exports_cantp_msgrule_templ::InstanceAccessor("netaddrinfo",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_netaddrinfo_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_netaddrinfo_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("options");
  members.insert({
    "options",
      _exports_cantp_msgrule_templ::InstanceAccessor("options",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_options_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_options_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_cantp_msgrule_templ::InstanceAccessor("reserved",
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_reserved_get,
        &_exports_cantp_msgrule_templ::_wrap_cantp_msgrule_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgdata_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgdata_templ(const Napi::CallbackInfo &);
_exports_cantp_msgdata_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_length_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_length_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_netstatus_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_netstatus_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_options_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_options_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgdata(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgdata_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgdata_inst : public _exports_cantp_msgdata_templ<_exports_cantp_msgdata_inst> {
public:
  using _exports_cantp_msgdata_templ::_exports_cantp_msgdata_templ;
  virtual ~_exports_cantp_msgdata_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgdata_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgdata_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgdata (_exports_cantp_msgdata) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgdata_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgdata_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgdata_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgdata_inst>::DefineClass(env, "cantp_msgdata", symbolTable);
}

void _exports_cantp_msgdata_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgdata_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgdata_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_cantp_msgdata_templ::InstanceAccessor("flags",
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_flags_get,
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("length");
  members.insert({
    "length",
      _exports_cantp_msgdata_templ::InstanceAccessor("length",
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_length_get,
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_length_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_cantp_msgdata_templ::InstanceAccessor("data",
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_data_get,
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netstatus");
  members.insert({
    "netstatus",
      _exports_cantp_msgdata_templ::InstanceAccessor("netstatus",
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_netstatus_get,
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_netstatus_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("options");
  members.insert({
    "options",
      _exports_cantp_msgdata_templ::InstanceAccessor("options",
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_options_get,
        &_exports_cantp_msgdata_templ::_wrap_cantp_msgdata_options_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgdata_can_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgdata_can_templ(const Napi::CallbackInfo &);
_exports_cantp_msgdata_can_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_length_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_length_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_netstatus_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_netstatus_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_options_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_options_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_can_data_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_can_data_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgdata_can(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgdata_can_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgdata_can_inst : public _exports_cantp_msgdata_can_templ<_exports_cantp_msgdata_can_inst> {
public:
  using _exports_cantp_msgdata_can_templ::_exports_cantp_msgdata_can_templ;
  virtual ~_exports_cantp_msgdata_can_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgdata_can_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgdata_can_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgdata_can (_exports_cantp_msgdata_can) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgdata_can_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgdata_can_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgdata_can_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgdata_can_inst>::DefineClass(env, "cantp_msgdata_can", symbolTable);
}

void _exports_cantp_msgdata_can_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgdata_can_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgdata_can_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("flags",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_flags_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("length");
  members.insert({
    "length",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("length",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_length_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_length_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("data",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_data_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netstatus");
  members.insert({
    "netstatus",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("netstatus",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_netstatus_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_netstatus_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("options");
  members.insert({
    "options",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("options",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_options_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_options_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data_max");
  members.insert({
    "data_max",
      _exports_cantp_msgdata_can_templ::InstanceAccessor("data_max",
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_data_max_get,
        &_exports_cantp_msgdata_can_templ::_wrap_cantp_msgdata_can_data_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgdata_canfd_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgdata_canfd_templ(const Napi::CallbackInfo &);
_exports_cantp_msgdata_canfd_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_length_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_length_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_netstatus_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_netstatus_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_options_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_options_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_canfd_data_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_canfd_data_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgdata_canfd(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgdata_canfd_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgdata_canfd_inst : public _exports_cantp_msgdata_canfd_templ<_exports_cantp_msgdata_canfd_inst> {
public:
  using _exports_cantp_msgdata_canfd_templ::_exports_cantp_msgdata_canfd_templ;
  virtual ~_exports_cantp_msgdata_canfd_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgdata_canfd_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgdata_canfd_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgdata_canfd (_exports_cantp_msgdata_canfd) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgdata_canfd_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgdata_canfd_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgdata_canfd_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgdata_canfd_inst>::DefineClass(env, "cantp_msgdata_canfd", symbolTable);
}

void _exports_cantp_msgdata_canfd_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgdata_canfd_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgdata_canfd_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("flags",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_flags_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("length");
  members.insert({
    "length",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("length",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_length_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_length_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("data",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_data_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netstatus");
  members.insert({
    "netstatus",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("netstatus",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_netstatus_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_netstatus_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("options");
  members.insert({
    "options",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("options",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_options_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_options_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data_max");
  members.insert({
    "data_max",
      _exports_cantp_msgdata_canfd_templ::InstanceAccessor("data_max",
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_data_max_get,
        &_exports_cantp_msgdata_canfd_templ::_wrap_cantp_msgdata_canfd_data_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgdata_isotp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgdata_isotp_templ(const Napi::CallbackInfo &);
_exports_cantp_msgdata_isotp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_length_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_length_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_netstatus_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_netstatus_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_options_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_options_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_netaddrinfo_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_netaddrinfo_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgdata_isotp_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgdata_isotp_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgdata_isotp(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgdata_isotp_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgdata_isotp_inst : public _exports_cantp_msgdata_isotp_templ<_exports_cantp_msgdata_isotp_inst> {
public:
  using _exports_cantp_msgdata_isotp_templ::_exports_cantp_msgdata_isotp_templ;
  virtual ~_exports_cantp_msgdata_isotp_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgdata_isotp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgdata_isotp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgdata_isotp (_exports_cantp_msgdata_isotp) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgdata_isotp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgdata_isotp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgdata_isotp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgdata_isotp_inst>::DefineClass(env, "cantp_msgdata_isotp", symbolTable);
}

void _exports_cantp_msgdata_isotp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgdata_isotp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgdata_isotp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("flags",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_flags_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("length");
  members.insert({
    "length",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("length",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_length_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_length_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("data",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_data_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netstatus");
  members.insert({
    "netstatus",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("netstatus",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_netstatus_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_netstatus_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("options");
  members.insert({
    "options",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("options",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_options_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_options_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("netaddrinfo");
  members.insert({
    "netaddrinfo",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("netaddrinfo",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_netaddrinfo_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_netaddrinfo_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_cantp_msgdata_isotp_templ::InstanceAccessor("reserved",
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_reserved_get,
        &_exports_cantp_msgdata_isotp_templ::_wrap_cantp_msgdata_isotp_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msg_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msg_templ(const Napi::CallbackInfo &);
_exports_cantp_msg_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msg_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msg_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msg_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msg_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msg_can_info_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msg_can_info_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msg(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msg_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msg_inst : public _exports_cantp_msg_templ<_exports_cantp_msg_inst> {
public:
  using _exports_cantp_msg_templ::_exports_cantp_msg_templ;
  virtual ~_exports_cantp_msg_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msg_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msg_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msg (_exports_cantp_msg) */
// jsnapi_getclass
Napi::Function _exports_cantp_msg_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msg_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msg_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msg_inst>::DefineClass(env, "cantp_msg", symbolTable);
}

void _exports_cantp_msg_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msg_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msg_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_cantp_msg_templ::InstanceAccessor("type",
        &_exports_cantp_msg_templ::_wrap_cantp_msg_type_get,
        &_exports_cantp_msg_templ::_wrap_cantp_msg_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_cantp_msg_templ::InstanceAccessor("reserved",
        &_exports_cantp_msg_templ::_wrap_cantp_msg_reserved_get,
        &_exports_cantp_msg_templ::_wrap_cantp_msg_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_info");
  members.insert({
    "can_info",
      _exports_cantp_msg_templ::InstanceAccessor("can_info",
        &_exports_cantp_msg_templ::_wrap_cantp_msg_can_info_get,
        &_exports_cantp_msg_templ::_wrap_cantp_msg_can_info_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_cantp_msgprogress_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_cantp_msgprogress_templ(const Napi::CallbackInfo &);
_exports_cantp_msgprogress_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgprogress_state_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgprogress_state_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgprogress_percentage_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgprogress_percentage_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_cantp_msgprogress_buffer_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_cantp_msgprogress_buffer_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_cantp_msgprogress(const Napi::CallbackInfo &);
virtual ~_exports_cantp_msgprogress_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_cantp_msgprogress_inst : public _exports_cantp_msgprogress_templ<_exports_cantp_msgprogress_inst> {
public:
  using _exports_cantp_msgprogress_templ::_exports_cantp_msgprogress_templ;
  virtual ~_exports_cantp_msgprogress_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_cantp_msgprogress_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_cantp_msgprogress_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: cantp_msgprogress (_exports_cantp_msgprogress) */
// jsnapi_getclass
Napi::Function _exports_cantp_msgprogress_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_cantp_msgprogress_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_cantp_msgprogress_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_cantp_msgprogress_inst>::DefineClass(env, "cantp_msgprogress", symbolTable);
}

void _exports_cantp_msgprogress_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_cantp_msgprogress_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_cantp_msgprogress_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("state");
  members.insert({
    "state",
      _exports_cantp_msgprogress_templ::InstanceAccessor("state",
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_state_get,
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_state_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("percentage");
  members.insert({
    "percentage",
      _exports_cantp_msgprogress_templ::InstanceAccessor("percentage",
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_percentage_get,
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_percentage_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("buffer");
  members.insert({
    "buffer",
      _exports_cantp_msgprogress_templ::InstanceAccessor("buffer",
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_buffer_get,
        &_exports_cantp_msgprogress_templ::_wrap_cantp_msgprogress_buffer_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TPCANMsg_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TPCANMsg_templ(const Napi::CallbackInfo &);
_exports_TPCANMsg_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsg_ID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsg_ID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsg_MSGTYPE_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsg_MSGTYPE_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsg_LEN_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsg_LEN_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsg_DATA_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsg_DATA_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TPCANMsg(const Napi::CallbackInfo &);
virtual ~_exports_TPCANMsg_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TPCANMsg_inst : public _exports_TPCANMsg_templ<_exports_TPCANMsg_inst> {
public:
  using _exports_TPCANMsg_templ::_exports_TPCANMsg_templ;
  virtual ~_exports_TPCANMsg_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TPCANMsg_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TPCANMsg_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TPCANMsg (_exports_TPCANMsg) */
// jsnapi_getclass
Napi::Function _exports_TPCANMsg_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TPCANMsg_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TPCANMsg_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TPCANMsg_inst>::DefineClass(env, "TPCANMsg", symbolTable);
}

void _exports_TPCANMsg_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TPCANMsg_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TPCANMsg_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ID");
  members.insert({
    "ID",
      _exports_TPCANMsg_templ::InstanceAccessor("ID",
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_ID_get,
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_ID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("MSGTYPE");
  members.insert({
    "MSGTYPE",
      _exports_TPCANMsg_templ::InstanceAccessor("MSGTYPE",
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_MSGTYPE_get,
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_MSGTYPE_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("LEN");
  members.insert({
    "LEN",
      _exports_TPCANMsg_templ::InstanceAccessor("LEN",
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_LEN_get,
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_LEN_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("DATA");
  members.insert({
    "DATA",
      _exports_TPCANMsg_templ::InstanceAccessor("DATA",
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_DATA_get,
        &_exports_TPCANMsg_templ::_wrap_TPCANMsg_DATA_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TPCANTimestamp_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TPCANTimestamp_templ(const Napi::CallbackInfo &);
_exports_TPCANTimestamp_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANTimestamp_millis_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANTimestamp_millis_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANTimestamp_millis_overflow_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANTimestamp_millis_overflow_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANTimestamp_micros_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANTimestamp_micros_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TPCANTimestamp(const Napi::CallbackInfo &);
virtual ~_exports_TPCANTimestamp_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TPCANTimestamp_inst : public _exports_TPCANTimestamp_templ<_exports_TPCANTimestamp_inst> {
public:
  using _exports_TPCANTimestamp_templ::_exports_TPCANTimestamp_templ;
  virtual ~_exports_TPCANTimestamp_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TPCANTimestamp_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TPCANTimestamp_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TPCANTimestamp (_exports_TPCANTimestamp) */
// jsnapi_getclass
Napi::Function _exports_TPCANTimestamp_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TPCANTimestamp_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TPCANTimestamp_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TPCANTimestamp_inst>::DefineClass(env, "TPCANTimestamp", symbolTable);
}

void _exports_TPCANTimestamp_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TPCANTimestamp_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TPCANTimestamp_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("millis");
  members.insert({
    "millis",
      _exports_TPCANTimestamp_templ::InstanceAccessor("millis",
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_millis_get,
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_millis_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("millis_overflow");
  members.insert({
    "millis_overflow",
      _exports_TPCANTimestamp_templ::InstanceAccessor("millis_overflow",
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_millis_overflow_get,
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_millis_overflow_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("micros");
  members.insert({
    "micros",
      _exports_TPCANTimestamp_templ::InstanceAccessor("micros",
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_micros_get,
        &_exports_TPCANTimestamp_templ::_wrap_TPCANTimestamp_micros_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TPCANMsgFD_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TPCANMsgFD_templ(const Napi::CallbackInfo &);
_exports_TPCANMsgFD_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsgFD_ID_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsgFD_ID_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsgFD_MSGTYPE_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsgFD_MSGTYPE_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsgFD_DLC_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsgFD_DLC_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANMsgFD_DATA_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANMsgFD_DATA_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TPCANMsgFD(const Napi::CallbackInfo &);
virtual ~_exports_TPCANMsgFD_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TPCANMsgFD_inst : public _exports_TPCANMsgFD_templ<_exports_TPCANMsgFD_inst> {
public:
  using _exports_TPCANMsgFD_templ::_exports_TPCANMsgFD_templ;
  virtual ~_exports_TPCANMsgFD_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TPCANMsgFD_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TPCANMsgFD_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TPCANMsgFD (_exports_TPCANMsgFD) */
// jsnapi_getclass
Napi::Function _exports_TPCANMsgFD_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TPCANMsgFD_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TPCANMsgFD_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TPCANMsgFD_inst>::DefineClass(env, "TPCANMsgFD", symbolTable);
}

void _exports_TPCANMsgFD_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TPCANMsgFD_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TPCANMsgFD_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ID");
  members.insert({
    "ID",
      _exports_TPCANMsgFD_templ::InstanceAccessor("ID",
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_ID_get,
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_ID_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("MSGTYPE");
  members.insert({
    "MSGTYPE",
      _exports_TPCANMsgFD_templ::InstanceAccessor("MSGTYPE",
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_MSGTYPE_get,
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_MSGTYPE_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("DLC");
  members.insert({
    "DLC",
      _exports_TPCANMsgFD_templ::InstanceAccessor("DLC",
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_DLC_get,
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_DLC_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("DATA");
  members.insert({
    "DATA",
      _exports_TPCANMsgFD_templ::InstanceAccessor("DATA",
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_DATA_get,
        &_exports_TPCANMsgFD_templ::_wrap_TPCANMsgFD_DATA_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TPCANChannelInformation_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TPCANChannelInformation_templ(const Napi::CallbackInfo &);
_exports_TPCANChannelInformation_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_channel_handle_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_channel_handle_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_device_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_device_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_controller_number_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_controller_number_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_device_features_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_device_features_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_device_name_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_device_name_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_device_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_device_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TPCANChannelInformation_channel_condition_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_TPCANChannelInformation_channel_condition_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TPCANChannelInformation(const Napi::CallbackInfo &);
virtual ~_exports_TPCANChannelInformation_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TPCANChannelInformation_inst : public _exports_TPCANChannelInformation_templ<_exports_TPCANChannelInformation_inst> {
public:
  using _exports_TPCANChannelInformation_templ::_exports_TPCANChannelInformation_templ;
  virtual ~_exports_TPCANChannelInformation_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TPCANChannelInformation_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TPCANChannelInformation_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TPCANChannelInformation (_exports_TPCANChannelInformation) */
// jsnapi_getclass
Napi::Function _exports_TPCANChannelInformation_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TPCANChannelInformation_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TPCANChannelInformation_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TPCANChannelInformation_inst>::DefineClass(env, "TPCANChannelInformation", symbolTable);
}

void _exports_TPCANChannelInformation_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TPCANChannelInformation_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TPCANChannelInformation_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("channel_handle");
  members.insert({
    "channel_handle",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("channel_handle",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_channel_handle_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_channel_handle_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("device_type");
  members.insert({
    "device_type",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("device_type",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_type_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("controller_number");
  members.insert({
    "controller_number",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("controller_number",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_controller_number_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_controller_number_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("device_features");
  members.insert({
    "device_features",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("device_features",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_features_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_features_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("device_name");
  members.insert({
    "device_name",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("device_name",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_name_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_name_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("device_id");
  members.insert({
    "device_id",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("device_id",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_id_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_device_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channel_condition");
  members.insert({
    "channel_condition",
      _exports_TPCANChannelInformation_templ::InstanceAccessor("channel_condition",
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_channel_condition_get,
        &_exports_TPCANChannelInformation_templ::_wrap_TPCANChannelInformation_channel_condition_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}





template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_exports_TimeStamp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_TimeStamp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  TimeStamp *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TimeStamp.");
  }
  result = (TimeStamp *)new_TimeStamp();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_exports_TimeStamp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_TimeStamp(TimeStamp *self){
  delete self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TimeStamp_templ<SWIG_OBJ_WRAP>::~_exports_TimeStamp_templ() {
  auto arg1 = reinterpret_cast<TimeStamp *>(this->self);
  if (this->owned && arg1) {
    delete_TimeStamp(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TimeStamp_assign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimeStamp *arg1 = (TimeStamp *) 0 ;
  uint64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimeStamp_assign.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStamp_assign" "', argument " "1"" of type '" "TimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< TimeStamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeStamp_assign" "', argument " "2"" of type '" "uint64_t""'");
  } 
  arg2 = static_cast< uint64_t >(val2);TimeStamp_assign(arg1,arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TimeStamp_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimeStamp *arg1 = (TimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimeStamp_value.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStamp_value" "', argument " "1"" of type '" "TimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< TimeStamp * >(argp1);result = (uint64_t)TimeStamp_value(arg1);
  jsresult = SWIG_From_unsigned_SS_long_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TimeStamp_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TimeStamp *arg1 = (TimeStamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint64_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimeStamp_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TimeStamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStamp_cast" "', argument " "1"" of type '" "TimeStamp *""'"); 
  }
  arg1 = reinterpret_cast< TimeStamp * >(argp1);result = (uint64_t *)TimeStamp_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_long_long, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TimeStamp_templ<SWIG_OBJ_WRAP>::_wrap_TimeStamp_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint64_t *arg1 = (uint64_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TimeStamp *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TimeStamp_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_long_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeStamp_frompointer" "', argument " "1"" of type '" "uint64_t *""'"); 
  }
  arg1 = reinterpret_cast< uint64_t * >(argp1);result = (TimeStamp *)TimeStamp_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TimeStamp, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::_exports_ByteArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_ByteArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  ByteArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_ByteArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ByteArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (ByteArray *)new_ByteArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::_exports_ByteArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_ByteArray(ByteArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_ByteArray_templ<SWIG_OBJ_WRAP>::~_exports_ByteArray_templ() {
  auto arg1 = reinterpret_cast<ByteArray *>(this->self);
  if (this->owned && arg1) {
    delete_ByteArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_getitem" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (uint8_t)ByteArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  size_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_setitem" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ByteArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_char(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ByteArray_setitem" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);ByteArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  ByteArray *arg1 = (ByteArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_ByteArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_cast" "', argument " "1"" of type '" "ByteArray *""'"); 
  }
  arg1 = reinterpret_cast< ByteArray * >(argp1);result = (uint8_t *)ByteArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_ByteArray_templ<SWIG_OBJ_WRAP>::_wrap_ByteArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ByteArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_ByteArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ByteArray_frompointer" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);result = (ByteArray *)ByteArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ByteArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_NONEBUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x21U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x22U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x23U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x24U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x25U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x26U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x27U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISABUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x28U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_DNGBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x31U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x41U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x42U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x43U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x44U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x45U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x46U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x47U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x48U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x409U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCIBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x410U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x51U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x52U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x53U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x54U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x55U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x56U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x57U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x58U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x509U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x50FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USBBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x510U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCCBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x61U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCCBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x62U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x801U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x802U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x803U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x804U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x805U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x806U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x807U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x808U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x809U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LANBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x810U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_XMTFULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00001U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_OVERRUN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00002U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_BUSLIGHT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00004U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_BUSHEAVY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00008U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_BUSWARNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00008U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_BUSPASSIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_BUSOFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00010U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ANYBUSERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >((0x00008U|0x00004U|0x00008U|0x00010U|0x40000U)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_QRCVEMPTY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00020U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_QOVERRUN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00040U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_QXMTFULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00080U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_REGTEST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00100U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_NODRIVER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00200U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_HWINUSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00400U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_NETINUSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00800U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLHW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01400U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLNET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01800U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLCLIENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01C00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLHANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >((0x01400U|0x01800U|0x01C00U)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_RESOURCE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLPARAMTYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLPARAMVAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x08000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x10000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLDATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x20000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLMODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_CAUTION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_INITIALIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x4000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ERROR_ILLOPERATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x8000000U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PEAKCAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ISA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_DNG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x03U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_USB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x05U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PCC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x06U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_VIRTUAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x07U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x08U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_DEVICE_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_5VOLTS_POWER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_RECEIVE_EVENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x03U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_FILTER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_API_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x05U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x06U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BUSOFF_AUTORESET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x07U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LISTEN_ONLY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x08U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LOG_LOCATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x09U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LOG_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LOG_CONFIGURE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LOG_TEXT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_CONDITION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_HARDWARE_NAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_RECEIVE_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CONTROLLER_NUMBER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x10U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TRACE_LOCATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x11U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TRACE_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x12U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TRACE_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x13U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TRACE_CONFIGURE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x14U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_IDENTIFYING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x15U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_FEATURES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x16U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BITRATE_ADAPTING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x17U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BITRATE_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x18U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BITRATE_INFO_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x19U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BUSSPEED_NOMINAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BUSSPEED_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IP_ADDRESS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_LAN_SERVICE_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ALLOW_STATUS_FRAMES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ALLOW_RTR_FRAMES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ALLOW_ERROR_FRAMES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x20U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_INTERFRAME_DELAY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x21U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ACCEPTANCE_FILTER_11BIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x22U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ACCEPTANCE_FILTER_29BIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x23U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IO_DIGITAL_CONFIGURATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x24U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IO_DIGITAL_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x25U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IO_DIGITAL_SET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x26U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IO_DIGITAL_CLEAR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x27U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_IO_ANALOG_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x28U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_FIRMWARE_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x29U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ATTACHED_CHANNELS_COUNT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2AU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ATTACHED_CHANNELS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_ALLOW_ECHO_FRAMES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_DEVICE_PART_NUMBER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2DU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_DEVICE_NUMBER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PARAMETER_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_PARAMETER_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_FILTER_CLOSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_FILTER_OPEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_FILTER_CUSTOM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_UNAVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_AVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_OCCUPIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_CHANNEL_PCANVIEW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >((0x01U|0x02U)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_ENTRY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_PARAMETERS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_LEAVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_WRITE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x08U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_READ_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x10U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_LOG_FUNCTION_ALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0xFFFFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_SINGLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_SEGMENTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_DATE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_TIME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_OVERWRITE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_FEATURE_FD_CAPABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_FEATURE_DELAY_CAPABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_FEATURE_IO_CAPABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_SERVICE_STATUS_STOPPED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_SERVICE_STATUS_RUNNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_MAX_LENGTH_HARDWARE_NAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(33));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_MAX_LENGTH_VERSION_STRING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(256));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_STANDARD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_RTR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_EXTENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_BRS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x08U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_ESI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x10U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_ECHO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x20U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_ERRFRAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x40U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MESSAGE_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x80U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MODE_STANDARD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_MODE_EXTENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_1M_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0014U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_800K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x0016U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_500K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x001CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_250K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x011CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_125K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x031CU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_100K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x432FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_95K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0xC34EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_83K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x852BU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_50K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x472FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_47K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x1414U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_33K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x8B2FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_20K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x532FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_10K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x672FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_BAUD_5K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x7F7FU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_ISA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_ISA_SJA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x09U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_ISA_PHYTEC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x04U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_DNG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x02U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_DNG_EPP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x03U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_DNG_SJA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x05U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_TYPE_DNG_SJA_EPP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x06U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_NONEBUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_NONEBUS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_ISABUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_ISABUS8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_DNGBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_DNGBUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS9));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS11));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS12));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS13));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS14));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS15));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCIBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCIBUS16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS9));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS11));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS12));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS13));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS14));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS15));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_USBBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_USBBUS16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCCBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCCBUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_PCCBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_PCCBUS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS5_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS5));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS6_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS6));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS7_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS7));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS8_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS9_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS9));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS10_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS11_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS11));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS12_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS12));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS13_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS13));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS14_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS14));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS15_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS15));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HANDLE_LANBUS16_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HANDLE_LANBUS16));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_1M_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_1M));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_800K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_800K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_500K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_500K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_250K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_250K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_125K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_125K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_100K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_100K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_95K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_95K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_83K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_83K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_50K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_50K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_47K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_47K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_33K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_33K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_20K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_20K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_10K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_10K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BAUDRATE_5K_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BAUDRATE_5K));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_ISA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_ISA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_ISA_SJA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_ISA_SJA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_ISA_PHYTEC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_ISA_PHYTEC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_DNG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_DNG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_DNG_EPP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_DNG_EPP));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_DNG_SJA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_DNG_SJA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_HWTYPE_DNG_SJA_EPP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_HWTYPE_DNG_SJA_EPP));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_PEAKCAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_PEAKCAN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_ISA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_ISA));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_DNG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_DNG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_PCI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_PCI));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_USB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_USB));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_PCC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_PCC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_VIRTUAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_VIRTUAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEVICE_LAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_DEVICE_LAN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_BUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_BUS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_NET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_NET));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_INFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUSTYPE_PCAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUSTYPE_PCAN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_TIMEOUT_A_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_TIMEOUT_A));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_TIMEOUT_Bs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_TIMEOUT_Bs));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_TIMEOUT_Cr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_TIMEOUT_Cr));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_WRONG_SN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_WRONG_SN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_INVALID_FS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_INVALID_FS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_UNEXP_PDU_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_UNEXP_PDU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_WFT_OVRN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_WFT_OVRN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_BUFFER_OVFLW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_BUFFER_OVFLW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_IGNORED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_IGNORED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_TIMEOUT_As_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_TIMEOUT_As));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_TIMEOUT_Ar_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_TIMEOUT_Ar));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_XMT_FULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_XMT_FULL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_BUS_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_BUS_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETSTATUS_NO_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_NETSTATUS_NO_MEMORY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_LIGHT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_LIGHT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_HEAVY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_HEAVY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_WARNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_WARNING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_PASSIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_PASSIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_OFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BUSSTATUS_ANY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_BUSSTATUS_ANY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_NOT_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_NOT_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_ALREADY_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_ALREADY_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_NO_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_NO_MEMORY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_NO_MESSAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_NO_MESSAGE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_PARAM_INVALID_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_PARAM_INVALID_TYPE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_PARAM_INVALID_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_PARAM_INVALID_VALUE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_MAPPING_NOT_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_MAPPING_NOT_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_MAPPING_INVALID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_MAPPING_INVALID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_MAPPING_ALREADY_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_MAPPING_ALREADY_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_PARAM_BUFFER_TOO_SMALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_PARAM_BUFFER_TOO_SMALL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_QUEUE_TX_FULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_QUEUE_TX_FULL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_LOCK_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_LOCK_TIMEOUT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_INVALID_HANDLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_INVALID_HANDLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ERRSTATUS_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ERRSTATUS_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_INPUT_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_INPUT_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_DLC_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_DLC_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_DATA_LENGTH_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_DATA_LENGTH_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_FD_FLAG_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_FD_FLAG_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_FULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_FULL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_BUFFER_IN_USE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_BUFFER_IN_USE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_OVERRUN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_OVERRUN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_OFFSET_BUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(8));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_OFFSET_NET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((8+5)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_OFFSET_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(((8+5) +5)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NOT_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NOT_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_ALREADY_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_ALREADY_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NO_MEMORY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NO_MEMORY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NO_MESSAGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NO_MESSAGE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_PARAM_INVALID_TYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_PARAM_INVALID_TYPE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_PARAM_INVALID_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_PARAM_INVALID_VALUE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MAPPING_NOT_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MAPPING_NOT_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MAPPING_INVALID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MAPPING_INVALID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MAPPING_ALREADY_INITIALIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MAPPING_ALREADY_INITIALIZED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_PARAM_BUFFER_TOO_SMALL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_PARAM_BUFFER_TOO_SMALL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_QUEUE_TX_FULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_QUEUE_TX_FULL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_LOCK_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_LOCK_TIMEOUT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_HANDLE_INVALID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_HANDLE_INVALID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_LIGHT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_LIGHT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_HEAVY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_HEAVY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_WARNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_WARNING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_PASSIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_PASSIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_OFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_BUS_ANY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_BUS_ANY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_NETWORK_RESULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_NETWORK_RESULT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_TIMEOUT_A_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_TIMEOUT_A));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_TIMEOUT_Bs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_TIMEOUT_Bs));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_TIMEOUT_Cr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_TIMEOUT_Cr));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_WRONG_SN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_WRONG_SN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_INVALID_FS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_INVALID_FS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_UNEXP_PDU_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_UNEXP_PDU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_WFT_OVRN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_WFT_OVRN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_BUFFER_OVFLW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_BUFFER_OVFLW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_IGNORED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_IGNORED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_TIMEOUT_Ar_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_TIMEOUT_Ar));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_NETWORK_TIMEOUT_As_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_NETWORK_TIMEOUT_As));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_INPUT_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_INPUT_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_DLC_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_DLC_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_DATA_LENGTH_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_DATA_LENGTH_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_FD_FLAG_MODIFIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_FD_FLAG_MODIFIED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_RX_QUEUE_FULL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_RX_QUEUE_FULL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_BUFFER_IN_USE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_BUFFER_IN_USE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_CAUTION_RX_QUEUE_OVERRUN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_CAUTION_RX_QUEUE_OVERRUN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_FLAG_PCAN_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_FLAG_PCAN_STATUS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MASK_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MASK_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MASK_BUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MASK_BUS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MASK_ISOTP_NET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MASK_ISOTP_NET));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MASK_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MASK_INFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STATUS_MASK_PCAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_STATUS_MASK_PCAN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_API_VERSION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_API_VERSION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CHANNEL_CONDITION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CHANNEL_CONDITION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_DEBUG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_DEBUG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_RECEIVE_EVENT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_RECEIVE_EVENT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_FRAME_FILTERING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_FRAME_FILTERING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CAN_TX_DL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CAN_TX_DL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CAN_DATA_PADDING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CAN_DATA_PADDING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CAN_PADDING_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CAN_PADDING_VALUE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_ISO_REV_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_ISO_REV));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_J1939_PRIORITY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_J1939_PRIORITY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_MSG_PENDING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_MSG_PENDING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_BLOCK_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_BLOCK_SIZE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_BLOCK_SIZE_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_BLOCK_SIZE_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SEPARATION_TIME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SEPARATION_TIME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SEPARATION_TIME_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SEPARATION_TIME_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_WFT_MAX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_WFT_MAX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_WFT_MAX_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_WFT_MAX_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_AS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_AS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_AR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_AR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_BR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_BR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_BS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_BS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_CR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_CR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_CS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_CS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_TIMEOUT_TOLERANCE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_TIMEOUT_TOLERANCE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_ISO_TIMEOUTS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_ISO_TIMEOUTS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SELFRECEIVE_LATENCY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SELFRECEIVE_LATENCY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_MAX_RX_QUEUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_MAX_RX_QUEUE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_KEEP_HIGHER_LAYER_MESSAGES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_KEEP_HIGHER_LAYER_MESSAGES));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_FILTER_CAN_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_FILTER_CAN_ID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SUPPORT_29B_ENHANCED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SUPPORT_29B_ENHANCED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SUPPORT_29B_FIXED_NORMAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SUPPORT_29B_FIXED_NORMAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_SUPPORT_29B_MIXED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_SUPPORT_29B_MIXED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_MSG_CHECK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_MSG_CHECK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_RESET_HARD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_RESET_HARD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_NETWORK_LAYER_DESIGN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_NETWORK_LAYER_DESIGN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_ALLOW_MSGTYPE_CANINFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_ALLOW_MSGTYPE_CANINFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_USER_CONTEXT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_USER_CONTEXT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_HARDWARE_NAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_HARDWARE_NAME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_DEVICE_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_DEVICE_ID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_DEVICE_NUMBER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_DEVICE_NUMBER));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CONTROLLER_NUMBER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CONTROLLER_NUMBER));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_PARAMETER_CHANNEL_FEATURES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_PARAMETER_CHANNEL_FEATURES));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_CAN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_CANFD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_CANFD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_ISOTP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_ISOTP));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_CANINFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_CANINFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_FRAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_FRAME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGTYPE_ANY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGTYPE_ANY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGFLAG_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGFLAG_NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGFLAG_LOOPBACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGFLAG_LOOPBACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGFLAG_ISOTP_FRAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGFLAG_ISOTP_FRAME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGFLAG_QOVERRUN_OCCURED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGFLAG_QOVERRUN_OCCURED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_STANDARD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_STANDARD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_RTR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_RTR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_EXTENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_EXTENDED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_FD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_BRS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_BRS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_ESI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_ESI));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_ERRFRAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_ERRFRAME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_STATUS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_ECHO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_ECHO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_SELFRECEIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_SELFRECEIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_MSGTYPE_FLAG_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_CAN_MSGTYPE_FLAG_INFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_DIAGNOSTIC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_DIAGNOSTIC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_REMOTE_DIAGNOSTIC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_REMOTE_DIAGNOSTIC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_RX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_RX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_MSGTYPE_MASK_INDICATION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_MSGTYPE_MASK_INDICATION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_NORMAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_NORMAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_FIXED_NORMAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_FIXED_NORMAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_EXTENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_EXTENDED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_MIXED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_MIXED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_FORMAT_ENHANCED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_FORMAT_ENHANCED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_ADDRESSING_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_ADDRESSING_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_ADDRESSING_PHYSICAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_ADDRESSING_PHYSICAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISOTP_ADDRESSING_FUNCTIONAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_ISOTP_ADDRESSING_FUNCTIONAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_DEBUG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_DEBUG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_CAN_DATA_PADDING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_CAN_DATA_PADDING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_CAN_PADDING_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_CAN_PADDING_VALUE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_J1939_PRIORITY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_J1939_PRIORITY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_MSG_PENDING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_MSG_PENDING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_BLOCK_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_BLOCK_SIZE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_BLOCK_SIZE_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_BLOCK_SIZE_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_SEPARATION_TIME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_SEPARATION_TIME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_SEPARATION_TIME_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_SEPARATION_TIME_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_WFT_MAX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_WFT_MAX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_WFT_MAX_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_WFT_MAX_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_AS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_AS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_AR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_AR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_BS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_BS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_BR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_BR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_CS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_CS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_TIMEOUT_CR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_TIMEOUT_CR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_OPTION_SELFRECEIVE_LATENCY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_OPTION_SELFRECEIVE_LATENCY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGPROGRESS_STATE_QUEUED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGPROGRESS_STATE_QUEUED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGPROGRESS_STATE_PROCESSING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGPROGRESS_STATE_PROCESSING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGPROGRESS_STATE_COMPLETED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGPROGRESS_STATE_COMPLETED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGPROGRESS_STATE_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGPROGRESS_STATE_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGDIRECTION_RX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGDIRECTION_RX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSGDIRECTION_TX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PCANTP_MSGDIRECTION_TX));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_VALUE_PARAMETER_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_VALUE_PARAMETER_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_NOTICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xF4));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xF3));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_WARNING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xF2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_DEBUG_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xF1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CHANNEL_UNAVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CHANNEL_AVAILABLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CHANNEL_OCCUPIED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_WFT_MAX_UNLIMITED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_WFT_MAX_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_WFT_MAX_TX_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSG_PENDING_HIDE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MSG_PENDING_SHOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_DATA_PADDING_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x00U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_DATA_PADDING_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x01U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_DATA_PADDING_VALUE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x55));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FRAME_FILTERING_ISOTP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x00));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FRAME_FILTERING_CAN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FRAME_FILTERING_VERBOSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_J1939_PRIORITY_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x06));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_CAN_ID_11_BIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x7FF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_CAN_ID_29_BIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x1FFFFFFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_LENGTH_CAN_STANDARD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x08));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_LENGTH_CAN_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x40));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_LENGTH_ISOTP2004_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xFFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_LENGTH_ISOTP2016_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xFFFFFFFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_LENGTH_ALLOC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0xFFFFFFU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_CAN_TX_DL_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x08));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISO_REV_2004_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x01));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISO_REV_2016_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x02));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BLOCK_SIZE_TX_IGNORE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xFFFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_SEPERATION_TIME_TX_IGNORE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0xFFFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISO_TIMEOUTS_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_ISO_TIMEOUTS_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_SELFRECEIVE_LATENCY_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_SELFRECEIVE_LATENCY_LIGHT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_SELFRECEIVE_LATENCY_OPTIMIZED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_MAX_RX_QUEUE_DEFAULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(32767));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETWORK_LAYER_FULL_DUPLEX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_NETWORK_LAYER_HALF_DUPLEX_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(1));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STMIN_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BS_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_AR_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_AS_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_BR_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_BS_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_CR_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_CS_ISO_15765_2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*1000)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_TOLERANCE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_STMIN_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_BS_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_AR_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*33)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_AS_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*33)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_BR_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*75)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_BS_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*75)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_CR_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*150)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_TIMEOUT_CS_ISO_15765_4_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >((1000*17)));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FLAG_MASK_PRIORITY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x07));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FLAG_PADDING_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x08));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FLAG_INDICATION_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x10));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCANTP_FLAG_ECHO_FRAMES_ON_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(0x20));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_size_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_size_set" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msginfo_size_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->size = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_size_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_size_get" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);result = (uint32_t) ((arg1)->size);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_flags_set" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msginfo_flags_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_flags_get" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);result = (uint32_t) ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_extra_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_extra_set" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msginfo_extra_set" "', argument " "2"" of type '" "void *""'"); 
  }if (arg1) (arg1)->extra = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msginfo_extra_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msginfo *arg1 = (_cantp_msginfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msginfo_extra_get" "', argument " "1"" of type '" "_cantp_msginfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msginfo * >(argp1);result = (void *) ((arg1)->extra);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_exports_cantp_msginfo_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msginfo;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msginfo *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msginfo.");
  }
  result = (_cantp_msginfo *)new _cantp_msginfo();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::_exports_cantp_msginfo_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msginfo_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msginfo_templ() {
  auto arg1 = reinterpret_cast<_cantp_msginfo *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_name_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption *arg1 = (_cantp_msgoption *) 0 ;
  cantp_option arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_name_set" "', argument " "1"" of type '" "_cantp_msgoption *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgoption_name_set" "', argument " "2"" of type '" "cantp_option""'");
  } 
  arg2 = static_cast< cantp_option >(val2);if (arg1) (arg1)->name = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_name_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption *arg1 = (_cantp_msgoption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_option result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_name_get" "', argument " "1"" of type '" "_cantp_msgoption *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption * >(argp1);result = (cantp_option) ((arg1)->name);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_value_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption *arg1 = (_cantp_msgoption *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_value_set" "', argument " "1"" of type '" "_cantp_msgoption *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgoption_value_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->value = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_value_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption *arg1 = (_cantp_msgoption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_value_get" "', argument " "1"" of type '" "_cantp_msgoption *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption * >(argp1);result = (uint32_t) ((arg1)->value);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgoption_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgoption;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgoption *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgoption.");
  }
  result = (_cantp_msgoption *)new _cantp_msgoption();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgoption_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgoption_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgoption_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgoption *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_list_buffer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption_list *arg1 = (_cantp_msgoption_list *) 0 ;
  cantp_msgoption *arg2 = (cantp_msgoption *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_list_buffer_set" "', argument " "1"" of type '" "_cantp_msgoption_list *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption_list * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgoption_list_buffer_set" "', argument " "2"" of type '" "cantp_msgoption *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption * >(argp2);if (arg1) (arg1)->buffer = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_list_buffer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption_list *arg1 = (_cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_list_buffer_get" "', argument " "1"" of type '" "_cantp_msgoption_list *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption_list * >(argp1);result = (cantp_msgoption *) ((arg1)->buffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_list_count_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption_list *arg1 = (_cantp_msgoption_list *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_list_count_set" "', argument " "1"" of type '" "_cantp_msgoption_list *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption_list * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgoption_list_count_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->count = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgoption_list_count_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgoption_list *arg1 = (_cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgoption_list_count_get" "', argument " "1"" of type '" "_cantp_msgoption_list *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgoption_list * >(argp1);result = (uint32_t) ((arg1)->count);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgoption_list_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgoption_list;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgoption_list *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgoption_list.");
  }
  result = (_cantp_msgoption_list *)new _cantp_msgoption_list();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgoption_list_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgoption_list_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgoption_list_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgoption_list *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_can_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_can_id_set" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_can_info_can_id_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->can_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_can_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_can_id_get" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);result = (uint32_t) ((arg1)->can_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_can_msgtype_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  cantp_can_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_can_msgtype_set" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_can_info_can_msgtype_set" "', argument " "2"" of type '" "cantp_can_msgtype""'");
  } 
  arg2 = static_cast< cantp_can_msgtype >(val2);if (arg1) (arg1)->can_msgtype = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_can_msgtype_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_can_msgtype result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_can_msgtype_get" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);result = (cantp_can_msgtype) ((arg1)->can_msgtype);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_dlc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_dlc_set" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_can_info_dlc_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->dlc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_wrap_cantp_can_info_dlc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_can_info *arg1 = (_cantp_can_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_can_info_dlc_get" "', argument " "1"" of type '" "_cantp_can_info *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_can_info * >(argp1);result = (uint8_t) ((arg1)->dlc);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_exports_cantp_can_info_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_can_info;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_can_info *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_can_info.");
  }
  result = (_cantp_can_info *)new _cantp_can_info();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::_exports_cantp_can_info_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_can_info_templ<SWIG_OBJ_WRAP>::~_exports_cantp_can_info_templ() {
  auto arg1 = reinterpret_cast<_cantp_can_info *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_msgtype_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  cantp_isotp_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_msgtype_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_msgtype_set" "', argument " "2"" of type '" "cantp_isotp_msgtype""'");
  } 
  arg2 = static_cast< cantp_isotp_msgtype >(val2);if (arg1) (arg1)->msgtype = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_msgtype_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_isotp_msgtype result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_msgtype_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (cantp_isotp_msgtype) ((arg1)->msgtype);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_format_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  cantp_isotp_format arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_format_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_format_set" "', argument " "2"" of type '" "cantp_isotp_format""'");
  } 
  arg2 = static_cast< cantp_isotp_format >(val2);if (arg1) (arg1)->format = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_format_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_isotp_format result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_format_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (cantp_isotp_format) ((arg1)->format);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_target_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  cantp_isotp_addressing arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_target_type_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_target_type_set" "', argument " "2"" of type '" "cantp_isotp_addressing""'");
  } 
  arg2 = static_cast< cantp_isotp_addressing >(val2);if (arg1) (arg1)->target_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_target_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_isotp_addressing result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_target_type_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (cantp_isotp_addressing) ((arg1)->target_type);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_source_addr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_source_addr_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_source_addr_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);if (arg1) (arg1)->source_addr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_source_addr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_source_addr_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (uint16_t) ((arg1)->source_addr);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_target_addr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_target_addr_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_target_addr_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);if (arg1) (arg1)->target_addr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_target_addr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_target_addr_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (uint16_t) ((arg1)->target_addr);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_extension_addr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_extension_addr_set" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_netaddrinfo_extension_addr_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->extension_addr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_wrap_cantp_netaddrinfo_extension_addr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_netaddrinfo *arg1 = (_cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_netaddrinfo_extension_addr_get" "', argument " "1"" of type '" "_cantp_netaddrinfo *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_netaddrinfo * >(argp1);result = (uint8_t) ((arg1)->extension_addr);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_exports_cantp_netaddrinfo_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_netaddrinfo;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_netaddrinfo *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_netaddrinfo.");
  }
  result = (_cantp_netaddrinfo *)new _cantp_netaddrinfo();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::_exports_cantp_netaddrinfo_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_netaddrinfo_templ<SWIG_OBJ_WRAP>::~_exports_cantp_netaddrinfo_templ() {
  auto arg1 = reinterpret_cast<_cantp_netaddrinfo *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_uid_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  uintptr_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_uid_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_mapping_uid_set" "', argument " "2"" of type '" "uintptr_t""'");
  } 
  arg2 = static_cast< uintptr_t >(val2);if (arg1) (arg1)->uid = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_uid_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uintptr_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_uid_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (uintptr_t) ((arg1)->uid);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_id_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_mapping_can_id_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->can_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_id_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (uint32_t) ((arg1)->can_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_id_flow_ctrl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_id_flow_ctrl_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_mapping_can_id_flow_ctrl_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->can_id_flow_ctrl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_id_flow_ctrl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_id_flow_ctrl_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (uint32_t) ((arg1)->can_id_flow_ctrl);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_msgtype_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  cantp_can_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_msgtype_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_mapping_can_msgtype_set" "', argument " "2"" of type '" "cantp_can_msgtype""'");
  } 
  arg2 = static_cast< cantp_can_msgtype >(val2);if (arg1) (arg1)->can_msgtype = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_msgtype_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_can_msgtype result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_msgtype_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (cantp_can_msgtype) ((arg1)->can_msgtype);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_tx_dlc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_tx_dlc_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_mapping_can_tx_dlc_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->can_tx_dlc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_can_tx_dlc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_can_tx_dlc_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (uint8_t) ((arg1)->can_tx_dlc);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_netaddrinfo_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  cantp_netaddrinfo *arg2 = (cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_netaddrinfo_set" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_mapping_netaddrinfo_set" "', argument " "2"" of type '" "cantp_netaddrinfo *""'"); 
  }
  arg2 = reinterpret_cast< cantp_netaddrinfo * >(argp2);if (arg1) (arg1)->netaddrinfo = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_wrap_cantp_mapping_netaddrinfo_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_mapping *arg1 = (_cantp_mapping *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netaddrinfo *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_mapping_netaddrinfo_get" "', argument " "1"" of type '" "_cantp_mapping *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_mapping * >(argp1);result = (cantp_netaddrinfo *)& ((arg1)->netaddrinfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_exports_cantp_mapping_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_mapping;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_mapping *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_mapping.");
  }
  result = (_cantp_mapping *)new _cantp_mapping();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::_exports_cantp_mapping_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_mapping_templ<SWIG_OBJ_WRAP>::~_exports_cantp_mapping_templ() {
  auto arg1 = reinterpret_cast<_cantp_mapping *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_uid_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  uintptr_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_uid_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgrule_uid_set" "', argument " "2"" of type '" "uintptr_t""'");
  } 
  arg2 = static_cast< uintptr_t >(val2);if (arg1) (arg1)->uid = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_uid_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uintptr_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_uid_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (uintptr_t) ((arg1)->uid);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  cantp_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_type_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgrule_type_set" "', argument " "2"" of type '" "cantp_msgtype""'");
  } 
  arg2 = static_cast< cantp_msgtype >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgtype result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_type_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (cantp_msgtype) ((arg1)->type);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_can_info_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  cantp_can_info *arg2 = (cantp_can_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_can_info_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgrule_can_info_set" "', argument " "2"" of type '" "cantp_can_info *""'"); 
  }
  arg2 = reinterpret_cast< cantp_can_info * >(argp2);if (arg1) (arg1)->can_info = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_can_info_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_can_info *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_can_info_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (cantp_can_info *)& ((arg1)->can_info);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_can_info, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_netaddrinfo_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  cantp_netaddrinfo *arg2 = (cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_netaddrinfo_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgrule_netaddrinfo_set" "', argument " "2"" of type '" "cantp_netaddrinfo *""'"); 
  }
  arg2 = reinterpret_cast< cantp_netaddrinfo * >(argp2);if (arg1) (arg1)->netaddrinfo = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_netaddrinfo_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netaddrinfo *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_netaddrinfo_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (cantp_netaddrinfo *)& ((arg1)->netaddrinfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_options_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  cantp_msgoption_list *arg2 = (cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_options_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgrule_options_set" "', argument " "2"" of type '" "cantp_msgoption_list *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption_list * >(argp2);if (arg1) (arg1)->options = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_options_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_options_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (cantp_msgoption_list *)& ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  uintptr_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_reserved_set" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgrule_reserved_set" "', argument " "2"" of type '" "uintptr_t""'");
  } 
  arg2 = static_cast< uintptr_t >(val2);if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgrule_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgrule *arg1 = (_cantp_msgrule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uintptr_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgrule_reserved_get" "', argument " "1"" of type '" "_cantp_msgrule *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgrule * >(argp1);result = (uintptr_t) ((arg1)->reserved);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgrule_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgrule;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgrule *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgrule.");
  }
  result = (_cantp_msgrule *)new _cantp_msgrule();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgrule_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgrule_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgrule_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgrule *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  cantp_msgflag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_flags_set" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_flags_set" "', argument " "2"" of type '" "cantp_msgflag""'");
  } 
  arg2 = static_cast< cantp_msgflag >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgflag result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_flags_get" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);result = (cantp_msgflag) ((arg1)->flags);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_length_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_length_set" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_length_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->length = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_length_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_length_get" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);result = (uint32_t) ((arg1)->length);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_data_set" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_data_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_data_get" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);result = (uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_netstatus_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  cantp_netstatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_netstatus_set" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_netstatus_set" "', argument " "2"" of type '" "cantp_netstatus""'");
  } 
  arg2 = static_cast< cantp_netstatus >(val2);if (arg1) (arg1)->netstatus = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_netstatus_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netstatus result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_netstatus_get" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);result = (cantp_netstatus) ((arg1)->netstatus);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_options_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  cantp_msgoption_list *arg2 = (cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_options_set" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_options_set" "', argument " "2"" of type '" "cantp_msgoption_list *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption_list * >(argp2);if (arg1) (arg1)->options = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_options_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata *arg1 = (_cantp_msgdata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_options_get" "', argument " "1"" of type '" "_cantp_msgdata *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata * >(argp1);result = (cantp_msgoption_list *) ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgdata;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgdata *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgdata.");
  }
  result = (_cantp_msgdata *)new _cantp_msgdata();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgdata_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgdata *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  cantp_msgflag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_flags_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_can_flags_set" "', argument " "2"" of type '" "cantp_msgflag""'");
  } 
  arg2 = static_cast< cantp_msgflag >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgflag result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_flags_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (cantp_msgflag) ((arg1)->flags);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_length_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_length_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_can_length_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->length = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_length_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_length_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (uint32_t) ((arg1)->length);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_data_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_can_data_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_data_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_netstatus_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  cantp_netstatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_netstatus_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_can_netstatus_set" "', argument " "2"" of type '" "cantp_netstatus""'");
  } 
  arg2 = static_cast< cantp_netstatus >(val2);if (arg1) (arg1)->netstatus = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_netstatus_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netstatus result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_netstatus_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (cantp_netstatus) ((arg1)->netstatus);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_options_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  cantp_msgoption_list *arg2 = (cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_options_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_can_options_set" "', argument " "2"" of type '" "cantp_msgoption_list *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption_list * >(argp2);if (arg1) (arg1)->options = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_options_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_options_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (cantp_msgoption_list *) ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_data_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_data_max_set" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_can_data_max_set" "', argument " "2"" of type '" "uint8_t [0x08]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)0x08; ++ii) *(uint8_t *)&arg1->data_max[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data_max""' of type '""uint8_t [0x08]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_can_data_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_can *arg1 = (_cantp_msgdata_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_can_data_max_get" "', argument " "1"" of type '" "_cantp_msgdata_can *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_can * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->data_max);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_can_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgdata_can;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgdata_can *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgdata_can.");
  }
  result = (_cantp_msgdata_can *)new _cantp_msgdata_can();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_can_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_can_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgdata_can_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgdata_can *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  cantp_msgflag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_flags_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_canfd_flags_set" "', argument " "2"" of type '" "cantp_msgflag""'");
  } 
  arg2 = static_cast< cantp_msgflag >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgflag result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_flags_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (cantp_msgflag) ((arg1)->flags);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_length_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_length_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_canfd_length_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->length = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_length_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_length_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (uint32_t) ((arg1)->length);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_data_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_canfd_data_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_data_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_netstatus_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  cantp_netstatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_netstatus_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_canfd_netstatus_set" "', argument " "2"" of type '" "cantp_netstatus""'");
  } 
  arg2 = static_cast< cantp_netstatus >(val2);if (arg1) (arg1)->netstatus = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_netstatus_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netstatus result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_netstatus_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (cantp_netstatus) ((arg1)->netstatus);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_options_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  cantp_msgoption_list *arg2 = (cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_options_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_canfd_options_set" "', argument " "2"" of type '" "cantp_msgoption_list *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption_list * >(argp2);if (arg1) (arg1)->options = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_options_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_options_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (cantp_msgoption_list *) ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_data_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_data_max_set" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_canfd_data_max_set" "', argument " "2"" of type '" "uint8_t [0x40]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)0x40; ++ii) *(uint8_t *)&arg1->data_max[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data_max""' of type '""uint8_t [0x40]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_canfd_data_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_canfd *arg1 = (_cantp_msgdata_canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_canfd_data_max_get" "', argument " "1"" of type '" "_cantp_msgdata_canfd *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_canfd * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->data_max);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_canfd_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgdata_canfd;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgdata_canfd *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgdata_canfd.");
  }
  result = (_cantp_msgdata_canfd *)new _cantp_msgdata_canfd();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_canfd_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_canfd_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgdata_canfd_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgdata_canfd *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  cantp_msgflag arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_flags_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_isotp_flags_set" "', argument " "2"" of type '" "cantp_msgflag""'");
  } 
  arg2 = static_cast< cantp_msgflag >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgflag result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_flags_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (cantp_msgflag) ((arg1)->flags);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_length_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_length_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_isotp_length_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->length = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_length_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_length_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (uint32_t) ((arg1)->length);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_data_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_isotp_data_set" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_data_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_netstatus_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  cantp_netstatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_netstatus_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgdata_isotp_netstatus_set" "', argument " "2"" of type '" "cantp_netstatus""'");
  } 
  arg2 = static_cast< cantp_netstatus >(val2);if (arg1) (arg1)->netstatus = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_netstatus_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netstatus result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_netstatus_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (cantp_netstatus) ((arg1)->netstatus);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_options_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  cantp_msgoption_list *arg2 = (cantp_msgoption_list *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_options_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msgoption_list, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_isotp_options_set" "', argument " "2"" of type '" "cantp_msgoption_list *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgoption_list * >(argp2);if (arg1) (arg1)->options = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_options_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgoption_list *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_options_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (cantp_msgoption_list *) ((arg1)->options);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgoption_list, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_netaddrinfo_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  cantp_netaddrinfo *arg2 = (cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_netaddrinfo_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_isotp_netaddrinfo_set" "', argument " "2"" of type '" "cantp_netaddrinfo *""'"); 
  }
  arg2 = reinterpret_cast< cantp_netaddrinfo * >(argp2);if (arg1) (arg1)->netaddrinfo = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_netaddrinfo_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_netaddrinfo *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_netaddrinfo_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (cantp_netaddrinfo *)& ((arg1)->netaddrinfo);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_reserved_set" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgdata_isotp_reserved_set" "', argument " "2"" of type '" "void *""'"); 
  }if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgdata_isotp_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgdata_isotp *arg1 = (_cantp_msgdata_isotp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgdata_isotp_reserved_get" "', argument " "1"" of type '" "_cantp_msgdata_isotp *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgdata_isotp * >(argp1);result = (void *) ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_isotp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgdata_isotp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgdata_isotp *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgdata_isotp.");
  }
  result = (_cantp_msgdata_isotp *)new _cantp_msgdata_isotp();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgdata_isotp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgdata_isotp_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgdata_isotp_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgdata_isotp *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  cantp_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_type_set" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msg_type_set" "', argument " "2"" of type '" "cantp_msgtype""'");
  } 
  arg2 = static_cast< cantp_msgtype >(val2);if (arg1) (arg1)->type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgtype result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_type_get" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);result = (cantp_msgtype) ((arg1)->type);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  cantp_msginfo *arg2 = (cantp_msginfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_reserved_set" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msg_reserved_set" "', argument " "2"" of type '" "cantp_msginfo *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msginfo * >(argp2);if (arg1) (arg1)->reserved = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msginfo *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_reserved_get" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);result = (cantp_msginfo *)& ((arg1)->reserved);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msginfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_can_info_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  cantp_can_info *arg2 = (cantp_can_info *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_can_info_set" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_can_info, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msg_can_info_set" "', argument " "2"" of type '" "cantp_can_info *""'"); 
  }
  arg2 = reinterpret_cast< cantp_can_info * >(argp2);if (arg1) (arg1)->can_info = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msg_can_info_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msg *arg1 = (_cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_can_info *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msg_can_info_get" "', argument " "1"" of type '" "_cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msg * >(argp1);result = (cantp_can_info *)& ((arg1)->can_info);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_can_info, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_exports_cantp_msg_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msg;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msg *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msg.");
  }
  result = (_cantp_msg *)new _cantp_msg();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msg_templ<SWIG_OBJ_WRAP>::_exports_cantp_msg_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msg_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msg_templ() {
  auto arg1 = reinterpret_cast<_cantp_msg *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_state_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  cantp_msgprogress_state arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_state_set" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgprogress_state_set" "', argument " "2"" of type '" "cantp_msgprogress_state""'");
  } 
  arg2 = static_cast< cantp_msgprogress_state >(val2);if (arg1) (arg1)->state = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_state_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgprogress_state result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_state_get" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);result = (cantp_msgprogress_state) ((arg1)->state);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_percentage_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_percentage_set" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "cantp_msgprogress_percentage_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->percentage = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_percentage_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_percentage_get" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);result = (uint8_t) ((arg1)->percentage);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_buffer_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_buffer_set" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p__cantp_msg, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "cantp_msgprogress_buffer_set" "', argument " "2"" of type '" "cantp_msg *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);if (arg1) (arg1)->buffer = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_wrap_cantp_msgprogress_buffer_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  _cantp_msgprogress *arg1 = (_cantp_msgprogress *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msg *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "cantp_msgprogress_buffer_get" "', argument " "1"" of type '" "_cantp_msgprogress *""'"); 
  }
  arg1 = reinterpret_cast< _cantp_msgprogress * >(argp1);result = (cantp_msg *) ((arg1)->buffer);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msg, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgprogress_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p__cantp_msgprogress;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  _cantp_msgprogress *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_cantp_msgprogress.");
  }
  result = (_cantp_msgprogress *)new _cantp_msgprogress();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::_exports_cantp_msgprogress_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_cantp_msgprogress_templ<SWIG_OBJ_WRAP>::~_exports_cantp_msgprogress_templ() {
  auto arg1 = reinterpret_cast<_cantp_msgprogress *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_function
Napi::Value _wrap_CANTP_Initialize_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_baudrate arg2 ;
  cantp_hwtype arg3 = (cantp_hwtype) (cantp_hwtype) 0 ;
  uint32_t arg4 = (uint32_t) 0 ;
  uint16_t arg5 = (uint16_t) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_Initialize_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_Initialize_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_Initialize_2016" "', argument " "2"" of type '" "cantp_baudrate""'");
  } 
  arg2 = static_cast< cantp_baudrate >(val2);if(info.Length() > 2)
  {
    ecode3 = SWIG_AsVal_int(info[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_Initialize_2016" "', argument " "3"" of type '" "cantp_hwtype""'");
    } 
    arg3 = static_cast< cantp_hwtype >(val3);
  }
  if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_unsigned_SS_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CANTP_Initialize_2016" "', argument " "4"" of type '" "uint32_t""'");
    } 
    arg4 = static_cast< uint32_t >(val4);
  }
  if(info.Length() > 4)
  {
    ecode5 = SWIG_AsVal_unsigned_SS_short(info[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CANTP_Initialize_2016" "', argument " "5"" of type '" "uint16_t""'");
    } 
    arg5 = static_cast< uint16_t >(val5);
  }
  result = (cantp_status)CANTP_Initialize_2016(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_InitializeFD_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_InitializeFD_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_InitializeFD_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_InitializeFD_2016" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);result = (cantp_status)CANTP_InitializeFD_2016(arg1,(char const *)arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_Uninitialize_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_Uninitialize_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_Uninitialize_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);result = (cantp_status)CANTP_Uninitialize_2016(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_Reset_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_Reset_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_Reset_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);result = (cantp_status)CANTP_Reset_2016(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_GetCanBusStatus_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_GetCanBusStatus_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_GetCanBusStatus_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);result = (cantp_status)CANTP_GetCanBusStatus_2016(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_Read_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  cantp_msgtype arg4 = (cantp_msgtype) PCANTP_MSGTYPE_ANY ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_Read_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_Read_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_Read_2016" "', argument " "2"" of type '" "cantp_msg *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);if(info.Length() > 2)
  {
    res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_unsigned_long_long, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CANTP_Read_2016" "', argument " "3"" of type '" "uint64_t *""'"); 
    }
    arg3 = reinterpret_cast< uint64_t * >(argp3);
  }
  if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_int(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CANTP_Read_2016" "', argument " "4"" of type '" "cantp_msgtype""'");
    } 
    arg4 = static_cast< cantp_msgtype >(val4);
  }
  result = (cantp_status)CANTP_Read_2016(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_GetMsgProgress_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  cantp_msgdirection arg3 ;
  cantp_msgprogress *arg4 = (cantp_msgprogress *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_GetMsgProgress_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_GetMsgProgress_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_GetMsgProgress_2016" "', argument " "2"" of type '" "cantp_msg *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);ecode3 = SWIG_AsVal_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_GetMsgProgress_2016" "', argument " "3"" of type '" "cantp_msgdirection""'");
  } 
  arg3 = static_cast< cantp_msgdirection >(val3);res4 = SWIG_ConvertPtr(info[3], &argp4,SWIGTYPE_p__cantp_msgprogress, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CANTP_GetMsgProgress_2016" "', argument " "4"" of type '" "cantp_msgprogress *""'"); 
  }
  arg4 = reinterpret_cast< cantp_msgprogress * >(argp4);result = (cantp_status)CANTP_GetMsgProgress_2016(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_Write_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_Write_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_Write_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_Write_2016" "', argument " "2"" of type '" "cantp_msg *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);result = (cantp_status)CANTP_Write_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_GetValue_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_parameter arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_GetValue_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_GetValue_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_GetValue_2016" "', argument " "2"" of type '" "cantp_parameter""'");
  } 
  arg2 = static_cast< cantp_parameter >(val2);{
    {
      if (info[2].IsBuffer()) {
        Napi::Buffer<char> buf = info[2].As<Napi::Buffer<char>>();
        arg3 = reinterpret_cast<char *>(buf.Data());
        arg4 = buf.ByteLength();
        
      } else {
        SWIG_exception_fail(SWIG_TypeError, "in method 'CANTP_GetValue_2016', argument is not a Buffer");
      }
    }
  }
  result = (cantp_status)CANTP_GetValue_2016(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_SetValue_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_parameter arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_SetValue_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_SetValue_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_SetValue_2016" "', argument " "2"" of type '" "cantp_parameter""'");
  } 
  arg2 = static_cast< cantp_parameter >(val2);{
    {
      if (info[2].IsBuffer()) {
        Napi::Buffer<char> buf = info[2].As<Napi::Buffer<char>>();
        arg3 = reinterpret_cast<char *>(buf.Data());
        arg4 = buf.ByteLength();
        
      } else {
        SWIG_exception_fail(SWIG_TypeError, "in method 'CANTP_SetValue_2016', argument is not a Buffer");
      }
    }
  }
  result = (cantp_status)CANTP_SetValue_2016(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_AddMapping_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_mapping *arg2 = (cantp_mapping *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_AddMapping_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_AddMapping_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_AddMapping_2016" "', argument " "2"" of type '" "cantp_mapping *""'"); 
  }
  arg2 = reinterpret_cast< cantp_mapping * >(argp2);result = (cantp_status)CANTP_AddMapping_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_RemoveMappings_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  uint32_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_RemoveMappings_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_RemoveMappings_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_RemoveMappings_2016" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);result = (cantp_status)CANTP_RemoveMappings_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_RemoveMapping_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  uintptr_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_RemoveMapping_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_RemoveMapping_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_RemoveMapping_2016" "', argument " "2"" of type '" "uintptr_t""'");
  } 
  arg2 = static_cast< uintptr_t >(val2);result = (cantp_status)CANTP_RemoveMapping_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_GetMappings_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_mapping *arg2 = (cantp_mapping *) 0 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_GetMappings_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_GetMappings_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_mapping, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_GetMappings_2016" "', argument " "2"" of type '" "cantp_mapping *""'"); 
  }
  arg2 = reinterpret_cast< cantp_mapping * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CANTP_GetMappings_2016" "', argument " "3"" of type '" "uint32_t *""'"); 
  }
  arg3 = reinterpret_cast< uint32_t * >(argp3);result = (cantp_status)CANTP_GetMappings_2016(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_AddFiltering_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  cantp_can_msgtype arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_AddFiltering_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_AddFiltering_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_AddFiltering_2016" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_AddFiltering_2016" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);ecode4 = SWIG_AsVal_bool(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CANTP_AddFiltering_2016" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);ecode5 = SWIG_AsVal_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CANTP_AddFiltering_2016" "', argument " "5"" of type '" "cantp_can_msgtype""'");
  } 
  arg5 = static_cast< cantp_can_msgtype >(val5);result = (cantp_status)CANTP_AddFiltering_2016(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_RemoveFiltering_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  uint32_t arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  cantp_can_msgtype arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_RemoveFiltering_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_RemoveFiltering_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_RemoveFiltering_2016" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_RemoveFiltering_2016" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);ecode4 = SWIG_AsVal_bool(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CANTP_RemoveFiltering_2016" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);ecode5 = SWIG_AsVal_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CANTP_RemoveFiltering_2016" "', argument " "5"" of type '" "cantp_can_msgtype""'");
  } 
  arg5 = static_cast< cantp_can_msgtype >(val5);result = (cantp_status)CANTP_RemoveFiltering_2016(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_AddMsgRule_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  cantp_msgrule *arg2 = (cantp_msgrule *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_AddMsgRule_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_AddMsgRule_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msgrule, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_AddMsgRule_2016" "', argument " "2"" of type '" "cantp_msgrule *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msgrule * >(argp2);result = (cantp_status)CANTP_AddMsgRule_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_RemoveMsgRule_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_handle arg1 ;
  uintptr_t arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_RemoveMsgRule_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_RemoveMsgRule_2016" "', argument " "1"" of type '" "cantp_handle""'");
  } 
  arg1 = static_cast< cantp_handle >(val1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_RemoveMsgRule_2016" "', argument " "2"" of type '" "uintptr_t""'");
  } 
  arg2 = static_cast< uintptr_t >(val2);result = (cantp_status)CANTP_RemoveMsgRule_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_GetErrorText_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_status arg1 ;
  uint16_t arg2 ;
  char *arg3 = (char *) 0 ;
  uint32_t arg4 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_GetErrorText_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_GetErrorText_2016" "', argument " "1"" of type '" "cantp_status""'");
  } 
  arg1 = static_cast< cantp_status >(val1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_GetErrorText_2016" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);{
    {
      if (info[2].IsBuffer()) {
        Napi::Buffer<char> buf = info[2].As<Napi::Buffer<char>>();
        arg3 = reinterpret_cast<char *>(buf.Data());
        arg4 = buf.ByteLength();
        
      } else {
        SWIG_exception_fail(SWIG_TypeError, "in method 'CANTP_GetErrorText_2016', argument is not a Buffer");
      }
    }
  }
  result = (cantp_status)CANTP_GetErrorText_2016(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgDataAlloc_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  cantp_msgtype arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgDataAlloc_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgDataAlloc_2016" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_MsgDataAlloc_2016" "', argument " "2"" of type '" "cantp_msgtype""'");
  } 
  arg2 = static_cast< cantp_msgtype >(val2);result = (cantp_status)CANTP_MsgDataAlloc_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgDataInit_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  uint32_t arg2 ;
  cantp_can_msgtype arg3 ;
  uint32_t arg4 ;
  void *arg5 = (void *) 0 ;
  cantp_netaddrinfo *arg6 = (cantp_netaddrinfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgDataInit_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgDataInit_2016" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_MsgDataInit_2016" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);ecode3 = SWIG_AsVal_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_MsgDataInit_2016" "', argument " "3"" of type '" "cantp_can_msgtype""'");
  } 
  arg3 = static_cast< cantp_can_msgtype >(val3);{
    {
      if (info[3].IsBuffer()) {
        Napi::Buffer<char> buf = info[3].As<Napi::Buffer<char>>();
        arg5 = reinterpret_cast<void *>(buf.Data());
        arg4 = buf.ByteLength();
        
      } else {
        SWIG_exception_fail(SWIG_TypeError, "in method 'CANTP_MsgDataInit_2016', argument is not a Buffer");
      }
    }
  }
  if(info.Length() > 4)
  {
    res6 = SWIG_ConvertPtr(info[4], &argp6,SWIGTYPE_p__cantp_netaddrinfo, 0 |  0 );
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CANTP_MsgDataInit_2016" "', argument " "6"" of type '" "cantp_netaddrinfo *""'"); 
    }
    arg6 = reinterpret_cast< cantp_netaddrinfo * >(argp6);
  }
  result = (cantp_status)CANTP_MsgDataInit_2016(arg1,arg2,arg3,arg4,(void const *)arg5,arg6);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgDataInitOptions_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgDataInitOptions_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgDataInitOptions_2016" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_MsgDataInitOptions_2016" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);result = (cantp_status)CANTP_MsgDataInitOptions_2016(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgDataFree_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgDataFree_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgDataFree_2016" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);result = (cantp_status)CANTP_MsgDataFree_2016(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgEqual_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgEqual_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgEqual_2016" "', argument " "1"" of type '" "cantp_msg const *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_MsgEqual_2016" "', argument " "2"" of type '" "cantp_msg const *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);ecode3 = SWIG_AsVal_bool(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_MsgEqual_2016" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);result = (bool)CANTP_MsgEqual_2016((_cantp_msg const *)arg1,(_cantp_msg const *)arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgCopy_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  cantp_msg *arg2 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  cantp_status result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgCopy_2016.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CANTP_MsgCopy_2016" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CANTP_MsgCopy_2016" "', argument " "2"" of type '" "cantp_msg const *""'"); 
  }
  arg2 = reinterpret_cast< cantp_msg * >(argp2);result = (cantp_status)CANTP_MsgCopy_2016(arg1,(_cantp_msg const *)arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgDlcToLength_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint8_t arg1 ;
  unsigned char val1 ;
  int ecode1 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgDlcToLength_2016.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_char(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_MsgDlcToLength_2016" "', argument " "1"" of type '" "uint8_t""'");
  } 
  arg1 = static_cast< uint8_t >(val1);result = (uint32_t)CANTP_MsgDlcToLength_2016(arg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_MsgLengthToDlc_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint32_t arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_MsgLengthToDlc_2016.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_MsgLengthToDlc_2016" "', argument " "1"" of type '" "uint32_t""'");
  } 
  arg1 = static_cast< uint32_t >(val1);result = (uint8_t)CANTP_MsgLengthToDlc_2016(arg1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_StatusListTypes_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_status arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  cantp_statustype result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_StatusListTypes_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_StatusListTypes_2016" "', argument " "1"" of type '" "cantp_status""'");
  } 
  arg1 = static_cast< cantp_status >(val1);result = (cantp_statustype)CANTP_StatusListTypes_2016(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_StatusGet_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_status arg1 ;
  cantp_statustype arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_StatusGet_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_StatusGet_2016" "', argument " "1"" of type '" "cantp_status""'");
  } 
  arg1 = static_cast< cantp_status >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_StatusGet_2016" "', argument " "2"" of type '" "cantp_statustype""'");
  } 
  arg2 = static_cast< cantp_statustype >(val2);result = (uint32_t)CANTP_StatusGet_2016(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CANTP_StatusIsOk_2016(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_status arg1 ;
  cantp_status arg2 = (cantp_status) (cantp_status)PCANTP_STATUS_OK ;
  bool arg3 = (bool) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CANTP_StatusIsOk_2016.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CANTP_StatusIsOk_2016" "', argument " "1"" of type '" "cantp_status""'");
  } 
  arg1 = static_cast< cantp_status >(val1);if(info.Length() > 1)
  {
    ecode2 = SWIG_AsVal_int(info[1], &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CANTP_StatusIsOk_2016" "', argument " "2"" of type '" "cantp_status""'");
    } 
    arg2 = static_cast< cantp_status >(val2);
  }
  if(info.Length() > 2)
  {
    ecode3 = SWIG_AsVal_bool(info[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CANTP_StatusIsOk_2016" "', argument " "3"" of type '" "bool""'");
    } 
    arg3 = static_cast< bool >(val3);
  }
  result = (bool)CANTP_StatusIsOk_2016(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PCAN_HARD_RESET_STATUS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x2EU));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_TRACE_FILE_DATA_LENGTH_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(0x100U));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_ID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_ID_set" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsg_ID_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->ID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_ID_get" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);result = (DWORD) ((arg1)->ID);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_MSGTYPE_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_MSGTYPE_set" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsg_MSGTYPE_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->MSGTYPE = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_MSGTYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_MSGTYPE_get" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);result = (BYTE) ((arg1)->MSGTYPE);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_LEN_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_LEN_set" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsg_LEN_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->LEN = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_LEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_LEN_get" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);result = (BYTE) ((arg1)->LEN);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_DATA_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_DATA_set" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TPCANMsg_DATA_set" "', argument " "2"" of type '" "BYTE [8]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(BYTE *)&arg1->DATA[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""DATA""' of type '""BYTE [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsg_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsg *arg1 = (tagTPCANMsg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsg_DATA_get" "', argument " "1"" of type '" "tagTPCANMsg *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsg * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->DATA);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_exports_TPCANMsg_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagTPCANMsg;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagTPCANMsg *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TPCANMsg.");
  }
  result = (tagTPCANMsg *)new tagTPCANMsg();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::_exports_TPCANMsg_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TPCANMsg_templ<SWIG_OBJ_WRAP>::~_exports_TPCANMsg_templ() {
  auto arg1 = reinterpret_cast<tagTPCANMsg *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_millis_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_millis_set" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANTimestamp_millis_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->millis = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_millis_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_millis_get" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);result = (DWORD) ((arg1)->millis);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_millis_overflow_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_millis_overflow_set" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANTimestamp_millis_overflow_set" "', argument " "2"" of type '" "WORD""'");
  } 
  arg2 = static_cast< WORD >(val2);if (arg1) (arg1)->millis_overflow = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_millis_overflow_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  WORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_millis_overflow_get" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);result = (WORD) ((arg1)->millis_overflow);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_micros_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_micros_set" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANTimestamp_micros_set" "', argument " "2"" of type '" "WORD""'");
  } 
  arg2 = static_cast< WORD >(val2);if (arg1) (arg1)->micros = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_wrap_TPCANTimestamp_micros_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANTimestamp *arg1 = (tagTPCANTimestamp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  WORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANTimestamp_micros_get" "', argument " "1"" of type '" "tagTPCANTimestamp *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANTimestamp * >(argp1);result = (WORD) ((arg1)->micros);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_exports_TPCANTimestamp_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagTPCANTimestamp;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagTPCANTimestamp *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TPCANTimestamp.");
  }
  result = (tagTPCANTimestamp *)new tagTPCANTimestamp();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::_exports_TPCANTimestamp_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TPCANTimestamp_templ<SWIG_OBJ_WRAP>::~_exports_TPCANTimestamp_templ() {
  auto arg1 = reinterpret_cast<tagTPCANTimestamp *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_ID_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_ID_set" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsgFD_ID_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->ID = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_ID_get" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);result = (DWORD) ((arg1)->ID);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_MSGTYPE_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_MSGTYPE_set" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsgFD_MSGTYPE_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->MSGTYPE = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_MSGTYPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_MSGTYPE_get" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);result = (BYTE) ((arg1)->MSGTYPE);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_DLC_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_DLC_set" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANMsgFD_DLC_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->DLC = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_DLC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_DLC_get" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);result = (BYTE) ((arg1)->DLC);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_DATA_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_DATA_set" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TPCANMsgFD_DATA_set" "', argument " "2"" of type '" "BYTE [64]""'"); 
  } 
  arg2 = reinterpret_cast< BYTE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(BYTE *)&arg1->DATA[ii] = *((BYTE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""DATA""' of type '""BYTE [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_wrap_TPCANMsgFD_DATA_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANMsgFD *arg1 = (tagTPCANMsgFD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANMsgFD_DATA_get" "', argument " "1"" of type '" "tagTPCANMsgFD *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANMsgFD * >(argp1);result = (BYTE *)(BYTE *) ((arg1)->DATA);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_exports_TPCANMsgFD_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagTPCANMsgFD;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagTPCANMsgFD *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TPCANMsgFD.");
  }
  result = (tagTPCANMsgFD *)new tagTPCANMsgFD();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::_exports_TPCANMsgFD_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TPCANMsgFD_templ<SWIG_OBJ_WRAP>::~_exports_TPCANMsgFD_templ() {
  auto arg1 = reinterpret_cast<tagTPCANMsgFD *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_channel_handle_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  WORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_channel_handle_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_channel_handle_set" "', argument " "2"" of type '" "WORD""'");
  } 
  arg2 = static_cast< WORD >(val2);if (arg1) (arg1)->channel_handle = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_channel_handle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  WORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_channel_handle_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (WORD) ((arg1)->channel_handle);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_type_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_device_type_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->device_type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_type_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (BYTE) ((arg1)->device_type);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_controller_number_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  BYTE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_controller_number_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_controller_number_set" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);if (arg1) (arg1)->controller_number = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_controller_number_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  BYTE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_controller_number_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (BYTE) ((arg1)->controller_number);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_features_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_features_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_device_features_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->device_features = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_features_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_features_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (DWORD) ((arg1)->device_features);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_name_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[33] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_name_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 33);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TPCANChannelInformation_device_name_set" "', argument " "2"" of type '" "char [33]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->device_name,arg2,33*sizeof(char));
  else memset(arg1->device_name,0,33*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_name_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_name_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (char *)(char *) ((arg1)->device_name);
  {
    size_t size = SWIG_strnlen(result, 33);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_id_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_device_id_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->device_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_device_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_device_id_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (DWORD) ((arg1)->device_id);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_channel_condition_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_channel_condition_set" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TPCANChannelInformation_channel_condition_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->channel_condition = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_wrap_TPCANChannelInformation_channel_condition_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  tagTPCANChannelInformation *arg1 = (tagTPCANChannelInformation *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_tagTPCANChannelInformation, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TPCANChannelInformation_channel_condition_get" "', argument " "1"" of type '" "tagTPCANChannelInformation *""'"); 
  }
  arg1 = reinterpret_cast< tagTPCANChannelInformation * >(argp1);result = (DWORD) ((arg1)->channel_condition);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_exports_TPCANChannelInformation_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_tagTPCANChannelInformation;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  tagTPCANChannelInformation *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TPCANChannelInformation.");
  }
  result = (tagTPCANChannelInformation *)new tagTPCANChannelInformation();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::_exports_TPCANChannelInformation_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TPCANChannelInformation_templ<SWIG_OBJ_WRAP>::~_exports_TPCANChannelInformation_templ() {
  auto arg1 = reinterpret_cast<tagTPCANChannelInformation *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_function
Napi::Value _wrap_CAN_Initialize(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  WORD arg2 ;
  BYTE arg3 = (BYTE) 0 ;
  DWORD arg4 = (DWORD) 0 ;
  WORD arg5 = (WORD) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_Initialize.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_Initialize" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CAN_Initialize" "', argument " "2"" of type '" "WORD""'");
  } 
  arg2 = static_cast< WORD >(val2);if(info.Length() > 2)
  {
    ecode3 = SWIG_AsVal_unsigned_SS_char(info[2], &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CAN_Initialize" "', argument " "3"" of type '" "BYTE""'");
    } 
    arg3 = static_cast< BYTE >(val3);
  }
  if(info.Length() > 3)
  {
    ecode4 = SWIG_AsVal_unsigned_SS_long(info[3], &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CAN_Initialize" "', argument " "4"" of type '" "DWORD""'");
    } 
    arg4 = static_cast< DWORD >(val4);
  }
  if(info.Length() > 4)
  {
    ecode5 = SWIG_AsVal_unsigned_SS_short(info[4], &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CAN_Initialize" "', argument " "5"" of type '" "WORD""'");
    } 
    arg5 = static_cast< WORD >(val5);
  }
  result = (DWORD)CAN_Initialize(arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_InitializeFD(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  LPSTR arg2 = (LPSTR) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_InitializeFD.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_InitializeFD" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_InitializeFD" "', argument " "2"" of type '" "LPSTR""'");
  }
  arg2 = reinterpret_cast< LPSTR >(buf2);result = (DWORD)CAN_InitializeFD(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_Uninitialize(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_Uninitialize.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_Uninitialize" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);result = (DWORD)CAN_Uninitialize(arg1);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_Reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_Reset.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_Reset" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);result = (DWORD)CAN_Reset(arg1);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_GetStatus(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_GetStatus.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_GetStatus" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);result = (DWORD)CAN_GetStatus(arg1);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_Read(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  TPCANMsg *arg2 = (TPCANMsg *) 0 ;
  TPCANTimestamp *arg3 = (TPCANTimestamp *) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_Read.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_Read" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_Read" "', argument " "2"" of type '" "TPCANMsg *""'"); 
  }
  arg2 = reinterpret_cast< TPCANMsg * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_tagTPCANTimestamp, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CAN_Read" "', argument " "3"" of type '" "TPCANTimestamp *""'"); 
  }
  arg3 = reinterpret_cast< TPCANTimestamp * >(argp3);result = (DWORD)CAN_Read(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_ReadFD(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  TPCANMsgFD *arg2 = (TPCANMsgFD *) 0 ;
  UINT64 *arg3 = (UINT64 *) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_ReadFD.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_ReadFD" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_ReadFD" "', argument " "2"" of type '" "TPCANMsgFD *""'"); 
  }
  arg2 = reinterpret_cast< TPCANMsgFD * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_unsigned___int64, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CAN_ReadFD" "', argument " "3"" of type '" "UINT64 *""'"); 
  }
  arg3 = reinterpret_cast< UINT64 * >(argp3);result = (DWORD)CAN_ReadFD(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_Write(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  TPCANMsg *arg2 = (TPCANMsg *) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_Write.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_Write" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagTPCANMsg, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_Write" "', argument " "2"" of type '" "TPCANMsg *""'"); 
  }
  arg2 = reinterpret_cast< TPCANMsg * >(argp2);result = (DWORD)CAN_Write(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_WriteFD(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  TPCANMsgFD *arg2 = (TPCANMsgFD *) 0 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_WriteFD.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_WriteFD" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_tagTPCANMsgFD, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_WriteFD" "', argument " "2"" of type '" "TPCANMsgFD *""'"); 
  }
  arg2 = reinterpret_cast< TPCANMsgFD * >(argp2);result = (DWORD)CAN_WriteFD(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_FilterMessages(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  DWORD arg2 ;
  DWORD arg3 ;
  BYTE arg4 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  unsigned long val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_FilterMessages.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_FilterMessages" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);ecode2 = SWIG_AsVal_unsigned_SS_long(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CAN_FilterMessages" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);ecode3 = SWIG_AsVal_unsigned_SS_long(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CAN_FilterMessages" "', argument " "3"" of type '" "DWORD""'");
  } 
  arg3 = static_cast< DWORD >(val3);ecode4 = SWIG_AsVal_unsigned_SS_char(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CAN_FilterMessages" "', argument " "4"" of type '" "BYTE""'");
  } 
  arg4 = static_cast< BYTE >(val4);result = (DWORD)CAN_FilterMessages(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_GetValue(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  BYTE arg2 ;
  void *arg3 = (void *) 0 ;
  DWORD arg4 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_GetValue.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_GetValue" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CAN_GetValue" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);res3 = SWIG_ConvertPtr(info[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CAN_GetValue" "', argument " "3"" of type '" "void *""'"); 
  }ecode4 = SWIG_AsVal_unsigned_SS_long(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CAN_GetValue" "', argument " "4"" of type '" "DWORD""'");
  } 
  arg4 = static_cast< DWORD >(val4);result = (DWORD)CAN_GetValue(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_SetValue(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  WORD arg1 ;
  BYTE arg2 ;
  void *arg3 = (void *) 0 ;
  DWORD arg4 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  unsigned long val4 ;
  int ecode4 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_SetValue.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_short(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_SetValue" "', argument " "1"" of type '" "WORD""'");
  } 
  arg1 = static_cast< WORD >(val1);ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CAN_SetValue" "', argument " "2"" of type '" "BYTE""'");
  } 
  arg2 = static_cast< BYTE >(val2);res3 = SWIG_ConvertPtr(info[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CAN_SetValue" "', argument " "3"" of type '" "void *""'"); 
  }ecode4 = SWIG_AsVal_unsigned_SS_long(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CAN_SetValue" "', argument " "4"" of type '" "DWORD""'");
  } 
  arg4 = static_cast< DWORD >(val4);result = (DWORD)CAN_SetValue(arg1,arg2,arg3,arg4);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_GetErrorText(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DWORD arg1 ;
  WORD arg2 ;
  LPSTR arg3 = (LPSTR) 0 ;
  unsigned long val1 ;
  int ecode1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_GetErrorText.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_long(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "CAN_GetErrorText" "', argument " "1"" of type '" "DWORD""'");
  } 
  arg1 = static_cast< DWORD >(val1);ecode2 = SWIG_AsVal_unsigned_SS_short(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CAN_GetErrorText" "', argument " "2"" of type '" "WORD""'");
  } 
  arg2 = static_cast< WORD >(val2);res3 = SWIG_AsCharPtrAndSize(info[2], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CAN_GetErrorText" "', argument " "3"" of type '" "LPSTR""'");
  }
  arg3 = reinterpret_cast< LPSTR >(buf3);result = (DWORD)CAN_GetErrorText(arg1,arg2,arg3);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_CAN_LookUpChannel(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  LPSTR arg1 = (LPSTR) 0 ;
  WORD *arg2 = (WORD *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  DWORD result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CAN_LookUpChannel.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CAN_LookUpChannel" "', argument " "1"" of type '" "LPSTR""'");
  }
  arg1 = reinterpret_cast< LPSTR >(buf1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CAN_LookUpChannel" "', argument " "2"" of type '" "WORD *""'"); 
  }
  arg2 = reinterpret_cast< WORD * >(argp2);result = (DWORD)CAN_LookUpChannel(arg1,arg2);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_LoadDll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_LoadDll.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDll" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);LoadDll((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetMsgDataIsoTp(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgdata_isotp *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetMsgDataIsoTp.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMsgDataIsoTp" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);result = (cantp_msgdata_isotp *)GetMsgDataIsoTp(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgdata_isotp, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetMsgDataAny(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgdata *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetMsgDataAny.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMsgDataAny" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);result = (cantp_msgdata *)GetMsgDataAny(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgdata, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetMsgDataCan(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgdata_can *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetMsgDataCan.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMsgDataCan" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);result = (cantp_msgdata_can *)GetMsgDataCan(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgdata_can, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetMsgDataCanFd(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  cantp_msg *arg1 = (cantp_msg *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  cantp_msgdata_canfd *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetMsgDataCanFd.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p__cantp_msg, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetMsgDataCanFd" "', argument " "1"" of type '" "cantp_msg *""'"); 
  }
  arg1 = reinterpret_cast< cantp_msg * >(argp1);result = (cantp_msgdata_canfd *)GetMsgDataCanFd(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p__cantp_msgdata_canfd, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_ByteArray = {"_p_ByteArray", "p_ByteArray|ByteArray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TimeStamp = {"_p_TimeStamp", "p_TimeStamp|TimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "LONG64 *|LONGLONG *|__int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_baudrate = {"_p__cantp_baudrate", "cantp_baudrate *|enum _cantp_baudrate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_busstatus = {"_p__cantp_busstatus", "cantp_busstatus *|enum _cantp_busstatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_can_info = {"_p__cantp_can_info", "_cantp_can_info *|cantp_can_info *|p__cantp_can_info", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_can_msgtype = {"_p__cantp_can_msgtype", "cantp_can_msgtype *|enum _cantp_can_msgtype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_device = {"_p__cantp_device", "cantp_device *|enum _cantp_device *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_errstatus = {"_p__cantp_errstatus", "cantp_errstatus *|enum _cantp_errstatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_handle = {"_p__cantp_handle", "cantp_handle *|enum _cantp_handle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_hwtype = {"_p__cantp_hwtype", "cantp_hwtype *|enum _cantp_hwtype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_infostatus = {"_p__cantp_infostatus", "cantp_infostatus *|enum _cantp_infostatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_isotp_addressing = {"_p__cantp_isotp_addressing", "cantp_isotp_addressing *|enum _cantp_isotp_addressing *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_isotp_format = {"_p__cantp_isotp_format", "cantp_isotp_format *|enum _cantp_isotp_format *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_isotp_msgtype = {"_p__cantp_isotp_msgtype", "cantp_isotp_msgtype *|enum _cantp_isotp_msgtype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_mapping = {"_p__cantp_mapping", "cantp_mapping *|p__cantp_mapping|_cantp_mapping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msg = {"_p__cantp_msg", "cantp_msg *|p__cantp_msg|_cantp_msg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgdata = {"_p__cantp_msgdata", "cantp_msgdata *|p__cantp_msgdata|_cantp_msgdata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgdata_can = {"_p__cantp_msgdata_can", "_cantp_msgdata_can *|cantp_msgdata_can *|p__cantp_msgdata_can", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgdata_canfd = {"_p__cantp_msgdata_canfd", "cantp_msgdata_canfd *|p__cantp_msgdata_canfd|_cantp_msgdata_canfd *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgdata_isotp = {"_p__cantp_msgdata_isotp", "cantp_msgdata_isotp *|p__cantp_msgdata_isotp|_cantp_msgdata_isotp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgdirection = {"_p__cantp_msgdirection", "cantp_msgdirection *|enum _cantp_msgdirection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgflag = {"_p__cantp_msgflag", "cantp_msgflag *|enum _cantp_msgflag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msginfo = {"_p__cantp_msginfo", "_cantp_msginfo *|cantp_msginfo *|p__cantp_msginfo", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgoption = {"_p__cantp_msgoption", "cantp_msgoption *|p__cantp_msgoption|_cantp_msgoption *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgoption_list = {"_p__cantp_msgoption_list", "cantp_msgoption_list *|p__cantp_msgoption_list|_cantp_msgoption_list *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgprogress = {"_p__cantp_msgprogress", "cantp_msgprogress *|p__cantp_msgprogress|_cantp_msgprogress *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgprogress_state = {"_p__cantp_msgprogress_state", "cantp_msgprogress_state *|enum _cantp_msgprogress_state *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgrule = {"_p__cantp_msgrule", "cantp_msgrule *|p__cantp_msgrule|_cantp_msgrule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_msgtype = {"_p__cantp_msgtype", "cantp_msgtype *|enum _cantp_msgtype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_netaddrinfo = {"_p__cantp_netaddrinfo", "_cantp_netaddrinfo *|cantp_netaddrinfo *|p__cantp_netaddrinfo", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_netstatus = {"_p__cantp_netstatus", "cantp_netstatus *|enum _cantp_netstatus *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_option = {"_p__cantp_option", "cantp_option *|enum _cantp_option *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_parameter = {"_p__cantp_parameter", "cantp_parameter *|enum _cantp_parameter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_status = {"_p__cantp_status", "cantp_status *|enum _cantp_status *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__cantp_statustype = {"_p__cantp_statustype", "cantp_statustype *|enum _cantp_statustype *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CCHAR *|CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT *|INT32 *|INT_PTR *|LONG32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "HRESULT *|LONG *|LONG_PTR *|SHANDLE_PTR *|SSIZE_T *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "LPCTSTR *|LPCUTSTR *|LPTCH *|LPTSTR *|LPUTSTR *|PCTSTR *|PCUTSTR *|PTCH *|PTSTR *|PUTSTR *|char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "PLCID *|unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|INT16 *|SHORT *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "INT8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagTPCANChannelInformation = {"_p_tagTPCANChannelInformation", "TPCANChannelInformation *|p_tagTPCANChannelInformation|tagTPCANChannelInformation *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagTPCANMsg = {"_p_tagTPCANMsg", "TPCANMsg *|p_tagTPCANMsg|tagTPCANMsg *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagTPCANMsgFD = {"_p_tagTPCANMsgFD", "TPCANMsgFD *|p_tagTPCANMsgFD|tagTPCANMsgFD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_tagTPCANTimestamp = {"_p_tagTPCANTimestamp", "TPCANTimestamp *|p_tagTPCANTimestamp|tagTPCANTimestamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "DWORD64 *|DWORDLONG *|UINT64 *|ULONG64 *|ULONGLONG *|unsigned __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "BOOLEAN *|BYTE *|FCHAR *|TBYTE *|UCHAR *|UINT8 *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD32 *|UINT *|UINT32 *|UINT_PTR *|ULONG32 *|cantp_pcanstatus *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "DWORD *|DWORD_PTR *|FLONG *|HANDLE_PTR *|LCID *|SIZE_T *|ULONG *|ULONG_PTR *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "FSHORT *|LANGID *|UHALF_PTR *|UINT16 *|USHORT *|WORD *|uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ByteArray,
  &_swigt__p_TimeStamp,
  &_swigt__p___int64,
  &_swigt__p__cantp_baudrate,
  &_swigt__p__cantp_busstatus,
  &_swigt__p__cantp_can_info,
  &_swigt__p__cantp_can_msgtype,
  &_swigt__p__cantp_device,
  &_swigt__p__cantp_errstatus,
  &_swigt__p__cantp_handle,
  &_swigt__p__cantp_hwtype,
  &_swigt__p__cantp_infostatus,
  &_swigt__p__cantp_isotp_addressing,
  &_swigt__p__cantp_isotp_format,
  &_swigt__p__cantp_isotp_msgtype,
  &_swigt__p__cantp_mapping,
  &_swigt__p__cantp_msg,
  &_swigt__p__cantp_msgdata,
  &_swigt__p__cantp_msgdata_can,
  &_swigt__p__cantp_msgdata_canfd,
  &_swigt__p__cantp_msgdata_isotp,
  &_swigt__p__cantp_msgdirection,
  &_swigt__p__cantp_msgflag,
  &_swigt__p__cantp_msginfo,
  &_swigt__p__cantp_msgoption,
  &_swigt__p__cantp_msgoption_list,
  &_swigt__p__cantp_msgprogress,
  &_swigt__p__cantp_msgprogress_state,
  &_swigt__p__cantp_msgrule,
  &_swigt__p__cantp_msgtype,
  &_swigt__p__cantp_netaddrinfo,
  &_swigt__p__cantp_netstatus,
  &_swigt__p__cantp_option,
  &_swigt__p__cantp_parameter,
  &_swigt__p__cantp_status,
  &_swigt__p__cantp_statustype,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_tagTPCANChannelInformation,
  &_swigt__p_tagTPCANMsg,
  &_swigt__p_tagTPCANMsgFD,
  &_swigt__p_tagTPCANTimestamp,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ByteArray[] = {  {&_swigt__p_ByteArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TimeStamp[] = {  {&_swigt__p_TimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_baudrate[] = {  {&_swigt__p__cantp_baudrate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_busstatus[] = {  {&_swigt__p__cantp_busstatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_can_info[] = {  {&_swigt__p__cantp_can_info, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_can_msgtype[] = {  {&_swigt__p__cantp_can_msgtype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_device[] = {  {&_swigt__p__cantp_device, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_errstatus[] = {  {&_swigt__p__cantp_errstatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_handle[] = {  {&_swigt__p__cantp_handle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_hwtype[] = {  {&_swigt__p__cantp_hwtype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_infostatus[] = {  {&_swigt__p__cantp_infostatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_isotp_addressing[] = {  {&_swigt__p__cantp_isotp_addressing, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_isotp_format[] = {  {&_swigt__p__cantp_isotp_format, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_isotp_msgtype[] = {  {&_swigt__p__cantp_isotp_msgtype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_mapping[] = {  {&_swigt__p__cantp_mapping, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msg[] = {  {&_swigt__p__cantp_msg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgdata[] = {  {&_swigt__p__cantp_msgdata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgdata_can[] = {  {&_swigt__p__cantp_msgdata_can, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgdata_canfd[] = {  {&_swigt__p__cantp_msgdata_canfd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgdata_isotp[] = {  {&_swigt__p__cantp_msgdata_isotp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgdirection[] = {  {&_swigt__p__cantp_msgdirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgflag[] = {  {&_swigt__p__cantp_msgflag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msginfo[] = {  {&_swigt__p__cantp_msginfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgoption[] = {  {&_swigt__p__cantp_msgoption, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgoption_list[] = {  {&_swigt__p__cantp_msgoption_list, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgprogress[] = {  {&_swigt__p__cantp_msgprogress, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgprogress_state[] = {  {&_swigt__p__cantp_msgprogress_state, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgrule[] = {  {&_swigt__p__cantp_msgrule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_msgtype[] = {  {&_swigt__p__cantp_msgtype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_netaddrinfo[] = {  {&_swigt__p__cantp_netaddrinfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_netstatus[] = {  {&_swigt__p__cantp_netstatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_option[] = {  {&_swigt__p__cantp_option, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_parameter[] = {  {&_swigt__p__cantp_parameter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_status[] = {  {&_swigt__p__cantp_status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__cantp_statustype[] = {  {&_swigt__p__cantp_statustype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagTPCANChannelInformation[] = {  {&_swigt__p_tagTPCANChannelInformation, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagTPCANMsg[] = {  {&_swigt__p_tagTPCANMsg, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagTPCANMsgFD[] = {  {&_swigt__p_tagTPCANMsgFD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_tagTPCANTimestamp[] = {  {&_swigt__p_tagTPCANTimestamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ByteArray,
  _swigc__p_TimeStamp,
  _swigc__p___int64,
  _swigc__p__cantp_baudrate,
  _swigc__p__cantp_busstatus,
  _swigc__p__cantp_can_info,
  _swigc__p__cantp_can_msgtype,
  _swigc__p__cantp_device,
  _swigc__p__cantp_errstatus,
  _swigc__p__cantp_handle,
  _swigc__p__cantp_hwtype,
  _swigc__p__cantp_infostatus,
  _swigc__p__cantp_isotp_addressing,
  _swigc__p__cantp_isotp_format,
  _swigc__p__cantp_isotp_msgtype,
  _swigc__p__cantp_mapping,
  _swigc__p__cantp_msg,
  _swigc__p__cantp_msgdata,
  _swigc__p__cantp_msgdata_can,
  _swigc__p__cantp_msgdata_canfd,
  _swigc__p__cantp_msgdata_isotp,
  _swigc__p__cantp_msgdirection,
  _swigc__p__cantp_msgflag,
  _swigc__p__cantp_msginfo,
  _swigc__p__cantp_msgoption,
  _swigc__p__cantp_msgoption_list,
  _swigc__p__cantp_msgprogress,
  _swigc__p__cantp_msgprogress_state,
  _swigc__p__cantp_msgrule,
  _swigc__p__cantp_msgtype,
  _swigc__p__cantp_netaddrinfo,
  _swigc__p__cantp_netstatus,
  _swigc__p__cantp_option,
  _swigc__p__cantp_parameter,
  _swigc__p__cantp_status,
  _swigc__p__cantp_statustype,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_tagTPCANChannelInformation,
  _swigc__p_tagTPCANMsg,
  _swigc__p_tagTPCANMsgFD,
  _swigc__p_tagTPCANTimestamp,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr) return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);



extern void CreateTSFN(const Napi::CallbackInfo &info);
extern void FreeTSFN(const Napi::CallbackInfo &info);


do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CreateTSFN", CreateTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);

do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("FreeTSFN", FreeTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
	pd
  }));
} while (0);


  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */
  

  /* register classes */
  /* Class: TimeStamp (_exports_TimeStamp) */
// jsnapi_registerclass
Napi::Function _exports_TimeStamp_ctor = _exports_TimeStamp_inst::GetClass(env);
exports.Set("TimeStamp", _exports_TimeStamp_ctor);
if (SWIGTYPE_p_TimeStamp->clientdata == nullptr) {
  SWIGTYPE_p_TimeStamp->clientdata = new size_t(0);
}
Napi::FunctionReference *_exports_TimeStamp_ctor_ref = new Napi::FunctionReference();
*_exports_TimeStamp_ctor_ref = Napi::Persistent(_exports_TimeStamp_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_TimeStamp_ctor_ref;
/* Class: ByteArray (_exports_ByteArray) */
// jsnapi_registerclass
Napi::Function _exports_ByteArray_ctor = _exports_ByteArray_inst::GetClass(env);
exports.Set("ByteArray", _exports_ByteArray_ctor);
if (SWIGTYPE_p_ByteArray->clientdata == nullptr) {
  SWIGTYPE_p_ByteArray->clientdata = new size_t(1);
}
Napi::FunctionReference *_exports_ByteArray_ctor_ref = new Napi::FunctionReference();
*_exports_ByteArray_ctor_ref = Napi::Persistent(_exports_ByteArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_ByteArray_ctor_ref;
/* Class: cantp_msginfo (_exports_cantp_msginfo) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msginfo_ctor = _exports_cantp_msginfo_inst::GetClass(env);
exports.Set("cantp_msginfo", _exports_cantp_msginfo_ctor);
if (SWIGTYPE_p__cantp_msginfo->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msginfo->clientdata = new size_t(2);
}
Napi::FunctionReference *_exports_cantp_msginfo_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msginfo_ctor_ref = Napi::Persistent(_exports_cantp_msginfo_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _exports_cantp_msginfo_ctor_ref;
/* Class: cantp_msgoption (_exports_cantp_msgoption) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgoption_ctor = _exports_cantp_msgoption_inst::GetClass(env);
exports.Set("cantp_msgoption", _exports_cantp_msgoption_ctor);
if (SWIGTYPE_p__cantp_msgoption->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgoption->clientdata = new size_t(3);
}
Napi::FunctionReference *_exports_cantp_msgoption_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgoption_ctor_ref = Napi::Persistent(_exports_cantp_msgoption_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _exports_cantp_msgoption_ctor_ref;
/* Class: cantp_msgoption_list (_exports_cantp_msgoption_list) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgoption_list_ctor = _exports_cantp_msgoption_list_inst::GetClass(env);
exports.Set("cantp_msgoption_list", _exports_cantp_msgoption_list_ctor);
if (SWIGTYPE_p__cantp_msgoption_list->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgoption_list->clientdata = new size_t(4);
}
Napi::FunctionReference *_exports_cantp_msgoption_list_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgoption_list_ctor_ref = Napi::Persistent(_exports_cantp_msgoption_list_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _exports_cantp_msgoption_list_ctor_ref;
/* Class: cantp_can_info (_exports_cantp_can_info) */
// jsnapi_registerclass
Napi::Function _exports_cantp_can_info_ctor = _exports_cantp_can_info_inst::GetClass(env);
exports.Set("cantp_can_info", _exports_cantp_can_info_ctor);
if (SWIGTYPE_p__cantp_can_info->clientdata == nullptr) {
  SWIGTYPE_p__cantp_can_info->clientdata = new size_t(5);
}
Napi::FunctionReference *_exports_cantp_can_info_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_can_info_ctor_ref = Napi::Persistent(_exports_cantp_can_info_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _exports_cantp_can_info_ctor_ref;
/* Class: cantp_netaddrinfo (_exports_cantp_netaddrinfo) */
// jsnapi_registerclass
Napi::Function _exports_cantp_netaddrinfo_ctor = _exports_cantp_netaddrinfo_inst::GetClass(env);
exports.Set("cantp_netaddrinfo", _exports_cantp_netaddrinfo_ctor);
if (SWIGTYPE_p__cantp_netaddrinfo->clientdata == nullptr) {
  SWIGTYPE_p__cantp_netaddrinfo->clientdata = new size_t(6);
}
Napi::FunctionReference *_exports_cantp_netaddrinfo_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_netaddrinfo_ctor_ref = Napi::Persistent(_exports_cantp_netaddrinfo_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _exports_cantp_netaddrinfo_ctor_ref;
/* Class: cantp_mapping (_exports_cantp_mapping) */
// jsnapi_registerclass
Napi::Function _exports_cantp_mapping_ctor = _exports_cantp_mapping_inst::GetClass(env);
exports.Set("cantp_mapping", _exports_cantp_mapping_ctor);
if (SWIGTYPE_p__cantp_mapping->clientdata == nullptr) {
  SWIGTYPE_p__cantp_mapping->clientdata = new size_t(7);
}
Napi::FunctionReference *_exports_cantp_mapping_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_mapping_ctor_ref = Napi::Persistent(_exports_cantp_mapping_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _exports_cantp_mapping_ctor_ref;
/* Class: cantp_msgrule (_exports_cantp_msgrule) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgrule_ctor = _exports_cantp_msgrule_inst::GetClass(env);
exports.Set("cantp_msgrule", _exports_cantp_msgrule_ctor);
if (SWIGTYPE_p__cantp_msgrule->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgrule->clientdata = new size_t(8);
}
Napi::FunctionReference *_exports_cantp_msgrule_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgrule_ctor_ref = Napi::Persistent(_exports_cantp_msgrule_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _exports_cantp_msgrule_ctor_ref;
/* Class: cantp_msgdata (_exports_cantp_msgdata) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgdata_ctor = _exports_cantp_msgdata_inst::GetClass(env);
exports.Set("cantp_msgdata", _exports_cantp_msgdata_ctor);
if (SWIGTYPE_p__cantp_msgdata->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgdata->clientdata = new size_t(9);
}
Napi::FunctionReference *_exports_cantp_msgdata_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgdata_ctor_ref = Napi::Persistent(_exports_cantp_msgdata_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[9] = _exports_cantp_msgdata_ctor_ref;
/* Class: cantp_msgdata_can (_exports_cantp_msgdata_can) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgdata_can_ctor = _exports_cantp_msgdata_can_inst::GetClass(env);
exports.Set("cantp_msgdata_can", _exports_cantp_msgdata_can_ctor);
if (SWIGTYPE_p__cantp_msgdata_can->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgdata_can->clientdata = new size_t(10);
}
Napi::FunctionReference *_exports_cantp_msgdata_can_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgdata_can_ctor_ref = Napi::Persistent(_exports_cantp_msgdata_can_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[10] = _exports_cantp_msgdata_can_ctor_ref;
/* Class: cantp_msgdata_canfd (_exports_cantp_msgdata_canfd) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgdata_canfd_ctor = _exports_cantp_msgdata_canfd_inst::GetClass(env);
exports.Set("cantp_msgdata_canfd", _exports_cantp_msgdata_canfd_ctor);
if (SWIGTYPE_p__cantp_msgdata_canfd->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgdata_canfd->clientdata = new size_t(11);
}
Napi::FunctionReference *_exports_cantp_msgdata_canfd_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgdata_canfd_ctor_ref = Napi::Persistent(_exports_cantp_msgdata_canfd_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[11] = _exports_cantp_msgdata_canfd_ctor_ref;
/* Class: cantp_msgdata_isotp (_exports_cantp_msgdata_isotp) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgdata_isotp_ctor = _exports_cantp_msgdata_isotp_inst::GetClass(env);
exports.Set("cantp_msgdata_isotp", _exports_cantp_msgdata_isotp_ctor);
if (SWIGTYPE_p__cantp_msgdata_isotp->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgdata_isotp->clientdata = new size_t(12);
}
Napi::FunctionReference *_exports_cantp_msgdata_isotp_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgdata_isotp_ctor_ref = Napi::Persistent(_exports_cantp_msgdata_isotp_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[12] = _exports_cantp_msgdata_isotp_ctor_ref;
/* Class: cantp_msg (_exports_cantp_msg) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msg_ctor = _exports_cantp_msg_inst::GetClass(env);
exports.Set("cantp_msg", _exports_cantp_msg_ctor);
if (SWIGTYPE_p__cantp_msg->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msg->clientdata = new size_t(13);
}
Napi::FunctionReference *_exports_cantp_msg_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msg_ctor_ref = Napi::Persistent(_exports_cantp_msg_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[13] = _exports_cantp_msg_ctor_ref;
/* Class: cantp_msgprogress (_exports_cantp_msgprogress) */
// jsnapi_registerclass
Napi::Function _exports_cantp_msgprogress_ctor = _exports_cantp_msgprogress_inst::GetClass(env);
exports.Set("cantp_msgprogress", _exports_cantp_msgprogress_ctor);
if (SWIGTYPE_p__cantp_msgprogress->clientdata == nullptr) {
  SWIGTYPE_p__cantp_msgprogress->clientdata = new size_t(14);
}
Napi::FunctionReference *_exports_cantp_msgprogress_ctor_ref = new Napi::FunctionReference();
*_exports_cantp_msgprogress_ctor_ref = Napi::Persistent(_exports_cantp_msgprogress_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[14] = _exports_cantp_msgprogress_ctor_ref;
/* Class: TPCANMsg (_exports_TPCANMsg) */
// jsnapi_registerclass
Napi::Function _exports_TPCANMsg_ctor = _exports_TPCANMsg_inst::GetClass(env);
exports.Set("TPCANMsg", _exports_TPCANMsg_ctor);
if (SWIGTYPE_p_tagTPCANMsg->clientdata == nullptr) {
  SWIGTYPE_p_tagTPCANMsg->clientdata = new size_t(15);
}
Napi::FunctionReference *_exports_TPCANMsg_ctor_ref = new Napi::FunctionReference();
*_exports_TPCANMsg_ctor_ref = Napi::Persistent(_exports_TPCANMsg_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[15] = _exports_TPCANMsg_ctor_ref;
/* Class: TPCANTimestamp (_exports_TPCANTimestamp) */
// jsnapi_registerclass
Napi::Function _exports_TPCANTimestamp_ctor = _exports_TPCANTimestamp_inst::GetClass(env);
exports.Set("TPCANTimestamp", _exports_TPCANTimestamp_ctor);
if (SWIGTYPE_p_tagTPCANTimestamp->clientdata == nullptr) {
  SWIGTYPE_p_tagTPCANTimestamp->clientdata = new size_t(16);
}
Napi::FunctionReference *_exports_TPCANTimestamp_ctor_ref = new Napi::FunctionReference();
*_exports_TPCANTimestamp_ctor_ref = Napi::Persistent(_exports_TPCANTimestamp_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[16] = _exports_TPCANTimestamp_ctor_ref;
/* Class: TPCANMsgFD (_exports_TPCANMsgFD) */
// jsnapi_registerclass
Napi::Function _exports_TPCANMsgFD_ctor = _exports_TPCANMsgFD_inst::GetClass(env);
exports.Set("TPCANMsgFD", _exports_TPCANMsgFD_ctor);
if (SWIGTYPE_p_tagTPCANMsgFD->clientdata == nullptr) {
  SWIGTYPE_p_tagTPCANMsgFD->clientdata = new size_t(17);
}
Napi::FunctionReference *_exports_TPCANMsgFD_ctor_ref = new Napi::FunctionReference();
*_exports_TPCANMsgFD_ctor_ref = Napi::Persistent(_exports_TPCANMsgFD_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[17] = _exports_TPCANMsgFD_ctor_ref;
/* Class: TPCANChannelInformation (_exports_TPCANChannelInformation) */
// jsnapi_registerclass
Napi::Function _exports_TPCANChannelInformation_ctor = _exports_TPCANChannelInformation_inst::GetClass(env);
exports.Set("TPCANChannelInformation", _exports_TPCANChannelInformation_ctor);
if (SWIGTYPE_p_tagTPCANChannelInformation->clientdata == nullptr) {
  SWIGTYPE_p_tagTPCANChannelInformation->clientdata = new size_t(18);
}
Napi::FunctionReference *_exports_TPCANChannelInformation_ctor_ref = new Napi::FunctionReference();
*_exports_TPCANChannelInformation_ctor_ref = Napi::Persistent(_exports_TPCANChannelInformation_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[18] = _exports_TPCANChannelInformation_ctor_ref;


  /* enable inheritance */
  
Napi::Value jsObjectValue, jsSetProtoValue;
Napi::Object jsObject;
Napi::Function setProto;
NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
setProto = jsSetProtoValue.As<Napi::Function>();



  /* setup inheritances */
  
// Inheritance for _exports_TimeStamp (TimeStamp) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TimeStamp_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TimeStamp_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_ByteArray (ByteArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_ByteArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_ByteArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msginfo (cantp_msginfo) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msginfo_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msginfo_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgoption (cantp_msgoption) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgoption_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgoption_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgoption_list (cantp_msgoption_list) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgoption_list_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgoption_list_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_can_info (cantp_can_info) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_can_info_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_can_info_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_netaddrinfo (cantp_netaddrinfo) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_netaddrinfo_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_netaddrinfo_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_mapping (cantp_mapping) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_mapping_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_mapping_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgrule (cantp_msgrule) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgrule_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgrule_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgdata (cantp_msgdata) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgdata_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgdata_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgdata_can (cantp_msgdata_can) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgdata_can_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgdata_can_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgdata_canfd (cantp_msgdata_canfd) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgdata_canfd_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgdata_canfd_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgdata_isotp (cantp_msgdata_isotp) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgdata_isotp_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgdata_isotp_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msg (cantp_msg) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msg_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msg_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_cantp_msgprogress (cantp_msgprogress) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_cantp_msgprogress_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_cantp_msgprogress_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_TPCANMsg (TPCANMsg) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TPCANMsg_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TPCANMsg_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_TPCANTimestamp (TPCANTimestamp) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TPCANTimestamp_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TPCANTimestamp_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_TPCANMsgFD (TPCANMsgFD) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TPCANMsgFD_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TPCANMsgFD_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_TPCANChannelInformation (TPCANChannelInformation) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TPCANChannelInformation_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TPCANChannelInformation_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_NONEBUS_get, JS_veto_set_variable>("PCAN_NONEBUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS1_get, JS_veto_set_variable>("PCAN_ISABUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS2_get, JS_veto_set_variable>("PCAN_ISABUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS3_get, JS_veto_set_variable>("PCAN_ISABUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS4_get, JS_veto_set_variable>("PCAN_ISABUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS5_get, JS_veto_set_variable>("PCAN_ISABUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS6_get, JS_veto_set_variable>("PCAN_ISABUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS7_get, JS_veto_set_variable>("PCAN_ISABUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISABUS8_get, JS_veto_set_variable>("PCAN_ISABUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_DNGBUS1_get, JS_veto_set_variable>("PCAN_DNGBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS1_get, JS_veto_set_variable>("PCAN_PCIBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS2_get, JS_veto_set_variable>("PCAN_PCIBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS3_get, JS_veto_set_variable>("PCAN_PCIBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS4_get, JS_veto_set_variable>("PCAN_PCIBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS5_get, JS_veto_set_variable>("PCAN_PCIBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS6_get, JS_veto_set_variable>("PCAN_PCIBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS7_get, JS_veto_set_variable>("PCAN_PCIBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS8_get, JS_veto_set_variable>("PCAN_PCIBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS9_get, JS_veto_set_variable>("PCAN_PCIBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS10_get, JS_veto_set_variable>("PCAN_PCIBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS11_get, JS_veto_set_variable>("PCAN_PCIBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS12_get, JS_veto_set_variable>("PCAN_PCIBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS13_get, JS_veto_set_variable>("PCAN_PCIBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS14_get, JS_veto_set_variable>("PCAN_PCIBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS15_get, JS_veto_set_variable>("PCAN_PCIBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCIBUS16_get, JS_veto_set_variable>("PCAN_PCIBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS1_get, JS_veto_set_variable>("PCAN_USBBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS2_get, JS_veto_set_variable>("PCAN_USBBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS3_get, JS_veto_set_variable>("PCAN_USBBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS4_get, JS_veto_set_variable>("PCAN_USBBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS5_get, JS_veto_set_variable>("PCAN_USBBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS6_get, JS_veto_set_variable>("PCAN_USBBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS7_get, JS_veto_set_variable>("PCAN_USBBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS8_get, JS_veto_set_variable>("PCAN_USBBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS9_get, JS_veto_set_variable>("PCAN_USBBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS10_get, JS_veto_set_variable>("PCAN_USBBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS11_get, JS_veto_set_variable>("PCAN_USBBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS12_get, JS_veto_set_variable>("PCAN_USBBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS13_get, JS_veto_set_variable>("PCAN_USBBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS14_get, JS_veto_set_variable>("PCAN_USBBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS15_get, JS_veto_set_variable>("PCAN_USBBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USBBUS16_get, JS_veto_set_variable>("PCAN_USBBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCCBUS1_get, JS_veto_set_variable>("PCAN_PCCBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCCBUS2_get, JS_veto_set_variable>("PCAN_PCCBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS1_get, JS_veto_set_variable>("PCAN_LANBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS2_get, JS_veto_set_variable>("PCAN_LANBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS3_get, JS_veto_set_variable>("PCAN_LANBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS4_get, JS_veto_set_variable>("PCAN_LANBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS5_get, JS_veto_set_variable>("PCAN_LANBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS6_get, JS_veto_set_variable>("PCAN_LANBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS7_get, JS_veto_set_variable>("PCAN_LANBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS8_get, JS_veto_set_variable>("PCAN_LANBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS9_get, JS_veto_set_variable>("PCAN_LANBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS10_get, JS_veto_set_variable>("PCAN_LANBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS11_get, JS_veto_set_variable>("PCAN_LANBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS12_get, JS_veto_set_variable>("PCAN_LANBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS13_get, JS_veto_set_variable>("PCAN_LANBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS14_get, JS_veto_set_variable>("PCAN_LANBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS15_get, JS_veto_set_variable>("PCAN_LANBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LANBUS16_get, JS_veto_set_variable>("PCAN_LANBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_OK_get, JS_veto_set_variable>("PCAN_ERROR_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_XMTFULL_get, JS_veto_set_variable>("PCAN_ERROR_XMTFULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_OVERRUN_get, JS_veto_set_variable>("PCAN_ERROR_OVERRUN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_BUSLIGHT_get, JS_veto_set_variable>("PCAN_ERROR_BUSLIGHT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_BUSHEAVY_get, JS_veto_set_variable>("PCAN_ERROR_BUSHEAVY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_BUSWARNING_get, JS_veto_set_variable>("PCAN_ERROR_BUSWARNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_BUSPASSIVE_get, JS_veto_set_variable>("PCAN_ERROR_BUSPASSIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_BUSOFF_get, JS_veto_set_variable>("PCAN_ERROR_BUSOFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ANYBUSERR_get, JS_veto_set_variable>("PCAN_ERROR_ANYBUSERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_QRCVEMPTY_get, JS_veto_set_variable>("PCAN_ERROR_QRCVEMPTY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_QOVERRUN_get, JS_veto_set_variable>("PCAN_ERROR_QOVERRUN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_QXMTFULL_get, JS_veto_set_variable>("PCAN_ERROR_QXMTFULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_REGTEST_get, JS_veto_set_variable>("PCAN_ERROR_REGTEST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_NODRIVER_get, JS_veto_set_variable>("PCAN_ERROR_NODRIVER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_HWINUSE_get, JS_veto_set_variable>("PCAN_ERROR_HWINUSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_NETINUSE_get, JS_veto_set_variable>("PCAN_ERROR_NETINUSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLHW_get, JS_veto_set_variable>("PCAN_ERROR_ILLHW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLNET_get, JS_veto_set_variable>("PCAN_ERROR_ILLNET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLCLIENT_get, JS_veto_set_variable>("PCAN_ERROR_ILLCLIENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLHANDLE_get, JS_veto_set_variable>("PCAN_ERROR_ILLHANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_RESOURCE_get, JS_veto_set_variable>("PCAN_ERROR_RESOURCE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLPARAMTYPE_get, JS_veto_set_variable>("PCAN_ERROR_ILLPARAMTYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLPARAMVAL_get, JS_veto_set_variable>("PCAN_ERROR_ILLPARAMVAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_UNKNOWN_get, JS_veto_set_variable>("PCAN_ERROR_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLDATA_get, JS_veto_set_variable>("PCAN_ERROR_ILLDATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLMODE_get, JS_veto_set_variable>("PCAN_ERROR_ILLMODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_CAUTION_get, JS_veto_set_variable>("PCAN_ERROR_CAUTION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_INITIALIZE_get, JS_veto_set_variable>("PCAN_ERROR_INITIALIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ERROR_ILLOPERATION_get, JS_veto_set_variable>("PCAN_ERROR_ILLOPERATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_NONE_get, JS_veto_set_variable>("PCAN_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PEAKCAN_get, JS_veto_set_variable>("PCAN_PEAKCAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ISA_get, JS_veto_set_variable>("PCAN_ISA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_DNG_get, JS_veto_set_variable>("PCAN_DNG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCI_get, JS_veto_set_variable>("PCAN_PCI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_USB_get, JS_veto_set_variable>("PCAN_USB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PCC_get, JS_veto_set_variable>("PCAN_PCC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_VIRTUAL_get, JS_veto_set_variable>("PCAN_VIRTUAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LAN_get, JS_veto_set_variable>("PCAN_LAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_DEVICE_ID_get, JS_veto_set_variable>("PCAN_DEVICE_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_5VOLTS_POWER_get, JS_veto_set_variable>("PCAN_5VOLTS_POWER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_RECEIVE_EVENT_get, JS_veto_set_variable>("PCAN_RECEIVE_EVENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_FILTER_get, JS_veto_set_variable>("PCAN_MESSAGE_FILTER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_API_VERSION_get, JS_veto_set_variable>("PCAN_API_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_VERSION_get, JS_veto_set_variable>("PCAN_CHANNEL_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BUSOFF_AUTORESET_get, JS_veto_set_variable>("PCAN_BUSOFF_AUTORESET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LISTEN_ONLY_get, JS_veto_set_variable>("PCAN_LISTEN_ONLY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LOG_LOCATION_get, JS_veto_set_variable>("PCAN_LOG_LOCATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LOG_STATUS_get, JS_veto_set_variable>("PCAN_LOG_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LOG_CONFIGURE_get, JS_veto_set_variable>("PCAN_LOG_CONFIGURE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LOG_TEXT_get, JS_veto_set_variable>("PCAN_LOG_TEXT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_CONDITION_get, JS_veto_set_variable>("PCAN_CHANNEL_CONDITION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_HARDWARE_NAME_get, JS_veto_set_variable>("PCAN_HARDWARE_NAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_RECEIVE_STATUS_get, JS_veto_set_variable>("PCAN_RECEIVE_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CONTROLLER_NUMBER_get, JS_veto_set_variable>("PCAN_CONTROLLER_NUMBER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TRACE_LOCATION_get, JS_veto_set_variable>("PCAN_TRACE_LOCATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TRACE_STATUS_get, JS_veto_set_variable>("PCAN_TRACE_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TRACE_SIZE_get, JS_veto_set_variable>("PCAN_TRACE_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TRACE_CONFIGURE_get, JS_veto_set_variable>("PCAN_TRACE_CONFIGURE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_IDENTIFYING_get, JS_veto_set_variable>("PCAN_CHANNEL_IDENTIFYING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_FEATURES_get, JS_veto_set_variable>("PCAN_CHANNEL_FEATURES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BITRATE_ADAPTING_get, JS_veto_set_variable>("PCAN_BITRATE_ADAPTING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BITRATE_INFO_get, JS_veto_set_variable>("PCAN_BITRATE_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BITRATE_INFO_FD_get, JS_veto_set_variable>("PCAN_BITRATE_INFO_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BUSSPEED_NOMINAL_get, JS_veto_set_variable>("PCAN_BUSSPEED_NOMINAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BUSSPEED_DATA_get, JS_veto_set_variable>("PCAN_BUSSPEED_DATA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IP_ADDRESS_get, JS_veto_set_variable>("PCAN_IP_ADDRESS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_LAN_SERVICE_STATUS_get, JS_veto_set_variable>("PCAN_LAN_SERVICE_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ALLOW_STATUS_FRAMES_get, JS_veto_set_variable>("PCAN_ALLOW_STATUS_FRAMES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ALLOW_RTR_FRAMES_get, JS_veto_set_variable>("PCAN_ALLOW_RTR_FRAMES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ALLOW_ERROR_FRAMES_get, JS_veto_set_variable>("PCAN_ALLOW_ERROR_FRAMES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_INTERFRAME_DELAY_get, JS_veto_set_variable>("PCAN_INTERFRAME_DELAY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ACCEPTANCE_FILTER_11BIT_get, JS_veto_set_variable>("PCAN_ACCEPTANCE_FILTER_11BIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ACCEPTANCE_FILTER_29BIT_get, JS_veto_set_variable>("PCAN_ACCEPTANCE_FILTER_29BIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IO_DIGITAL_CONFIGURATION_get, JS_veto_set_variable>("PCAN_IO_DIGITAL_CONFIGURATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IO_DIGITAL_VALUE_get, JS_veto_set_variable>("PCAN_IO_DIGITAL_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IO_DIGITAL_SET_get, JS_veto_set_variable>("PCAN_IO_DIGITAL_SET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IO_DIGITAL_CLEAR_get, JS_veto_set_variable>("PCAN_IO_DIGITAL_CLEAR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_IO_ANALOG_VALUE_get, JS_veto_set_variable>("PCAN_IO_ANALOG_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_FIRMWARE_VERSION_get, JS_veto_set_variable>("PCAN_FIRMWARE_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ATTACHED_CHANNELS_COUNT_get, JS_veto_set_variable>("PCAN_ATTACHED_CHANNELS_COUNT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ATTACHED_CHANNELS_get, JS_veto_set_variable>("PCAN_ATTACHED_CHANNELS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_ALLOW_ECHO_FRAMES_get, JS_veto_set_variable>("PCAN_ALLOW_ECHO_FRAMES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_DEVICE_PART_NUMBER_get, JS_veto_set_variable>("PCAN_DEVICE_PART_NUMBER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_DEVICE_NUMBER_get, JS_veto_set_variable>("PCAN_DEVICE_NUMBER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PARAMETER_OFF_get, JS_veto_set_variable>("PCAN_PARAMETER_OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_PARAMETER_ON_get, JS_veto_set_variable>("PCAN_PARAMETER_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_FILTER_CLOSE_get, JS_veto_set_variable>("PCAN_FILTER_CLOSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_FILTER_OPEN_get, JS_veto_set_variable>("PCAN_FILTER_OPEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_FILTER_CUSTOM_get, JS_veto_set_variable>("PCAN_FILTER_CUSTOM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_UNAVAILABLE_get, JS_veto_set_variable>("PCAN_CHANNEL_UNAVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_AVAILABLE_get, JS_veto_set_variable>("PCAN_CHANNEL_AVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_OCCUPIED_get, JS_veto_set_variable>("PCAN_CHANNEL_OCCUPIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_CHANNEL_PCANVIEW_get, JS_veto_set_variable>("PCAN_CHANNEL_PCANVIEW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_DEFAULT_get, JS_veto_set_variable>("LOG_FUNCTION_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_ENTRY_get, JS_veto_set_variable>("LOG_FUNCTION_ENTRY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_PARAMETERS_get, JS_veto_set_variable>("LOG_FUNCTION_PARAMETERS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_LEAVE_get, JS_veto_set_variable>("LOG_FUNCTION_LEAVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_WRITE_get, JS_veto_set_variable>("LOG_FUNCTION_WRITE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_READ_get, JS_veto_set_variable>("LOG_FUNCTION_READ");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_LOG_FUNCTION_ALL_get, JS_veto_set_variable>("LOG_FUNCTION_ALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_SINGLE_get, JS_veto_set_variable>("TRACE_FILE_SINGLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_SEGMENTED_get, JS_veto_set_variable>("TRACE_FILE_SEGMENTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_DATE_get, JS_veto_set_variable>("TRACE_FILE_DATE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_TIME_get, JS_veto_set_variable>("TRACE_FILE_TIME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_OVERWRITE_get, JS_veto_set_variable>("TRACE_FILE_OVERWRITE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_FEATURE_FD_CAPABLE_get, JS_veto_set_variable>("FEATURE_FD_CAPABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_FEATURE_DELAY_CAPABLE_get, JS_veto_set_variable>("FEATURE_DELAY_CAPABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_FEATURE_IO_CAPABLE_get, JS_veto_set_variable>("FEATURE_IO_CAPABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SERVICE_STATUS_STOPPED_get, JS_veto_set_variable>("SERVICE_STATUS_STOPPED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SERVICE_STATUS_RUNNING_get, JS_veto_set_variable>("SERVICE_STATUS_RUNNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_MAX_LENGTH_HARDWARE_NAME_get, JS_veto_set_variable>("MAX_LENGTH_HARDWARE_NAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_MAX_LENGTH_VERSION_STRING_get, JS_veto_set_variable>("MAX_LENGTH_VERSION_STRING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_STANDARD_get, JS_veto_set_variable>("PCAN_MESSAGE_STANDARD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_RTR_get, JS_veto_set_variable>("PCAN_MESSAGE_RTR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_EXTENDED_get, JS_veto_set_variable>("PCAN_MESSAGE_EXTENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_FD_get, JS_veto_set_variable>("PCAN_MESSAGE_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_BRS_get, JS_veto_set_variable>("PCAN_MESSAGE_BRS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_ESI_get, JS_veto_set_variable>("PCAN_MESSAGE_ESI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_ECHO_get, JS_veto_set_variable>("PCAN_MESSAGE_ECHO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_ERRFRAME_get, JS_veto_set_variable>("PCAN_MESSAGE_ERRFRAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MESSAGE_STATUS_get, JS_veto_set_variable>("PCAN_MESSAGE_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MODE_STANDARD_get, JS_veto_set_variable>("PCAN_MODE_STANDARD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_MODE_EXTENDED_get, JS_veto_set_variable>("PCAN_MODE_EXTENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_1M_get, JS_veto_set_variable>("PCAN_BAUD_1M");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_800K_get, JS_veto_set_variable>("PCAN_BAUD_800K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_500K_get, JS_veto_set_variable>("PCAN_BAUD_500K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_250K_get, JS_veto_set_variable>("PCAN_BAUD_250K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_125K_get, JS_veto_set_variable>("PCAN_BAUD_125K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_100K_get, JS_veto_set_variable>("PCAN_BAUD_100K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_95K_get, JS_veto_set_variable>("PCAN_BAUD_95K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_83K_get, JS_veto_set_variable>("PCAN_BAUD_83K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_50K_get, JS_veto_set_variable>("PCAN_BAUD_50K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_47K_get, JS_veto_set_variable>("PCAN_BAUD_47K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_33K_get, JS_veto_set_variable>("PCAN_BAUD_33K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_20K_get, JS_veto_set_variable>("PCAN_BAUD_20K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_10K_get, JS_veto_set_variable>("PCAN_BAUD_10K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_BAUD_5K_get, JS_veto_set_variable>("PCAN_BAUD_5K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_ISA_get, JS_veto_set_variable>("PCAN_TYPE_ISA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_ISA_SJA_get, JS_veto_set_variable>("PCAN_TYPE_ISA_SJA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_ISA_PHYTEC_get, JS_veto_set_variable>("PCAN_TYPE_ISA_PHYTEC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_DNG_get, JS_veto_set_variable>("PCAN_TYPE_DNG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_DNG_EPP_get, JS_veto_set_variable>("PCAN_TYPE_DNG_EPP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_DNG_SJA_get, JS_veto_set_variable>("PCAN_TYPE_DNG_SJA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_TYPE_DNG_SJA_EPP_get, JS_veto_set_variable>("PCAN_TYPE_DNG_SJA_EPP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_NONEBUS_get, JS_veto_set_variable>("PCANTP_HANDLE_NONEBUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS2_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS3_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS4_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS5_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS6_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS7_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_ISABUS8_get, JS_veto_set_variable>("PCANTP_HANDLE_ISABUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_DNGBUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_DNGBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS2_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS3_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS4_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS5_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS6_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS7_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS8_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS9_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS10_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS11_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS12_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS13_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS14_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS15_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCIBUS16_get, JS_veto_set_variable>("PCANTP_HANDLE_PCIBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS2_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS3_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS4_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS5_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS6_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS7_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS8_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS9_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS10_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS11_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS12_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS13_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS14_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS15_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_USBBUS16_get, JS_veto_set_variable>("PCANTP_HANDLE_USBBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCCBUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_PCCBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_PCCBUS2_get, JS_veto_set_variable>("PCANTP_HANDLE_PCCBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS1_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS1");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS2_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS3_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS3");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS4_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS5_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS5");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS6_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS6");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS7_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS7");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS8_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS8");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS9_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS9");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS10_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS10");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS11_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS11");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS12_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS12");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS13_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS13");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS14_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS14");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS15_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS15");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HANDLE_LANBUS16_get, JS_veto_set_variable>("PCANTP_HANDLE_LANBUS16");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_1M_get, JS_veto_set_variable>("PCANTP_BAUDRATE_1M");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_800K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_800K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_500K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_500K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_250K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_250K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_125K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_125K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_100K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_100K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_95K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_95K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_83K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_83K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_50K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_50K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_47K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_47K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_33K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_33K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_20K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_20K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_10K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_10K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BAUDRATE_5K_get, JS_veto_set_variable>("PCANTP_BAUDRATE_5K");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_ISA_get, JS_veto_set_variable>("PCANTP_HWTYPE_ISA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_ISA_SJA_get, JS_veto_set_variable>("PCANTP_HWTYPE_ISA_SJA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_ISA_PHYTEC_get, JS_veto_set_variable>("PCANTP_HWTYPE_ISA_PHYTEC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_DNG_get, JS_veto_set_variable>("PCANTP_HWTYPE_DNG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_DNG_EPP_get, JS_veto_set_variable>("PCANTP_HWTYPE_DNG_EPP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_DNG_SJA_get, JS_veto_set_variable>("PCANTP_HWTYPE_DNG_SJA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_HWTYPE_DNG_SJA_EPP_get, JS_veto_set_variable>("PCANTP_HWTYPE_DNG_SJA_EPP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_NONE_get, JS_veto_set_variable>("PCANTP_DEVICE_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_PEAKCAN_get, JS_veto_set_variable>("PCANTP_DEVICE_PEAKCAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_ISA_get, JS_veto_set_variable>("PCANTP_DEVICE_ISA");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_DNG_get, JS_veto_set_variable>("PCANTP_DEVICE_DNG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_PCI_get, JS_veto_set_variable>("PCANTP_DEVICE_PCI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_USB_get, JS_veto_set_variable>("PCANTP_DEVICE_USB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_PCC_get, JS_veto_set_variable>("PCANTP_DEVICE_PCC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_VIRTUAL_get, JS_veto_set_variable>("PCANTP_DEVICE_VIRTUAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEVICE_LAN_get, JS_veto_set_variable>("PCANTP_DEVICE_LAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_OK_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_ERR_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_BUS_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_BUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_NET_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_NET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_INFO_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUSTYPE_PCAN_get, JS_veto_set_variable>("PCANTP_STATUSTYPE_PCAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_OK_get, JS_veto_set_variable>("PCANTP_NETSTATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_TIMEOUT_A_get, JS_veto_set_variable>("PCANTP_NETSTATUS_TIMEOUT_A");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_TIMEOUT_Bs_get, JS_veto_set_variable>("PCANTP_NETSTATUS_TIMEOUT_Bs");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_TIMEOUT_Cr_get, JS_veto_set_variable>("PCANTP_NETSTATUS_TIMEOUT_Cr");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_WRONG_SN_get, JS_veto_set_variable>("PCANTP_NETSTATUS_WRONG_SN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_INVALID_FS_get, JS_veto_set_variable>("PCANTP_NETSTATUS_INVALID_FS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_UNEXP_PDU_get, JS_veto_set_variable>("PCANTP_NETSTATUS_UNEXP_PDU");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_WFT_OVRN_get, JS_veto_set_variable>("PCANTP_NETSTATUS_WFT_OVRN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_BUFFER_OVFLW_get, JS_veto_set_variable>("PCANTP_NETSTATUS_BUFFER_OVFLW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_ERROR_get, JS_veto_set_variable>("PCANTP_NETSTATUS_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_IGNORED_get, JS_veto_set_variable>("PCANTP_NETSTATUS_IGNORED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_TIMEOUT_As_get, JS_veto_set_variable>("PCANTP_NETSTATUS_TIMEOUT_As");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_TIMEOUT_Ar_get, JS_veto_set_variable>("PCANTP_NETSTATUS_TIMEOUT_Ar");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_XMT_FULL_get, JS_veto_set_variable>("PCANTP_NETSTATUS_XMT_FULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_BUS_ERROR_get, JS_veto_set_variable>("PCANTP_NETSTATUS_BUS_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETSTATUS_NO_MEMORY_get, JS_veto_set_variable>("PCANTP_NETSTATUS_NO_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_OK_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_LIGHT_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_LIGHT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_HEAVY_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_HEAVY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_WARNING_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_WARNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_PASSIVE_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_PASSIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_OFF_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BUSSTATUS_ANY_get, JS_veto_set_variable>("PCANTP_BUSSTATUS_ANY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_OK_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_NOT_INITIALIZED_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_NOT_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_ALREADY_INITIALIZED_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_ALREADY_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_NO_MEMORY_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_NO_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_OVERFLOW_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_NO_MESSAGE_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_NO_MESSAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_PARAM_INVALID_TYPE_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_PARAM_INVALID_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_PARAM_INVALID_VALUE_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_PARAM_INVALID_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_MAPPING_NOT_INITIALIZED_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_MAPPING_NOT_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_MAPPING_INVALID_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_MAPPING_INVALID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_MAPPING_ALREADY_INITIALIZED_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_MAPPING_ALREADY_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_PARAM_BUFFER_TOO_SMALL_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_PARAM_BUFFER_TOO_SMALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_QUEUE_TX_FULL_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_QUEUE_TX_FULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_LOCK_TIMEOUT_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_LOCK_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_INVALID_HANDLE_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_INVALID_HANDLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ERRSTATUS_UNKNOWN_get, JS_veto_set_variable>("PCANTP_ERRSTATUS_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_OK_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_INPUT_MODIFIED_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_INPUT_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_DLC_MODIFIED_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_DLC_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_DATA_LENGTH_MODIFIED_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_DATA_LENGTH_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_FD_FLAG_MODIFIED_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_FD_FLAG_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_FULL_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_FULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_BUFFER_IN_USE_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_BUFFER_IN_USE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_OVERRUN_get, JS_veto_set_variable>("PCANTP_INFOSTATUS_CAUTION_RX_QUEUE_OVERRUN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_OFFSET_BUS_get, JS_veto_set_variable>("PCANTP_STATUS_OFFSET_BUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_OFFSET_NET_get, JS_veto_set_variable>("PCANTP_STATUS_OFFSET_NET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_OFFSET_INFO_get, JS_veto_set_variable>("PCANTP_STATUS_OFFSET_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_OK_get, JS_veto_set_variable>("PCANTP_STATUS_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NOT_INITIALIZED_get, JS_veto_set_variable>("PCANTP_STATUS_NOT_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_ALREADY_INITIALIZED_get, JS_veto_set_variable>("PCANTP_STATUS_ALREADY_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NO_MEMORY_get, JS_veto_set_variable>("PCANTP_STATUS_NO_MEMORY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_OVERFLOW_get, JS_veto_set_variable>("PCANTP_STATUS_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NO_MESSAGE_get, JS_veto_set_variable>("PCANTP_STATUS_NO_MESSAGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_PARAM_INVALID_TYPE_get, JS_veto_set_variable>("PCANTP_STATUS_PARAM_INVALID_TYPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_PARAM_INVALID_VALUE_get, JS_veto_set_variable>("PCANTP_STATUS_PARAM_INVALID_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MAPPING_NOT_INITIALIZED_get, JS_veto_set_variable>("PCANTP_STATUS_MAPPING_NOT_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MAPPING_INVALID_get, JS_veto_set_variable>("PCANTP_STATUS_MAPPING_INVALID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MAPPING_ALREADY_INITIALIZED_get, JS_veto_set_variable>("PCANTP_STATUS_MAPPING_ALREADY_INITIALIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_PARAM_BUFFER_TOO_SMALL_get, JS_veto_set_variable>("PCANTP_STATUS_PARAM_BUFFER_TOO_SMALL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_QUEUE_TX_FULL_get, JS_veto_set_variable>("PCANTP_STATUS_QUEUE_TX_FULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_LOCK_TIMEOUT_get, JS_veto_set_variable>("PCANTP_STATUS_LOCK_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_HANDLE_INVALID_get, JS_veto_set_variable>("PCANTP_STATUS_HANDLE_INVALID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_UNKNOWN_get, JS_veto_set_variable>("PCANTP_STATUS_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_LIGHT_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_LIGHT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_HEAVY_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_HEAVY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_WARNING_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_WARNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_PASSIVE_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_PASSIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_OFF_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_BUS_ANY_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_BUS_ANY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_NETWORK_RESULT_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_NETWORK_RESULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_TIMEOUT_A_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_TIMEOUT_A");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_TIMEOUT_Bs_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_TIMEOUT_Bs");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_TIMEOUT_Cr_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_TIMEOUT_Cr");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_WRONG_SN_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_WRONG_SN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_INVALID_FS_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_INVALID_FS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_UNEXP_PDU_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_UNEXP_PDU");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_WFT_OVRN_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_WFT_OVRN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_BUFFER_OVFLW_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_BUFFER_OVFLW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_ERROR_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_IGNORED_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_IGNORED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_TIMEOUT_Ar_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_TIMEOUT_Ar");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_NETWORK_TIMEOUT_As_get, JS_veto_set_variable>("PCANTP_STATUS_NETWORK_TIMEOUT_As");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_INPUT_MODIFIED_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_INPUT_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_DLC_MODIFIED_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_DLC_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_DATA_LENGTH_MODIFIED_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_DATA_LENGTH_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_FD_FLAG_MODIFIED_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_FD_FLAG_MODIFIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_RX_QUEUE_FULL_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_RX_QUEUE_FULL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_BUFFER_IN_USE_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_BUFFER_IN_USE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_CAUTION_RX_QUEUE_OVERRUN_get, JS_veto_set_variable>("PCANTP_STATUS_CAUTION_RX_QUEUE_OVERRUN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_FLAG_PCAN_STATUS_get, JS_veto_set_variable>("PCANTP_STATUS_FLAG_PCAN_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MASK_ERROR_get, JS_veto_set_variable>("PCANTP_STATUS_MASK_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MASK_BUS_get, JS_veto_set_variable>("PCANTP_STATUS_MASK_BUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MASK_ISOTP_NET_get, JS_veto_set_variable>("PCANTP_STATUS_MASK_ISOTP_NET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MASK_INFO_get, JS_veto_set_variable>("PCANTP_STATUS_MASK_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STATUS_MASK_PCAN_get, JS_veto_set_variable>("PCANTP_STATUS_MASK_PCAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_API_VERSION_get, JS_veto_set_variable>("PCANTP_PARAMETER_API_VERSION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CHANNEL_CONDITION_get, JS_veto_set_variable>("PCANTP_PARAMETER_CHANNEL_CONDITION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_DEBUG_get, JS_veto_set_variable>("PCANTP_PARAMETER_DEBUG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_RECEIVE_EVENT_get, JS_veto_set_variable>("PCANTP_PARAMETER_RECEIVE_EVENT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_FRAME_FILTERING_get, JS_veto_set_variable>("PCANTP_PARAMETER_FRAME_FILTERING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CAN_TX_DL_get, JS_veto_set_variable>("PCANTP_PARAMETER_CAN_TX_DL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CAN_DATA_PADDING_get, JS_veto_set_variable>("PCANTP_PARAMETER_CAN_DATA_PADDING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CAN_PADDING_VALUE_get, JS_veto_set_variable>("PCANTP_PARAMETER_CAN_PADDING_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_ISO_REV_get, JS_veto_set_variable>("PCANTP_PARAMETER_ISO_REV");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_J1939_PRIORITY_get, JS_veto_set_variable>("PCANTP_PARAMETER_J1939_PRIORITY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_MSG_PENDING_get, JS_veto_set_variable>("PCANTP_PARAMETER_MSG_PENDING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_BLOCK_SIZE_get, JS_veto_set_variable>("PCANTP_PARAMETER_BLOCK_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_BLOCK_SIZE_TX_get, JS_veto_set_variable>("PCANTP_PARAMETER_BLOCK_SIZE_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SEPARATION_TIME_get, JS_veto_set_variable>("PCANTP_PARAMETER_SEPARATION_TIME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SEPARATION_TIME_TX_get, JS_veto_set_variable>("PCANTP_PARAMETER_SEPARATION_TIME_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_WFT_MAX_get, JS_veto_set_variable>("PCANTP_PARAMETER_WFT_MAX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_WFT_MAX_TX_get, JS_veto_set_variable>("PCANTP_PARAMETER_WFT_MAX_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_AS_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_AS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_AR_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_AR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_BR_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_BR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_BS_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_BS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_CR_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_CR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_CS_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_CS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_TIMEOUT_TOLERANCE_get, JS_veto_set_variable>("PCANTP_PARAMETER_TIMEOUT_TOLERANCE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_ISO_TIMEOUTS_get, JS_veto_set_variable>("PCANTP_PARAMETER_ISO_TIMEOUTS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SELFRECEIVE_LATENCY_get, JS_veto_set_variable>("PCANTP_PARAMETER_SELFRECEIVE_LATENCY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_MAX_RX_QUEUE_get, JS_veto_set_variable>("PCANTP_PARAMETER_MAX_RX_QUEUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_KEEP_HIGHER_LAYER_MESSAGES_get, JS_veto_set_variable>("PCANTP_PARAMETER_KEEP_HIGHER_LAYER_MESSAGES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_FILTER_CAN_ID_get, JS_veto_set_variable>("PCANTP_PARAMETER_FILTER_CAN_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SUPPORT_29B_ENHANCED_get, JS_veto_set_variable>("PCANTP_PARAMETER_SUPPORT_29B_ENHANCED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SUPPORT_29B_FIXED_NORMAL_get, JS_veto_set_variable>("PCANTP_PARAMETER_SUPPORT_29B_FIXED_NORMAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_SUPPORT_29B_MIXED_get, JS_veto_set_variable>("PCANTP_PARAMETER_SUPPORT_29B_MIXED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_MSG_CHECK_get, JS_veto_set_variable>("PCANTP_PARAMETER_MSG_CHECK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_RESET_HARD_get, JS_veto_set_variable>("PCANTP_PARAMETER_RESET_HARD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_NETWORK_LAYER_DESIGN_get, JS_veto_set_variable>("PCANTP_PARAMETER_NETWORK_LAYER_DESIGN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_ALLOW_MSGTYPE_CANINFO_get, JS_veto_set_variable>("PCANTP_PARAMETER_ALLOW_MSGTYPE_CANINFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_get, JS_veto_set_variable>("PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_USER_CONTEXT_get, JS_veto_set_variable>("PCANTP_PARAMETER_RECEIVE_EVENT_CALLBACK_USER_CONTEXT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_HARDWARE_NAME_get, JS_veto_set_variable>("PCANTP_PARAMETER_HARDWARE_NAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_DEVICE_ID_get, JS_veto_set_variable>("PCANTP_PARAMETER_DEVICE_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_DEVICE_NUMBER_get, JS_veto_set_variable>("PCANTP_PARAMETER_DEVICE_NUMBER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CONTROLLER_NUMBER_get, JS_veto_set_variable>("PCANTP_PARAMETER_CONTROLLER_NUMBER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_PARAMETER_CHANNEL_FEATURES_get, JS_veto_set_variable>("PCANTP_PARAMETER_CHANNEL_FEATURES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_NONE_get, JS_veto_set_variable>("PCANTP_MSGTYPE_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_CAN_get, JS_veto_set_variable>("PCANTP_MSGTYPE_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_CANFD_get, JS_veto_set_variable>("PCANTP_MSGTYPE_CANFD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_ISOTP_get, JS_veto_set_variable>("PCANTP_MSGTYPE_ISOTP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_CANINFO_get, JS_veto_set_variable>("PCANTP_MSGTYPE_CANINFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_FRAME_get, JS_veto_set_variable>("PCANTP_MSGTYPE_FRAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGTYPE_ANY_get, JS_veto_set_variable>("PCANTP_MSGTYPE_ANY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGFLAG_NONE_get, JS_veto_set_variable>("PCANTP_MSGFLAG_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGFLAG_LOOPBACK_get, JS_veto_set_variable>("PCANTP_MSGFLAG_LOOPBACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGFLAG_ISOTP_FRAME_get, JS_veto_set_variable>("PCANTP_MSGFLAG_ISOTP_FRAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGFLAG_QOVERRUN_OCCURED_get, JS_veto_set_variable>("PCANTP_MSGFLAG_QOVERRUN_OCCURED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_STANDARD_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_STANDARD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_RTR_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_RTR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_EXTENDED_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_EXTENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_FD_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_BRS_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_BRS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_ESI_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_ESI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_ERRFRAME_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_ERRFRAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_STATUS_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_ECHO_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_ECHO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_SELFRECEIVE_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_SELFRECEIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_MSGTYPE_FLAG_INFO_get, JS_veto_set_variable>("PCANTP_CAN_MSGTYPE_FLAG_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_UNKNOWN_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_DIAGNOSTIC_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_DIAGNOSTIC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_REMOTE_DIAGNOSTIC_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_REMOTE_DIAGNOSTIC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_RX_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_RX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_TX_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_FLAG_INDICATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_MSGTYPE_MASK_INDICATION_get, JS_veto_set_variable>("PCANTP_ISOTP_MSGTYPE_MASK_INDICATION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_UNKNOWN_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_NONE_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_NORMAL_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_NORMAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_FIXED_NORMAL_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_FIXED_NORMAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_EXTENDED_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_EXTENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_MIXED_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_MIXED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_FORMAT_ENHANCED_get, JS_veto_set_variable>("PCANTP_ISOTP_FORMAT_ENHANCED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_ADDRESSING_UNKNOWN_get, JS_veto_set_variable>("PCANTP_ISOTP_ADDRESSING_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_ADDRESSING_PHYSICAL_get, JS_veto_set_variable>("PCANTP_ISOTP_ADDRESSING_PHYSICAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISOTP_ADDRESSING_FUNCTIONAL_get, JS_veto_set_variable>("PCANTP_ISOTP_ADDRESSING_FUNCTIONAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_DEBUG_get, JS_veto_set_variable>("PCANTP_OPTION_DEBUG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_CAN_DATA_PADDING_get, JS_veto_set_variable>("PCANTP_OPTION_CAN_DATA_PADDING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_CAN_PADDING_VALUE_get, JS_veto_set_variable>("PCANTP_OPTION_CAN_PADDING_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_J1939_PRIORITY_get, JS_veto_set_variable>("PCANTP_OPTION_J1939_PRIORITY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_MSG_PENDING_get, JS_veto_set_variable>("PCANTP_OPTION_MSG_PENDING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_BLOCK_SIZE_get, JS_veto_set_variable>("PCANTP_OPTION_BLOCK_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_BLOCK_SIZE_TX_get, JS_veto_set_variable>("PCANTP_OPTION_BLOCK_SIZE_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_SEPARATION_TIME_get, JS_veto_set_variable>("PCANTP_OPTION_SEPARATION_TIME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_SEPARATION_TIME_TX_get, JS_veto_set_variable>("PCANTP_OPTION_SEPARATION_TIME_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_WFT_MAX_get, JS_veto_set_variable>("PCANTP_OPTION_WFT_MAX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_WFT_MAX_TX_get, JS_veto_set_variable>("PCANTP_OPTION_WFT_MAX_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_AS_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_AS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_AR_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_AR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_BS_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_BS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_BR_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_BR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_CS_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_CS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_TIMEOUT_CR_get, JS_veto_set_variable>("PCANTP_OPTION_TIMEOUT_CR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_OPTION_SELFRECEIVE_LATENCY_get, JS_veto_set_variable>("PCANTP_OPTION_SELFRECEIVE_LATENCY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGPROGRESS_STATE_QUEUED_get, JS_veto_set_variable>("PCANTP_MSGPROGRESS_STATE_QUEUED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGPROGRESS_STATE_PROCESSING_get, JS_veto_set_variable>("PCANTP_MSGPROGRESS_STATE_PROCESSING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGPROGRESS_STATE_COMPLETED_get, JS_veto_set_variable>("PCANTP_MSGPROGRESS_STATE_COMPLETED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGPROGRESS_STATE_UNKNOWN_get, JS_veto_set_variable>("PCANTP_MSGPROGRESS_STATE_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGDIRECTION_RX_get, JS_veto_set_variable>("PCANTP_MSGDIRECTION_RX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSGDIRECTION_TX_get, JS_veto_set_variable>("PCANTP_MSGDIRECTION_TX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_VALUE_PARAMETER_OFF_get, JS_veto_set_variable>("PCANTP_VALUE_PARAMETER_OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_VALUE_PARAMETER_ON_get, JS_veto_set_variable>("PCANTP_VALUE_PARAMETER_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_NONE_get, JS_veto_set_variable>("PCANTP_DEBUG_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_CAN_get, JS_veto_set_variable>("PCANTP_DEBUG_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_NOTICE_get, JS_veto_set_variable>("PCANTP_DEBUG_NOTICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_INFO_get, JS_veto_set_variable>("PCANTP_DEBUG_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_WARNING_get, JS_veto_set_variable>("PCANTP_DEBUG_WARNING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_DEBUG_ERROR_get, JS_veto_set_variable>("PCANTP_DEBUG_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CHANNEL_UNAVAILABLE_get, JS_veto_set_variable>("PCANTP_CHANNEL_UNAVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CHANNEL_AVAILABLE_get, JS_veto_set_variable>("PCANTP_CHANNEL_AVAILABLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CHANNEL_OCCUPIED_get, JS_veto_set_variable>("PCANTP_CHANNEL_OCCUPIED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_WFT_MAX_UNLIMITED_get, JS_veto_set_variable>("PCANTP_WFT_MAX_UNLIMITED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_WFT_MAX_DEFAULT_get, JS_veto_set_variable>("PCANTP_WFT_MAX_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_WFT_MAX_TX_DEFAULT_get, JS_veto_set_variable>("PCANTP_WFT_MAX_TX_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSG_PENDING_HIDE_get, JS_veto_set_variable>("PCANTP_MSG_PENDING_HIDE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MSG_PENDING_SHOW_get, JS_veto_set_variable>("PCANTP_MSG_PENDING_SHOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_DATA_PADDING_NONE_get, JS_veto_set_variable>("PCANTP_CAN_DATA_PADDING_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_DATA_PADDING_ON_get, JS_veto_set_variable>("PCANTP_CAN_DATA_PADDING_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_DATA_PADDING_VALUE_get, JS_veto_set_variable>("PCANTP_CAN_DATA_PADDING_VALUE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FRAME_FILTERING_ISOTP_get, JS_veto_set_variable>("PCANTP_FRAME_FILTERING_ISOTP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FRAME_FILTERING_CAN_get, JS_veto_set_variable>("PCANTP_FRAME_FILTERING_CAN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FRAME_FILTERING_VERBOSE_get, JS_veto_set_variable>("PCANTP_FRAME_FILTERING_VERBOSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_J1939_PRIORITY_DEFAULT_get, JS_veto_set_variable>("PCANTP_J1939_PRIORITY_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_CAN_ID_11_BIT_get, JS_veto_set_variable>("PCANTP_MAX_CAN_ID_11_BIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_CAN_ID_29_BIT_get, JS_veto_set_variable>("PCANTP_MAX_CAN_ID_29_BIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_LENGTH_CAN_STANDARD_get, JS_veto_set_variable>("PCANTP_MAX_LENGTH_CAN_STANDARD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_LENGTH_CAN_FD_get, JS_veto_set_variable>("PCANTP_MAX_LENGTH_CAN_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_LENGTH_ISOTP2004_get, JS_veto_set_variable>("PCANTP_MAX_LENGTH_ISOTP2004");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_LENGTH_ISOTP2016_get, JS_veto_set_variable>("PCANTP_MAX_LENGTH_ISOTP2016");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_LENGTH_ALLOC_get, JS_veto_set_variable>("PCANTP_MAX_LENGTH_ALLOC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_CAN_TX_DL_DEFAULT_get, JS_veto_set_variable>("PCANTP_CAN_TX_DL_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISO_REV_2004_get, JS_veto_set_variable>("PCANTP_ISO_REV_2004");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISO_REV_2016_get, JS_veto_set_variable>("PCANTP_ISO_REV_2016");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BLOCK_SIZE_TX_IGNORE_get, JS_veto_set_variable>("PCANTP_BLOCK_SIZE_TX_IGNORE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_SEPERATION_TIME_TX_IGNORE_get, JS_veto_set_variable>("PCANTP_SEPERATION_TIME_TX_IGNORE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISO_TIMEOUTS_15765_2_get, JS_veto_set_variable>("PCANTP_ISO_TIMEOUTS_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_ISO_TIMEOUTS_15765_4_get, JS_veto_set_variable>("PCANTP_ISO_TIMEOUTS_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_SELFRECEIVE_LATENCY_NONE_get, JS_veto_set_variable>("PCANTP_SELFRECEIVE_LATENCY_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_SELFRECEIVE_LATENCY_LIGHT_get, JS_veto_set_variable>("PCANTP_SELFRECEIVE_LATENCY_LIGHT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_SELFRECEIVE_LATENCY_OPTIMIZED_get, JS_veto_set_variable>("PCANTP_SELFRECEIVE_LATENCY_OPTIMIZED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_MAX_RX_QUEUE_DEFAULT_get, JS_veto_set_variable>("PCANTP_MAX_RX_QUEUE_DEFAULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETWORK_LAYER_FULL_DUPLEX_get, JS_veto_set_variable>("PCANTP_NETWORK_LAYER_FULL_DUPLEX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_NETWORK_LAYER_HALF_DUPLEX_get, JS_veto_set_variable>("PCANTP_NETWORK_LAYER_HALF_DUPLEX");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STMIN_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_STMIN_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BS_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_BS_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_AR_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_AR_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_AS_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_AS_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_BR_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_BR_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_BS_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_BS_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_CR_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_CR_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_CS_ISO_15765_2_get, JS_veto_set_variable>("PCANTP_TIMEOUT_CS_ISO_15765_2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_TOLERANCE_get, JS_veto_set_variable>("PCANTP_TIMEOUT_TOLERANCE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_STMIN_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_STMIN_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_BS_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_BS_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_AR_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_AR_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_AS_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_AS_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_BR_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_BR_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_BS_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_BS_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_CR_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_CR_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_TIMEOUT_CS_ISO_15765_4_get, JS_veto_set_variable>("PCANTP_TIMEOUT_CS_ISO_15765_4");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FLAG_MASK_PRIORITY_get, JS_veto_set_variable>("PCANTP_FLAG_MASK_PRIORITY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FLAG_PADDING_ON_get, JS_veto_set_variable>("PCANTP_FLAG_PADDING_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FLAG_INDICATION_ON_get, JS_veto_set_variable>("PCANTP_FLAG_INDICATION_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCANTP_FLAG_ECHO_FRAMES_ON_get, JS_veto_set_variable>("PCANTP_FLAG_ECHO_FRAMES_ON");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_Initialize_2016", _wrap_CANTP_Initialize_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_InitializeFD_2016", _wrap_CANTP_InitializeFD_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_Uninitialize_2016", _wrap_CANTP_Uninitialize_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_Reset_2016", _wrap_CANTP_Reset_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_GetCanBusStatus_2016", _wrap_CANTP_GetCanBusStatus_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_Read_2016", _wrap_CANTP_Read_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_GetMsgProgress_2016", _wrap_CANTP_GetMsgProgress_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_Write_2016", _wrap_CANTP_Write_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_GetValue_2016", _wrap_CANTP_GetValue_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_SetValue_2016", _wrap_CANTP_SetValue_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_AddMapping_2016", _wrap_CANTP_AddMapping_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_RemoveMappings_2016", _wrap_CANTP_RemoveMappings_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_RemoveMapping_2016", _wrap_CANTP_RemoveMapping_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_GetMappings_2016", _wrap_CANTP_GetMappings_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_AddFiltering_2016", _wrap_CANTP_AddFiltering_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_RemoveFiltering_2016", _wrap_CANTP_RemoveFiltering_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_AddMsgRule_2016", _wrap_CANTP_AddMsgRule_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_RemoveMsgRule_2016", _wrap_CANTP_RemoveMsgRule_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_GetErrorText_2016", _wrap_CANTP_GetErrorText_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgDataAlloc_2016", _wrap_CANTP_MsgDataAlloc_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgDataInit_2016", _wrap_CANTP_MsgDataInit_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgDataInitOptions_2016", _wrap_CANTP_MsgDataInitOptions_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgDataFree_2016", _wrap_CANTP_MsgDataFree_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgEqual_2016", _wrap_CANTP_MsgEqual_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgCopy_2016", _wrap_CANTP_MsgCopy_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgDlcToLength_2016", _wrap_CANTP_MsgDlcToLength_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_MsgLengthToDlc_2016", _wrap_CANTP_MsgLengthToDlc_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_StatusListTypes_2016", _wrap_CANTP_StatusListTypes_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_StatusGet_2016", _wrap_CANTP_StatusGet_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CANTP_StatusIsOk_2016", _wrap_CANTP_StatusIsOk_2016);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PCAN_HARD_RESET_STATUS_get, JS_veto_set_variable>("PCAN_HARD_RESET_STATUS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_TRACE_FILE_DATA_LENGTH_get, JS_veto_set_variable>("TRACE_FILE_DATA_LENGTH");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_Initialize", _wrap_CAN_Initialize);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_InitializeFD", _wrap_CAN_InitializeFD);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_Uninitialize", _wrap_CAN_Uninitialize);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_Reset", _wrap_CAN_Reset);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_GetStatus", _wrap_CAN_GetStatus);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_Read", _wrap_CAN_Read);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_ReadFD", _wrap_CAN_ReadFD);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_Write", _wrap_CAN_Write);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_WriteFD", _wrap_CAN_WriteFD);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_FilterMessages", _wrap_CAN_FilterMessages);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_GetValue", _wrap_CAN_GetValue);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_SetValue", _wrap_CAN_SetValue);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_GetErrorText", _wrap_CAN_GetErrorText);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CAN_LookUpChannel", _wrap_CAN_LookUpChannel);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("LoadDll", _wrap_LoadDll);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMsgDataIsoTp", _wrap_GetMsgDataIsoTp);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMsgDataAny", _wrap_GetMsgDataAny);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMsgDataCan", _wrap_GetMsgDataCan);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetMsgDataCanFd", _wrap_GetMsgDataCanFd);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(xmlpp, Init)

