/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg)               SWIG_Error(code, msg)
#define SWIG_fail                               goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  throw Napi::Error::New(env, msg);
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      Napi::Error::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_OverflowError:
    case SWIG_IndexError:
      Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_ValueError:
    case SWIG_TypeError:
      Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
      return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(nullptr),
        owned(true),
        size(0),
        info(nullptr)
        {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() {};

    Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}


/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p___int64 swig_types[0]
#define SWIGTYPE_p_canConnectParameters swig_types[1]
#define SWIGTYPE_p_char swig_types[2]
#define SWIGTYPE_p_debugConnectMode swig_types[3]
#define SWIGTYPE_p_debugConnectParameters swig_types[4]
#define SWIGTYPE_p_debugPort swig_types[5]
#define SWIGTYPE_p_debugResetMode swig_types[6]
#define SWIGTYPE_p_deviceSector swig_types[7]
#define SWIGTYPE_p_dfuConnectParameters swig_types[8]
#define SWIGTYPE_p_dfuDeviceInfo swig_types[9]
#define SWIGTYPE_p_dfuDeviceInfoArray swig_types[10]
#define SWIGTYPE_p_displayCallBacks swig_types[11]
#define SWIGTYPE_p_externalLoader swig_types[12]
#define SWIGTYPE_p_externalStorageInfo swig_types[13]
#define SWIGTYPE_p_f___void swig_types[14]
#define SWIGTYPE_p_f_int_int__void swig_types[15]
#define SWIGTYPE_p_f_int_p_q_const__wchar_t__void swig_types[16]
#define SWIGTYPE_p_fileData_C swig_types[17]
#define SWIGTYPE_p_float swig_types[18]
#define SWIGTYPE_p_frequencies swig_types[19]
#define SWIGTYPE_p_generalInf swig_types[20]
#define SWIGTYPE_p_i2cConnectParameters swig_types[21]
#define SWIGTYPE_p_int swig_types[22]
#define SWIGTYPE_p_long swig_types[23]
#define SWIGTYPE_p_long_long swig_types[24]
#define SWIGTYPE_p_p_char swig_types[25]
#define SWIGTYPE_p_p_debugConnectParameters swig_types[26]
#define SWIGTYPE_p_p_dfuDeviceInfo swig_types[27]
#define SWIGTYPE_p_p_dfuDeviceInfoArray swig_types[28]
#define SWIGTYPE_p_p_externalLoader swig_types[29]
#define SWIGTYPE_p_p_externalStorageInfo swig_types[30]
#define SWIGTYPE_p_p_storageStructure swig_types[31]
#define SWIGTYPE_p_p_unsigned_char swig_types[32]
#define SWIGTYPE_p_p_unsigned_long swig_types[33]
#define SWIGTYPE_p_p_usartConnectParameters swig_types[34]
#define SWIGTYPE_p_peripheral_C swig_types[35]
#define SWIGTYPE_p_segmentData_C swig_types[36]
#define SWIGTYPE_p_short swig_types[37]
#define SWIGTYPE_p_signed___int64 swig_types[38]
#define SWIGTYPE_p_signed_char swig_types[39]
#define SWIGTYPE_p_spiConnectParameters swig_types[40]
#define SWIGTYPE_p_targetInterfaceType swig_types[41]
#define SWIGTYPE_p_unsigned___int64 swig_types[42]
#define SWIGTYPE_p_unsigned_char swig_types[43]
#define SWIGTYPE_p_unsigned_int swig_types[44]
#define SWIGTYPE_p_unsigned_long swig_types[45]
#define SWIGTYPE_p_unsigned_long_long swig_types[46]
#define SWIGTYPE_p_unsigned_short swig_types[47]
#define SWIGTYPE_p_usartConnectParameters swig_types[48]
#define SWIGTYPE_p_usartFlowControl swig_types[49]
#define SWIGTYPE_p_usartParity swig_types[50]
#define SWIGTYPE_p_void swig_types[51]
#define SWIGTYPE_p_wchar_t swig_types[52]
static swig_type_info *swig_types[54];
static swig_module_info swig_module = {swig_types, 53, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <windows.h>

#define VSOMEIP_INTERNAL_SUPPRESS_DEPRECATED
#include <CubeProgrammer_API.h>


#include <stdint.h>		// Use the C99 official header


SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Napi::Value obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Napi::Value
SWIG_Env_FromCharPtrAndSize(Napi::Env env, const char* carray, size_t size)
{
  if (carray) {
    Napi::String js_str = Napi::String::New(env, carray, size);
    return js_str;
  } else {
    return env.Undefined();
  }
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (Napi::Value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE Napi::Value
SWIG_From_unsigned_SS_char(Napi::Env env, unsigned char c)
{
  return Napi::Number::New(env, static_cast<double>(c));
}


SWIGINTERN
int SWIG_AsVal_float (Napi::Value obj, float *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<float>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_float(Napi::Env env, float val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_long (Napi::Value obj, long* val)
{
  if (!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<long>(num.Int64Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_char (Napi::Value obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE Napi::Value
SWIG_From_char(Napi::Env env, char c)
{
  Napi::String js_str = Napi::String::New(env, &c, 1);
  return js_str;
}





// Override the default one with an empty one


SWIGINTERN
int SWIG_AsVal_unsigned_SS_short (Napi::Value valRef, unsigned short* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned short>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_short(Napi::Env env, unsigned short val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long(Napi::Env env, unsigned long val)
{
  return Napi::Number::New(env, val);
}


typedef dfuDeviceInfo dfuDeviceInfoArray;


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (Napi::Value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN dfuDeviceInfoArray *new_dfuDeviceInfoArray(size_t nelements){
  return new dfuDeviceInfo[nelements]();
}
SWIGINTERN dfuDeviceInfo dfuDeviceInfoArray_getitem(dfuDeviceInfoArray *self,size_t index){
  return self[index];
}
SWIGINTERN void dfuDeviceInfoArray_setitem(dfuDeviceInfoArray *self,size_t index,dfuDeviceInfo value){
  self[index] = value;
}
SWIGINTERN dfuDeviceInfo *dfuDeviceInfoArray_cast(dfuDeviceInfoArray *self){
  return self;
}
SWIGINTERN dfuDeviceInfoArray *dfuDeviceInfoArray_frompointer(dfuDeviceInfo *t){
  return (dfuDeviceInfoArray *) t;
}

typedef dfuDeviceInfoPtr dfuDeviceInfoPtr;

SWIGINTERN dfuDeviceInfoPtr *new_dfuDeviceInfoPtr(){
  return new dfuDeviceInfoPtr();
}
SWIGINTERN void dfuDeviceInfoPtr_assign(dfuDeviceInfoPtr *self,dfuDeviceInfoPtr value){
  *self = value;
}
SWIGINTERN dfuDeviceInfoPtr dfuDeviceInfoPtr_value(dfuDeviceInfoPtr *self){
  return *self;
}
SWIGINTERN dfuDeviceInfoPtr *dfuDeviceInfoPtr_cast(dfuDeviceInfoPtr *self){
  return self;
}
SWIGINTERN dfuDeviceInfoPtr *dfuDeviceInfoPtr_frompointer(dfuDeviceInfoPtr *t){
  return (dfuDeviceInfoPtr *) t;
}

void LoadDll(const char* path) {
  SetDllDirectory(path);
}



#define SWIG_NAPI_INIT vsomeip_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_dfuDeviceInfo_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_dfuDeviceInfo_templ(const Napi::CallbackInfo &);
_exports_dfuDeviceInfo_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_usbIndex_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_usbIndex_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_busNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_busNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_addressNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_addressNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_productId_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_productId_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_serialNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_serialNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfo_dfuVersion_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuDeviceInfo_dfuVersion_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_dfuDeviceInfo(const Napi::CallbackInfo &);
virtual ~_exports_dfuDeviceInfo_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_dfuDeviceInfo_inst : public _exports_dfuDeviceInfo_templ<_exports_dfuDeviceInfo_inst> {
public:
  using _exports_dfuDeviceInfo_templ::_exports_dfuDeviceInfo_templ;
  virtual ~_exports_dfuDeviceInfo_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_dfuDeviceInfo_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_dfuDeviceInfo_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: dfuDeviceInfo (_exports_dfuDeviceInfo) */
// jsnapi_getclass
Napi::Function _exports_dfuDeviceInfo_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_dfuDeviceInfo_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_dfuDeviceInfo_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_dfuDeviceInfo_inst>::DefineClass(env, "dfuDeviceInfo", symbolTable);
}

void _exports_dfuDeviceInfo_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_dfuDeviceInfo_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_dfuDeviceInfo_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("usbIndex");
  members.insert({
    "usbIndex",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("usbIndex",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_usbIndex_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_usbIndex_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("busNumber");
  members.insert({
    "busNumber",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("busNumber",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_busNumber_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_busNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("addressNumber");
  members.insert({
    "addressNumber",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("addressNumber",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_addressNumber_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_addressNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("productId");
  members.insert({
    "productId",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("productId",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_productId_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_productId_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("serialNumber");
  members.insert({
    "serialNumber",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("serialNumber",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_serialNumber_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_serialNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dfuVersion");
  members.insert({
    "dfuVersion",
      _exports_dfuDeviceInfo_templ::InstanceAccessor("dfuVersion",
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_dfuVersion_get,
        &_exports_dfuDeviceInfo_templ::_wrap_dfuDeviceInfo_dfuVersion_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_usartConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_usartConnectParameters_templ(const Napi::CallbackInfo &);
_exports_usartConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_portName_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_portName_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_baudrate_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_baudrate_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_parity_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_parity_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_dataBits_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_dataBits_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_stopBits_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_stopBits_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_flowControl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_flowControl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_statusRTS_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_statusRTS_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_statusDTR_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_statusDTR_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_DelayRtsDtr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_DelayRtsDtr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_noinitBits_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_noinitBits_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_rdu_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_rdu_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_usartConnectParameters_tzenreg_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_usartConnectParameters_tzenreg_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_usartConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_usartConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_usartConnectParameters_inst : public _exports_usartConnectParameters_templ<_exports_usartConnectParameters_inst> {
public:
  using _exports_usartConnectParameters_templ::_exports_usartConnectParameters_templ;
  virtual ~_exports_usartConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_usartConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_usartConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: usartConnectParameters (_exports_usartConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_usartConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_usartConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_usartConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_usartConnectParameters_inst>::DefineClass(env, "usartConnectParameters", symbolTable);
}

void _exports_usartConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_usartConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_usartConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("portName");
  members.insert({
    "portName",
      _exports_usartConnectParameters_templ::InstanceAccessor("portName",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_portName_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_portName_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("baudrate");
  members.insert({
    "baudrate",
      _exports_usartConnectParameters_templ::InstanceAccessor("baudrate",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_baudrate_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_baudrate_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("parity");
  members.insert({
    "parity",
      _exports_usartConnectParameters_templ::InstanceAccessor("parity",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_parity_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_parity_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataBits");
  members.insert({
    "dataBits",
      _exports_usartConnectParameters_templ::InstanceAccessor("dataBits",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_dataBits_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_dataBits_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("stopBits");
  members.insert({
    "stopBits",
      _exports_usartConnectParameters_templ::InstanceAccessor("stopBits",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_stopBits_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_stopBits_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flowControl");
  members.insert({
    "flowControl",
      _exports_usartConnectParameters_templ::InstanceAccessor("flowControl",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_flowControl_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_flowControl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("statusRTS");
  members.insert({
    "statusRTS",
      _exports_usartConnectParameters_templ::InstanceAccessor("statusRTS",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_statusRTS_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_statusRTS_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("statusDTR");
  members.insert({
    "statusDTR",
      _exports_usartConnectParameters_templ::InstanceAccessor("statusDTR",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_statusDTR_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_statusDTR_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("DelayRtsDtr");
  members.insert({
    "DelayRtsDtr",
      _exports_usartConnectParameters_templ::InstanceAccessor("DelayRtsDtr",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_DelayRtsDtr_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_DelayRtsDtr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("noinitBits");
  members.insert({
    "noinitBits",
      _exports_usartConnectParameters_templ::InstanceAccessor("noinitBits",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_noinitBits_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_noinitBits_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rdu");
  members.insert({
    "rdu",
      _exports_usartConnectParameters_templ::InstanceAccessor("rdu",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_rdu_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_rdu_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tzenreg");
  members.insert({
    "tzenreg",
      _exports_usartConnectParameters_templ::InstanceAccessor("tzenreg",
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_tzenreg_get,
        &_exports_usartConnectParameters_templ::_wrap_usartConnectParameters_tzenreg_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_dfuConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_dfuConnectParameters_templ(const Napi::CallbackInfo &);
_exports_dfuConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuConnectParameters_usb_index_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuConnectParameters_usb_index_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuConnectParameters_rdu_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuConnectParameters_rdu_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuConnectParameters_tzenreg_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_dfuConnectParameters_tzenreg_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_dfuConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_dfuConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_dfuConnectParameters_inst : public _exports_dfuConnectParameters_templ<_exports_dfuConnectParameters_inst> {
public:
  using _exports_dfuConnectParameters_templ::_exports_dfuConnectParameters_templ;
  virtual ~_exports_dfuConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_dfuConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_dfuConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: dfuConnectParameters (_exports_dfuConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_dfuConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_dfuConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_dfuConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_dfuConnectParameters_inst>::DefineClass(env, "dfuConnectParameters", symbolTable);
}

void _exports_dfuConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_dfuConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_dfuConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("usb_index");
  members.insert({
    "usb_index",
      _exports_dfuConnectParameters_templ::InstanceAccessor("usb_index",
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_usb_index_get,
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_usb_index_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rdu");
  members.insert({
    "rdu",
      _exports_dfuConnectParameters_templ::InstanceAccessor("rdu",
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_rdu_get,
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_rdu_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tzenreg");
  members.insert({
    "tzenreg",
      _exports_dfuConnectParameters_templ::InstanceAccessor("tzenreg",
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_tzenreg_get,
        &_exports_dfuConnectParameters_templ::_wrap_dfuConnectParameters_tzenreg_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_spiConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_spiConnectParameters_templ(const Napi::CallbackInfo &);
_exports_spiConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_baudrate_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_baudrate_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_crcPol_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_crcPol_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_direction_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_direction_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_cpha_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_cpha_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_cpol_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_cpol_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_crc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_crc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_firstBit_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_firstBit_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_frameFormat_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_frameFormat_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_dataSize_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_dataSize_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_mode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_mode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_nss_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_nss_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_nssPulse_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_nssPulse_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_spiConnectParameters_delay_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_spiConnectParameters_delay_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_spiConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_spiConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_spiConnectParameters_inst : public _exports_spiConnectParameters_templ<_exports_spiConnectParameters_inst> {
public:
  using _exports_spiConnectParameters_templ::_exports_spiConnectParameters_templ;
  virtual ~_exports_spiConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_spiConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_spiConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: spiConnectParameters (_exports_spiConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_spiConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_spiConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_spiConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_spiConnectParameters_inst>::DefineClass(env, "spiConnectParameters", symbolTable);
}

void _exports_spiConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_spiConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_spiConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("baudrate");
  members.insert({
    "baudrate",
      _exports_spiConnectParameters_templ::InstanceAccessor("baudrate",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_baudrate_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_baudrate_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("crcPol");
  members.insert({
    "crcPol",
      _exports_spiConnectParameters_templ::InstanceAccessor("crcPol",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_crcPol_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_crcPol_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("direction");
  members.insert({
    "direction",
      _exports_spiConnectParameters_templ::InstanceAccessor("direction",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_direction_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_direction_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("cpha");
  members.insert({
    "cpha",
      _exports_spiConnectParameters_templ::InstanceAccessor("cpha",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_cpha_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_cpha_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("cpol");
  members.insert({
    "cpol",
      _exports_spiConnectParameters_templ::InstanceAccessor("cpol",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_cpol_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_cpol_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("crc");
  members.insert({
    "crc",
      _exports_spiConnectParameters_templ::InstanceAccessor("crc",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_crc_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_crc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("firstBit");
  members.insert({
    "firstBit",
      _exports_spiConnectParameters_templ::InstanceAccessor("firstBit",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_firstBit_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_firstBit_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("frameFormat");
  members.insert({
    "frameFormat",
      _exports_spiConnectParameters_templ::InstanceAccessor("frameFormat",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_frameFormat_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_frameFormat_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dataSize");
  members.insert({
    "dataSize",
      _exports_spiConnectParameters_templ::InstanceAccessor("dataSize",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_dataSize_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_dataSize_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("mode");
  members.insert({
    "mode",
      _exports_spiConnectParameters_templ::InstanceAccessor("mode",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_mode_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_mode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nss");
  members.insert({
    "nss",
      _exports_spiConnectParameters_templ::InstanceAccessor("nss",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_nss_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_nss_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("nssPulse");
  members.insert({
    "nssPulse",
      _exports_spiConnectParameters_templ::InstanceAccessor("nssPulse",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_nssPulse_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_nssPulse_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("delay");
  members.insert({
    "delay",
      _exports_spiConnectParameters_templ::InstanceAccessor("delay",
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_delay_get,
        &_exports_spiConnectParameters_templ::_wrap_spiConnectParameters_delay_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_canConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_canConnectParameters_templ(const Napi::CallbackInfo &);
_exports_canConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_br_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_br_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_mode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_mode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_ide_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_ide_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_rtr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_rtr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_fifo_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_fifo_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_fm_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_fm_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_fs_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_fs_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_fe_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_fe_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canConnectParameters_fbn_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canConnectParameters_fbn_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_canConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_canConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_canConnectParameters_inst : public _exports_canConnectParameters_templ<_exports_canConnectParameters_inst> {
public:
  using _exports_canConnectParameters_templ::_exports_canConnectParameters_templ;
  virtual ~_exports_canConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_canConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_canConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: canConnectParameters (_exports_canConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_canConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_canConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_canConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_canConnectParameters_inst>::DefineClass(env, "canConnectParameters", symbolTable);
}

void _exports_canConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_canConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_canConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("br");
  members.insert({
    "br",
      _exports_canConnectParameters_templ::InstanceAccessor("br",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_br_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_br_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("mode");
  members.insert({
    "mode",
      _exports_canConnectParameters_templ::InstanceAccessor("mode",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_mode_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_mode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("ide");
  members.insert({
    "ide",
      _exports_canConnectParameters_templ::InstanceAccessor("ide",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_ide_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_ide_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rtr");
  members.insert({
    "rtr",
      _exports_canConnectParameters_templ::InstanceAccessor("rtr",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_rtr_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_rtr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fifo");
  members.insert({
    "fifo",
      _exports_canConnectParameters_templ::InstanceAccessor("fifo",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fifo_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fifo_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fm");
  members.insert({
    "fm",
      _exports_canConnectParameters_templ::InstanceAccessor("fm",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fm_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fm_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fs");
  members.insert({
    "fs",
      _exports_canConnectParameters_templ::InstanceAccessor("fs",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fs_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fs_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fe");
  members.insert({
    "fe",
      _exports_canConnectParameters_templ::InstanceAccessor("fe",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fe_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fe_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fbn");
  members.insert({
    "fbn",
      _exports_canConnectParameters_templ::InstanceAccessor("fbn",
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fbn_get,
        &_exports_canConnectParameters_templ::_wrap_canConnectParameters_fbn_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_i2cConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_i2cConnectParameters_templ(const Napi::CallbackInfo &);
_exports_i2cConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_add_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_add_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_br_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_br_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_sm_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_sm_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_am_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_am_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_af_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_af_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_df_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_df_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_dnf_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_dnf_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_rt_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_rt_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_i2cConnectParameters_ft_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_i2cConnectParameters_ft_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_i2cConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_i2cConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_i2cConnectParameters_inst : public _exports_i2cConnectParameters_templ<_exports_i2cConnectParameters_inst> {
public:
  using _exports_i2cConnectParameters_templ::_exports_i2cConnectParameters_templ;
  virtual ~_exports_i2cConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_i2cConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_i2cConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: i2cConnectParameters (_exports_i2cConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_i2cConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_i2cConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_i2cConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_i2cConnectParameters_inst>::DefineClass(env, "i2cConnectParameters", symbolTable);
}

void _exports_i2cConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_i2cConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_i2cConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("add");
  members.insert({
    "add",
      _exports_i2cConnectParameters_templ::InstanceAccessor("add",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_add_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_add_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("br");
  members.insert({
    "br",
      _exports_i2cConnectParameters_templ::InstanceAccessor("br",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_br_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_br_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sm");
  members.insert({
    "sm",
      _exports_i2cConnectParameters_templ::InstanceAccessor("sm",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_sm_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_sm_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("am");
  members.insert({
    "am",
      _exports_i2cConnectParameters_templ::InstanceAccessor("am",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_am_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_am_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("af");
  members.insert({
    "af",
      _exports_i2cConnectParameters_templ::InstanceAccessor("af",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_af_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_af_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("df");
  members.insert({
    "df",
      _exports_i2cConnectParameters_templ::InstanceAccessor("df",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_df_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_df_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dnf");
  members.insert({
    "dnf",
      _exports_i2cConnectParameters_templ::InstanceAccessor("dnf",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_dnf_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_dnf_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rt");
  members.insert({
    "rt",
      _exports_i2cConnectParameters_templ::InstanceAccessor("rt",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_rt_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_rt_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("ft");
  members.insert({
    "ft",
      _exports_i2cConnectParameters_templ::InstanceAccessor("ft",
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_ft_get,
        &_exports_i2cConnectParameters_templ::_wrap_i2cConnectParameters_ft_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_frequencies_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_frequencies_templ(const Napi::CallbackInfo &);
_exports_frequencies_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_frequencies_jtagFreq_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_frequencies_jtagFreq_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_frequencies_jtagFreqNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_frequencies_jtagFreqNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_frequencies_swdFreq_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_frequencies_swdFreq_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_frequencies_swdFreqNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_frequencies_swdFreqNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_frequencies(const Napi::CallbackInfo &);
virtual ~_exports_frequencies_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_frequencies_inst : public _exports_frequencies_templ<_exports_frequencies_inst> {
public:
  using _exports_frequencies_templ::_exports_frequencies_templ;
  virtual ~_exports_frequencies_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_frequencies_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_frequencies_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: frequencies (_exports_frequencies) */
// jsnapi_getclass
Napi::Function _exports_frequencies_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_frequencies_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_frequencies_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_frequencies_inst>::DefineClass(env, "frequencies", symbolTable);
}

void _exports_frequencies_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_frequencies_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_frequencies_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("jtagFreq");
  members.insert({
    "jtagFreq",
      _exports_frequencies_templ::InstanceAccessor("jtagFreq",
        &_exports_frequencies_templ::_wrap_frequencies_jtagFreq_get,
        &_exports_frequencies_templ::_wrap_frequencies_jtagFreq_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("jtagFreqNumber");
  members.insert({
    "jtagFreqNumber",
      _exports_frequencies_templ::InstanceAccessor("jtagFreqNumber",
        &_exports_frequencies_templ::_wrap_frequencies_jtagFreqNumber_get,
        &_exports_frequencies_templ::_wrap_frequencies_jtagFreqNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("swdFreq");
  members.insert({
    "swdFreq",
      _exports_frequencies_templ::InstanceAccessor("swdFreq",
        &_exports_frequencies_templ::_wrap_frequencies_swdFreq_get,
        &_exports_frequencies_templ::_wrap_frequencies_swdFreq_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("swdFreqNumber");
  members.insert({
    "swdFreqNumber",
      _exports_frequencies_templ::InstanceAccessor("swdFreqNumber",
        &_exports_frequencies_templ::_wrap_frequencies_swdFreqNumber_get,
        &_exports_frequencies_templ::_wrap_frequencies_swdFreqNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_debugConnectParameters_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_debugConnectParameters_templ(const Napi::CallbackInfo &);
_exports_debugConnectParameters_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_dbgPort_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_dbgPort_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_index_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_index_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_serialNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_serialNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_firmwareVersion_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_firmwareVersion_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_targetVoltage_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_targetVoltage_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_accessPortNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_accessPortNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_accessPort_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_accessPort_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_connectionMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_connectionMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_resetMode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_resetMode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_isOldFirmware_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_isOldFirmware_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_freq_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_freq_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_frequency_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_frequency_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_isBridge_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_isBridge_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_shared_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_shared_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_board_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_board_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_DBG_Sleep_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_DBG_Sleep_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_debugConnectParameters_speed_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_debugConnectParameters_speed_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_debugConnectParameters(const Napi::CallbackInfo &);
virtual ~_exports_debugConnectParameters_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_debugConnectParameters_inst : public _exports_debugConnectParameters_templ<_exports_debugConnectParameters_inst> {
public:
  using _exports_debugConnectParameters_templ::_exports_debugConnectParameters_templ;
  virtual ~_exports_debugConnectParameters_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_debugConnectParameters_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_debugConnectParameters_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: debugConnectParameters (_exports_debugConnectParameters) */
// jsnapi_getclass
Napi::Function _exports_debugConnectParameters_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_debugConnectParameters_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_debugConnectParameters_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_debugConnectParameters_inst>::DefineClass(env, "debugConnectParameters", symbolTable);
}

void _exports_debugConnectParameters_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_debugConnectParameters_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_debugConnectParameters_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("dbgPort");
  members.insert({
    "dbgPort",
      _exports_debugConnectParameters_templ::InstanceAccessor("dbgPort",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_dbgPort_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_dbgPort_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("index");
  members.insert({
    "index",
      _exports_debugConnectParameters_templ::InstanceAccessor("index",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_index_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_index_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("serialNumber");
  members.insert({
    "serialNumber",
      _exports_debugConnectParameters_templ::InstanceAccessor("serialNumber",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_serialNumber_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_serialNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("firmwareVersion");
  members.insert({
    "firmwareVersion",
      _exports_debugConnectParameters_templ::InstanceAccessor("firmwareVersion",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_firmwareVersion_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_firmwareVersion_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("targetVoltage");
  members.insert({
    "targetVoltage",
      _exports_debugConnectParameters_templ::InstanceAccessor("targetVoltage",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_targetVoltage_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_targetVoltage_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("accessPortNumber");
  members.insert({
    "accessPortNumber",
      _exports_debugConnectParameters_templ::InstanceAccessor("accessPortNumber",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_accessPortNumber_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_accessPortNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("accessPort");
  members.insert({
    "accessPort",
      _exports_debugConnectParameters_templ::InstanceAccessor("accessPort",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_accessPort_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_accessPort_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("connectionMode");
  members.insert({
    "connectionMode",
      _exports_debugConnectParameters_templ::InstanceAccessor("connectionMode",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_connectionMode_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_connectionMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("resetMode");
  members.insert({
    "resetMode",
      _exports_debugConnectParameters_templ::InstanceAccessor("resetMode",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_resetMode_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_resetMode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("isOldFirmware");
  members.insert({
    "isOldFirmware",
      _exports_debugConnectParameters_templ::InstanceAccessor("isOldFirmware",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_isOldFirmware_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_isOldFirmware_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("freq");
  members.insert({
    "freq",
      _exports_debugConnectParameters_templ::InstanceAccessor("freq",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_freq_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_freq_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("frequency");
  members.insert({
    "frequency",
      _exports_debugConnectParameters_templ::InstanceAccessor("frequency",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_frequency_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_frequency_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("isBridge");
  members.insert({
    "isBridge",
      _exports_debugConnectParameters_templ::InstanceAccessor("isBridge",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_isBridge_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_isBridge_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("shared");
  members.insert({
    "shared",
      _exports_debugConnectParameters_templ::InstanceAccessor("shared",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_shared_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_shared_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("board");
  members.insert({
    "board",
      _exports_debugConnectParameters_templ::InstanceAccessor("board",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_board_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_board_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("DBG_Sleep");
  members.insert({
    "DBG_Sleep",
      _exports_debugConnectParameters_templ::InstanceAccessor("DBG_Sleep",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_DBG_Sleep_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_DBG_Sleep_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("speed");
  members.insert({
    "speed",
      _exports_debugConnectParameters_templ::InstanceAccessor("speed",
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_speed_get,
        &_exports_debugConnectParameters_templ::_wrap_debugConnectParameters_speed_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_displayCallBacks_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_displayCallBacks_templ(const Napi::CallbackInfo &);
_exports_displayCallBacks_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_displayCallBacks_initProgressBar_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_displayCallBacks_initProgressBar_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_displayCallBacks_logMessage_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_displayCallBacks_logMessage_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_displayCallBacks_loadBar_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_displayCallBacks_loadBar_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_displayCallBacks(const Napi::CallbackInfo &);
virtual ~_exports_displayCallBacks_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_displayCallBacks_inst : public _exports_displayCallBacks_templ<_exports_displayCallBacks_inst> {
public:
  using _exports_displayCallBacks_templ::_exports_displayCallBacks_templ;
  virtual ~_exports_displayCallBacks_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_displayCallBacks_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_displayCallBacks_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: displayCallBacks (_exports_displayCallBacks) */
// jsnapi_getclass
Napi::Function _exports_displayCallBacks_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_displayCallBacks_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_displayCallBacks_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_displayCallBacks_inst>::DefineClass(env, "displayCallBacks", symbolTable);
}

void _exports_displayCallBacks_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_displayCallBacks_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_displayCallBacks_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("initProgressBar");
  members.insert({
    "initProgressBar",
      _exports_displayCallBacks_templ::InstanceAccessor("initProgressBar",
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_initProgressBar_get,
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_initProgressBar_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("logMessage");
  members.insert({
    "logMessage",
      _exports_displayCallBacks_templ::InstanceAccessor("logMessage",
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_logMessage_get,
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_logMessage_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("loadBar");
  members.insert({
    "loadBar",
      _exports_displayCallBacks_templ::InstanceAccessor("loadBar",
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_loadBar_get,
        &_exports_displayCallBacks_templ::_wrap_displayCallBacks_loadBar_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_segmentData_C_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_segmentData_C_templ(const Napi::CallbackInfo &);
_exports_segmentData_C_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_segmentData_C_address_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_segmentData_C_address_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_segmentData_C_size_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_segmentData_C_size_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_segmentData_C_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_segmentData_C_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_segmentData_C(const Napi::CallbackInfo &);
virtual ~_exports_segmentData_C_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_segmentData_C_inst : public _exports_segmentData_C_templ<_exports_segmentData_C_inst> {
public:
  using _exports_segmentData_C_templ::_exports_segmentData_C_templ;
  virtual ~_exports_segmentData_C_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_segmentData_C_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_segmentData_C_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: segmentData_C (_exports_segmentData_C) */
// jsnapi_getclass
Napi::Function _exports_segmentData_C_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_segmentData_C_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_segmentData_C_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_segmentData_C_inst>::DefineClass(env, "segmentData_C", symbolTable);
}

void _exports_segmentData_C_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_segmentData_C_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_segmentData_C_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("address");
  members.insert({
    "address",
      _exports_segmentData_C_templ::InstanceAccessor("address",
        &_exports_segmentData_C_templ::_wrap_segmentData_C_address_get,
        &_exports_segmentData_C_templ::_wrap_segmentData_C_address_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("size");
  members.insert({
    "size",
      _exports_segmentData_C_templ::InstanceAccessor("size",
        &_exports_segmentData_C_templ::_wrap_segmentData_C_size_get,
        &_exports_segmentData_C_templ::_wrap_segmentData_C_size_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_segmentData_C_templ::InstanceAccessor("data",
        &_exports_segmentData_C_templ::_wrap_segmentData_C_data_get,
        &_exports_segmentData_C_templ::_wrap_segmentData_C_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_fileData_C_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_fileData_C_templ(const Napi::CallbackInfo &);
_exports_fileData_C_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_fileData_C_Type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_fileData_C_Type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_fileData_C_segmentsNbr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_fileData_C_segmentsNbr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_fileData_C_segments_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_fileData_C_segments_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_fileData_C(const Napi::CallbackInfo &);
virtual ~_exports_fileData_C_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_fileData_C_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_fileData_C_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_fileData_C_inst : public _exports_fileData_C_templ<_exports_fileData_C_inst> {
public:
  using _exports_fileData_C_templ::_exports_fileData_C_templ;
  virtual ~_exports_fileData_C_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_fileData_C_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_fileData_C_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: fileData_C (_exports_fileData_C) */
// jsnapi_getclass
Napi::Function _exports_fileData_C_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_fileData_C_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_fileData_C_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_fileData_C_inst>::DefineClass(env, "fileData_C", symbolTable);
}

void _exports_fileData_C_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_fileData_C_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_fileData_C_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("Type");
  members.insert({
    "Type",
      _exports_fileData_C_templ::InstanceAccessor("Type",
        &_exports_fileData_C_templ::_wrap_fileData_C_Type_get,
        &_exports_fileData_C_templ::_wrap_fileData_C_Type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("segmentsNbr");
  members.insert({
    "segmentsNbr",
      _exports_fileData_C_templ::InstanceAccessor("segmentsNbr",
        &_exports_fileData_C_templ::_wrap_fileData_C_segmentsNbr_get,
        &_exports_fileData_C_templ::_wrap_fileData_C_segmentsNbr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("segments");
  members.insert({
    "segments",
      _exports_fileData_C_templ::InstanceAccessor("segments",
        &_exports_fileData_C_templ::_wrap_fileData_C_segments_get,
        &_exports_fileData_C_templ::_wrap_fileData_C_segments_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_generalInf_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_generalInf_templ(const Napi::CallbackInfo &);
_exports_generalInf_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_deviceId_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_deviceId_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_flashSize_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_flashSize_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_bootloaderVersion_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_bootloaderVersion_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_type_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_type_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_cpu_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_cpu_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_name_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_name_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_series_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_series_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_description_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_description_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_revisionId_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_revisionId_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_generalInf_board_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_generalInf_board_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_generalInf(const Napi::CallbackInfo &);
virtual ~_exports_generalInf_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_generalInf_inst : public _exports_generalInf_templ<_exports_generalInf_inst> {
public:
  using _exports_generalInf_templ::_exports_generalInf_templ;
  virtual ~_exports_generalInf_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_generalInf_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_generalInf_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: generalInf (_exports_generalInf) */
// jsnapi_getclass
Napi::Function _exports_generalInf_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_generalInf_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_generalInf_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_generalInf_inst>::DefineClass(env, "generalInf", symbolTable);
}

void _exports_generalInf_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_generalInf_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_generalInf_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("deviceId");
  members.insert({
    "deviceId",
      _exports_generalInf_templ::InstanceAccessor("deviceId",
        &_exports_generalInf_templ::_wrap_generalInf_deviceId_get,
        &_exports_generalInf_templ::_wrap_generalInf_deviceId_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flashSize");
  members.insert({
    "flashSize",
      _exports_generalInf_templ::InstanceAccessor("flashSize",
        &_exports_generalInf_templ::_wrap_generalInf_flashSize_get,
        &_exports_generalInf_templ::_wrap_generalInf_flashSize_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("bootloaderVersion");
  members.insert({
    "bootloaderVersion",
      _exports_generalInf_templ::InstanceAccessor("bootloaderVersion",
        &_exports_generalInf_templ::_wrap_generalInf_bootloaderVersion_get,
        &_exports_generalInf_templ::_wrap_generalInf_bootloaderVersion_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("type");
  members.insert({
    "type",
      _exports_generalInf_templ::InstanceAccessor("type",
        &_exports_generalInf_templ::_wrap_generalInf_type_get,
        &_exports_generalInf_templ::_wrap_generalInf_type_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("cpu");
  members.insert({
    "cpu",
      _exports_generalInf_templ::InstanceAccessor("cpu",
        &_exports_generalInf_templ::_wrap_generalInf_cpu_get,
        &_exports_generalInf_templ::_wrap_generalInf_cpu_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("name");
  members.insert({
    "name",
      _exports_generalInf_templ::InstanceAccessor("name",
        &_exports_generalInf_templ::_wrap_generalInf_name_get,
        &_exports_generalInf_templ::_wrap_generalInf_name_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("series");
  members.insert({
    "series",
      _exports_generalInf_templ::InstanceAccessor("series",
        &_exports_generalInf_templ::_wrap_generalInf_series_get,
        &_exports_generalInf_templ::_wrap_generalInf_series_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("description");
  members.insert({
    "description",
      _exports_generalInf_templ::InstanceAccessor("description",
        &_exports_generalInf_templ::_wrap_generalInf_description_get,
        &_exports_generalInf_templ::_wrap_generalInf_description_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("revisionId");
  members.insert({
    "revisionId",
      _exports_generalInf_templ::InstanceAccessor("revisionId",
        &_exports_generalInf_templ::_wrap_generalInf_revisionId_get,
        &_exports_generalInf_templ::_wrap_generalInf_revisionId_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("board");
  members.insert({
    "board",
      _exports_generalInf_templ::InstanceAccessor("board",
        &_exports_generalInf_templ::_wrap_generalInf_board_get,
        &_exports_generalInf_templ::_wrap_generalInf_board_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_deviceSector_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_deviceSector_templ(const Napi::CallbackInfo &);
_exports_deviceSector_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_deviceSector_sectorNum_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_deviceSector_sectorNum_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_deviceSector_sectorSize_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_deviceSector_sectorSize_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_deviceSector(const Napi::CallbackInfo &);
virtual ~_exports_deviceSector_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_deviceSector_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_deviceSector_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_deviceSector_inst : public _exports_deviceSector_templ<_exports_deviceSector_inst> {
public:
  using _exports_deviceSector_templ::_exports_deviceSector_templ;
  virtual ~_exports_deviceSector_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_deviceSector_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_deviceSector_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: deviceSector (_exports_deviceSector) */
// jsnapi_getclass
Napi::Function _exports_deviceSector_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_deviceSector_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_deviceSector_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_deviceSector_inst>::DefineClass(env, "deviceSector", symbolTable);
}

void _exports_deviceSector_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_deviceSector_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_deviceSector_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("sectorNum");
  members.insert({
    "sectorNum",
      _exports_deviceSector_templ::InstanceAccessor("sectorNum",
        &_exports_deviceSector_templ::_wrap_deviceSector_sectorNum_get,
        &_exports_deviceSector_templ::_wrap_deviceSector_sectorNum_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sectorSize");
  members.insert({
    "sectorSize",
      _exports_deviceSector_templ::InstanceAccessor("sectorSize",
        &_exports_deviceSector_templ::_wrap_deviceSector_sectorSize_get,
        &_exports_deviceSector_templ::_wrap_deviceSector_sectorSize_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_externalLoader_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_externalLoader_templ(const Napi::CallbackInfo &);
_exports_externalLoader_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_filePath_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_filePath_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_deviceName_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_deviceName_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_deviceType_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_deviceType_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_deviceStartAddress_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_deviceStartAddress_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_deviceSize_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_deviceSize_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_pageSize_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_pageSize_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_sectorsTypeNbr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_sectorsTypeNbr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalLoader_sectors_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalLoader_sectors_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_externalLoader(const Napi::CallbackInfo &);
virtual ~_exports_externalLoader_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_externalLoader_inst : public _exports_externalLoader_templ<_exports_externalLoader_inst> {
public:
  using _exports_externalLoader_templ::_exports_externalLoader_templ;
  virtual ~_exports_externalLoader_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_externalLoader_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_externalLoader_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: externalLoader (_exports_externalLoader) */
// jsnapi_getclass
Napi::Function _exports_externalLoader_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_externalLoader_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_externalLoader_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_externalLoader_inst>::DefineClass(env, "externalLoader", symbolTable);
}

void _exports_externalLoader_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_externalLoader_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_externalLoader_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("filePath");
  members.insert({
    "filePath",
      _exports_externalLoader_templ::InstanceAccessor("filePath",
        &_exports_externalLoader_templ::_wrap_externalLoader_filePath_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_filePath_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deviceName");
  members.insert({
    "deviceName",
      _exports_externalLoader_templ::InstanceAccessor("deviceName",
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceName_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceName_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deviceType");
  members.insert({
    "deviceType",
      _exports_externalLoader_templ::InstanceAccessor("deviceType",
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceType_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceType_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deviceStartAddress");
  members.insert({
    "deviceStartAddress",
      _exports_externalLoader_templ::InstanceAccessor("deviceStartAddress",
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceStartAddress_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceStartAddress_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deviceSize");
  members.insert({
    "deviceSize",
      _exports_externalLoader_templ::InstanceAccessor("deviceSize",
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceSize_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_deviceSize_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("pageSize");
  members.insert({
    "pageSize",
      _exports_externalLoader_templ::InstanceAccessor("pageSize",
        &_exports_externalLoader_templ::_wrap_externalLoader_pageSize_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_pageSize_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sectorsTypeNbr");
  members.insert({
    "sectorsTypeNbr",
      _exports_externalLoader_templ::InstanceAccessor("sectorsTypeNbr",
        &_exports_externalLoader_templ::_wrap_externalLoader_sectorsTypeNbr_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_sectorsTypeNbr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sectors");
  members.insert({
    "sectors",
      _exports_externalLoader_templ::InstanceAccessor("sectors",
        &_exports_externalLoader_templ::_wrap_externalLoader_sectors_get,
        &_exports_externalLoader_templ::_wrap_externalLoader_sectors_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_externalStorageInfo_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_externalStorageInfo_templ(const Napi::CallbackInfo &);
_exports_externalStorageInfo_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalStorageInfo_externalLoaderNbr_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalStorageInfo_externalLoaderNbr_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_externalStorageInfo_externalLoader_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_externalStorageInfo_externalLoader_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_externalStorageInfo(const Napi::CallbackInfo &);
virtual ~_exports_externalStorageInfo_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_externalStorageInfo_inst : public _exports_externalStorageInfo_templ<_exports_externalStorageInfo_inst> {
public:
  using _exports_externalStorageInfo_templ::_exports_externalStorageInfo_templ;
  virtual ~_exports_externalStorageInfo_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_externalStorageInfo_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_externalStorageInfo_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: externalStorageInfo (_exports_externalStorageInfo) */
// jsnapi_getclass
Napi::Function _exports_externalStorageInfo_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_externalStorageInfo_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_externalStorageInfo_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_externalStorageInfo_inst>::DefineClass(env, "externalStorageInfo", symbolTable);
}

void _exports_externalStorageInfo_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_externalStorageInfo_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_externalStorageInfo_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("externalLoaderNbr");
  members.insert({
    "externalLoaderNbr",
      _exports_externalStorageInfo_templ::InstanceAccessor("externalLoaderNbr",
        &_exports_externalStorageInfo_templ::_wrap_externalStorageInfo_externalLoaderNbr_get,
        &_exports_externalStorageInfo_templ::_wrap_externalStorageInfo_externalLoaderNbr_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("externalLoader");
  members.insert({
    "externalLoader",
      _exports_externalStorageInfo_templ::InstanceAccessor("externalLoader",
        &_exports_externalStorageInfo_templ::_wrap_externalStorageInfo_externalLoader_get,
        &_exports_externalStorageInfo_templ::_wrap_externalStorageInfo_externalLoader_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_dfuDeviceInfoArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_dfuDeviceInfoArray_templ(const Napi::CallbackInfo &);
_exports_dfuDeviceInfoArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_dfuDeviceInfoArray(const Napi::CallbackInfo &);
virtual ~_exports_dfuDeviceInfoArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_dfuDeviceInfoArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_dfuDeviceInfoArray_inst : public _exports_dfuDeviceInfoArray_templ<_exports_dfuDeviceInfoArray_inst> {
public:
  using _exports_dfuDeviceInfoArray_templ::_exports_dfuDeviceInfoArray_templ;
  virtual ~_exports_dfuDeviceInfoArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_dfuDeviceInfoArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_dfuDeviceInfoArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: dfuDeviceInfoArray (_exports_dfuDeviceInfoArray) */
// jsnapi_getclass
Napi::Function _exports_dfuDeviceInfoArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_dfuDeviceInfoArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_dfuDeviceInfoArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_dfuDeviceInfoArray_inst>::DefineClass(env, "dfuDeviceInfoArray", symbolTable);
}

void _exports_dfuDeviceInfoArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_dfuDeviceInfoArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_dfuDeviceInfoArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_dfuDeviceInfoArray_templ::InstanceMethod("getitem",
        &_exports_dfuDeviceInfoArray_templ::_wrap_dfuDeviceInfoArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_dfuDeviceInfoArray_templ::InstanceMethod("setitem",
        &_exports_dfuDeviceInfoArray_templ::_wrap_dfuDeviceInfoArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_dfuDeviceInfoArray_templ::InstanceMethod("cast",
        &_exports_dfuDeviceInfoArray_templ::_wrap_dfuDeviceInfoArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_dfuDeviceInfoArray_templ::_wrap_dfuDeviceInfoArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_dfuDeviceInfoPtr_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_dfuDeviceInfoPtr_templ(const Napi::CallbackInfo &);
_exports_dfuDeviceInfoPtr_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_dfuDeviceInfoPtr(const Napi::CallbackInfo &);
virtual ~_exports_dfuDeviceInfoPtr_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoPtr_assign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoPtr_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_dfuDeviceInfoPtr_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_dfuDeviceInfoPtr_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_dfuDeviceInfoPtr_inst : public _exports_dfuDeviceInfoPtr_templ<_exports_dfuDeviceInfoPtr_inst> {
public:
  using _exports_dfuDeviceInfoPtr_templ::_exports_dfuDeviceInfoPtr_templ;
  virtual ~_exports_dfuDeviceInfoPtr_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_dfuDeviceInfoPtr_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_dfuDeviceInfoPtr_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: dfuDeviceInfoPtr (_exports_dfuDeviceInfoPtr) */
// jsnapi_getclass
Napi::Function _exports_dfuDeviceInfoPtr_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_dfuDeviceInfoPtr_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_dfuDeviceInfoPtr_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_dfuDeviceInfoPtr_inst>::DefineClass(env, "dfuDeviceInfoPtr", symbolTable);
}

void _exports_dfuDeviceInfoPtr_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_dfuDeviceInfoPtr_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_dfuDeviceInfoPtr_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("assign");
  members.insert({
    "assign",
      _exports_dfuDeviceInfoPtr_templ::InstanceMethod("assign",
        &_exports_dfuDeviceInfoPtr_templ::_wrap_dfuDeviceInfoPtr_assign,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("value");
  members.insert({
    "value",
      _exports_dfuDeviceInfoPtr_templ::InstanceMethod("value",
        &_exports_dfuDeviceInfoPtr_templ::_wrap_dfuDeviceInfoPtr_value,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_dfuDeviceInfoPtr_templ::InstanceMethod("cast",
        &_exports_dfuDeviceInfoPtr_templ::_wrap_dfuDeviceInfoPtr_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_dfuDeviceInfoPtr_templ::_wrap_dfuDeviceInfoPtr_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}





// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_VER_LEVEL_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_VER_LEVEL_NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_VER_LEVEL_ONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_VER_LEVEL_ONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_VER_LEVEL_TWO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_VER_LEVEL_TWO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_VER_LEVEL_DEBUG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_VER_LEVEL_DEBUG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_NO_PROGRESS_BAR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_NO_PROGRESS_BAR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_NO_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_NO_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NOT_CONNECTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NOT_CONNECTED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NO_DEVICE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NO_DEVICE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_CONNECTION_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_CONNECTION));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NO_FILE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NO_FILE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NOT_SUPPORTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NOT_SUPPORTED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_INTERFACE_NOT_SUPPORTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_INTERFACE_NOT_SUPPORTED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NO_MEM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NO_MEM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_WRONG_PARAM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_WRONG_PARAM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_READ_MEM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_READ_MEM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_WRITE_MEM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_WRITE_MEM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_ERASE_MEM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_ERASE_MEM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_UNSUPPORTED_FILE_FORMAT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_UNSUPPORTED_FILE_FORMAT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_REFRESH_REQUIRED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_REFRESH_REQUIRED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_NO_SECURITY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_NO_SECURITY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_CHANGE_FREQ_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_CHANGE_FREQ));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_RDP_ENABLED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_RDP_ENABLED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CUBEPROGRAMMER_ERROR_OTHER_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CUBEPROGRAMMER_ERROR_OTHER));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_Flash_Size_1KB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(Flash_Size_1KB));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_Flash_Size_512KB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(Flash_Size_512KB));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_Flash_Size_256KB_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(Flash_Size_256KB));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_FIRST_INSTALL_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(FIRST_INSTALL_ACTIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_FIRST_INSTALL_NOT_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(FIRST_INSTALL_NOT_ACTIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_START_STACK_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(START_STACK_ACTIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_START_STACK_NOT_ACTIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(START_STACK_NOT_ACTIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_VERIFY_FILE_DOWLOAD_FILE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(VERIFY_FILE_DOWLOAD_FILE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_DO_NOT_VERIFY_DOWLOAD_FILE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(DO_NOT_VERIFY_DOWLOAD_FILE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_EVEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(EVEN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_ODD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(ODD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_NONE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(NONE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_OFF_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(OFF));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_HARDWARE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(HARDWARE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_SOFTWARE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(SOFTWARE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_usbIndex_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[10] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_usbIndex_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 10);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dfuDeviceInfo_usbIndex_set" "', argument " "2"" of type '" "char [10]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->usbIndex,arg2,10*sizeof(char));
  else memset(arg1->usbIndex,0,10*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_usbIndex_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_usbIndex_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (char *)(char *) ((arg1)->usbIndex);
  {
    size_t size = SWIG_strnlen(result, 10);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_busNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_busNumber_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuDeviceInfo_busNumber_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->busNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_busNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_busNumber_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (int) ((arg1)->busNumber);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_addressNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_addressNumber_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuDeviceInfo_addressNumber_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->addressNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_addressNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_addressNumber_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (int) ((arg1)->addressNumber);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_productId_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_productId_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dfuDeviceInfo_productId_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->productId,arg2,100*sizeof(char));
  else memset(arg1->productId,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_productId_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_productId_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (char *)(char *) ((arg1)->productId);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_serialNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_serialNumber_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dfuDeviceInfo_serialNumber_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->serialNumber,arg2,100*sizeof(char));
  else memset(arg1->serialNumber,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_serialNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_serialNumber_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (char *)(char *) ((arg1)->serialNumber);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_dfuVersion_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_dfuVersion_set" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuDeviceInfo_dfuVersion_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->dfuVersion = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfo_dfuVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfo_dfuVersion_get" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (unsigned int) ((arg1)->dfuVersion);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfo_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_dfuDeviceInfo;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  dfuDeviceInfo *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dfuDeviceInfo.");
  }
  result = (dfuDeviceInfo *)new dfuDeviceInfo();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfo_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfo_templ<SWIG_OBJ_WRAP>::~_exports_dfuDeviceInfo_templ() {
  auto arg1 = reinterpret_cast<dfuDeviceInfo *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_portName_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_portName_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "usartConnectParameters_portName_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->portName,arg2,100*sizeof(char));
  else memset(arg1->portName,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_portName_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_portName_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (char *)(char *) ((arg1)->portName);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_baudrate_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_baudrate_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_baudrate_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->baudrate = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_baudrate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_baudrate_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (unsigned int) ((arg1)->baudrate);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_parity_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  usartParity arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_parity_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_parity_set" "', argument " "2"" of type '" "usartParity""'");
  } 
  arg2 = static_cast< usartParity >(val2);if (arg1) (arg1)->parity = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_parity_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  usartParity result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_parity_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (usartParity) ((arg1)->parity);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_dataBits_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_dataBits_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_dataBits_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);if (arg1) (arg1)->dataBits = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_dataBits_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_dataBits_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (unsigned char) ((arg1)->dataBits);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_stopBits_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_stopBits_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_float(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_stopBits_set" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);if (arg1) (arg1)->stopBits = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_stopBits_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_stopBits_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (float) ((arg1)->stopBits);
  jsresult = SWIG_From_float  SWIG_NAPI_FROM_CALL_ARGS(static_cast< float >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_flowControl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  usartFlowControl arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_flowControl_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_flowControl_set" "', argument " "2"" of type '" "usartFlowControl""'");
  } 
  arg2 = static_cast< usartFlowControl >(val2);if (arg1) (arg1)->flowControl = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_flowControl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  usartFlowControl result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_flowControl_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (usartFlowControl) ((arg1)->flowControl);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_statusRTS_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_statusRTS_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_statusRTS_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->statusRTS = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_statusRTS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_statusRTS_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (int) ((arg1)->statusRTS);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_statusDTR_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_statusDTR_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_statusDTR_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->statusDTR = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_statusDTR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_statusDTR_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (int) ((arg1)->statusDTR);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_DelayRtsDtr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_DelayRtsDtr_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_DelayRtsDtr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->DelayRtsDtr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_DelayRtsDtr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_DelayRtsDtr_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (int) ((arg1)->DelayRtsDtr);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_noinitBits_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_noinitBits_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_noinitBits_set" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);if (arg1) (arg1)->noinitBits = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_noinitBits_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_noinitBits_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (unsigned char) ((arg1)->noinitBits);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_rdu_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_rdu_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_rdu_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->rdu = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_rdu_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_rdu_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (char) ((arg1)->rdu);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_tzenreg_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_tzenreg_set" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "usartConnectParameters_tzenreg_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->tzenreg = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_usartConnectParameters_tzenreg_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters *arg1 = (usartConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "usartConnectParameters_tzenreg_get" "', argument " "1"" of type '" "usartConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters * >(argp1);result = (char) ((arg1)->tzenreg);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_usartConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_usartConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  usartConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_usartConnectParameters.");
  }
  result = (usartConnectParameters *)new usartConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_usartConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_usartConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_usartConnectParameters_templ() {
  auto arg1 = reinterpret_cast<usartConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_usb_index_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_usb_index_set" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);res2 = SWIG_AsCharPtrAndSize(value, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dfuConnectParameters_usb_index_set" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);delete[] arg1->usb_index;
  if (arg2) {
    size_t size = strlen(reinterpret_cast< const char * >(arg2)) + 1;
    arg1->usb_index = (char *)reinterpret_cast< char* >(memcpy(new char[size], reinterpret_cast< const char * >(arg2), sizeof(char)*(size)));
  } else {
    arg1->usb_index = 0;
  }
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_usb_index_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_usb_index_get" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);result = (char *) ((arg1)->usb_index);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_rdu_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_rdu_set" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuConnectParameters_rdu_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->rdu = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_rdu_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_rdu_get" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);result = (char) ((arg1)->rdu);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_tzenreg_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_tzenreg_set" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuConnectParameters_tzenreg_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->tzenreg = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_dfuConnectParameters_tzenreg_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters *arg1 = (dfuConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuConnectParameters_tzenreg_get" "', argument " "1"" of type '" "dfuConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< dfuConnectParameters * >(argp1);result = (char) ((arg1)->tzenreg);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_dfuConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_dfuConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  dfuConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dfuConnectParameters.");
  }
  result = (dfuConnectParameters *)new dfuConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_dfuConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_dfuConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_dfuConnectParameters_templ() {
  auto arg1 = reinterpret_cast<dfuConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_baudrate_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_baudrate_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_baudrate_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->baudrate = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_baudrate_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_baudrate_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (uint32_t) ((arg1)->baudrate);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_crcPol_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_crcPol_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_crcPol_set" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);if (arg1) (arg1)->crcPol = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_crcPol_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_crcPol_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (uint16_t) ((arg1)->crcPol);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_direction_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_direction_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_direction_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->direction = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_direction_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_direction_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->direction);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_cpha_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_cpha_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_cpha_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->cpha = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_cpha_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_cpha_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->cpha);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_cpol_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_cpol_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_cpol_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->cpol = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_cpol_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_cpol_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->cpol);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_crc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_crc_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_crc_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->crc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_crc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_crc_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->crc);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_firstBit_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_firstBit_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_firstBit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->firstBit = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_firstBit_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_firstBit_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->firstBit);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_frameFormat_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_frameFormat_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_frameFormat_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->frameFormat = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_frameFormat_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_frameFormat_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->frameFormat);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_dataSize_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_dataSize_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_dataSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->dataSize = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_dataSize_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_dataSize_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->dataSize);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_mode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_mode_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->mode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_mode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_mode_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->mode);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_nss_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_nss_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_nss_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nss = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_nss_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_nss_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->nss);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_nssPulse_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_nssPulse_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_nssPulse_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->nssPulse = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_nssPulse_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_nssPulse_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->nssPulse);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_delay_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_delay_set" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "spiConnectParameters_delay_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->delay = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_spiConnectParameters_delay_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters *arg1 = (spiConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_spiConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "spiConnectParameters_delay_get" "', argument " "1"" of type '" "spiConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< spiConnectParameters * >(argp1);result = (int) ((arg1)->delay);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_spiConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_spiConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  spiConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_spiConnectParameters.");
  }
  result = (spiConnectParameters *)new spiConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_spiConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_spiConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_spiConnectParameters_templ() {
  auto arg1 = reinterpret_cast<spiConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_br_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_br_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_br_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->br = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_br_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_br_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->br);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_mode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_mode_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->mode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_mode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_mode_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->mode);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_ide_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_ide_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_ide_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->ide = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_ide_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_ide_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->ide);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_rtr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_rtr_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_rtr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->rtr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_rtr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_rtr_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->rtr);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fifo_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fifo_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_fifo_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->fifo = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fifo_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fifo_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->fifo);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fm_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fm_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_fm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->fm = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fm_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fm_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->fm);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fs_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fs_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_fs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->fs = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fs_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->fs);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fe_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fe_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_fe_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->fe = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fe_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fe_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (int) ((arg1)->fe);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fbn_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fbn_set" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canConnectParameters_fbn_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->fbn = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_canConnectParameters_fbn_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters *arg1 = (canConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canConnectParameters_fbn_get" "', argument " "1"" of type '" "canConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< canConnectParameters * >(argp1);result = (char) ((arg1)->fbn);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_canConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_canConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  canConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_canConnectParameters.");
  }
  result = (canConnectParameters *)new canConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_canConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_canConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_canConnectParameters_templ() {
  auto arg1 = reinterpret_cast<canConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_add_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_add_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_add_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->add = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_add_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_add_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->add);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_br_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_br_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_br_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->br = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_br_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_br_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->br);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_sm_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_sm_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_sm_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->sm = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_sm_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_sm_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->sm);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_am_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_am_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_am_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->am = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_am_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_am_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->am);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_af_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_af_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_af_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->af = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_af_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_af_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->af);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_df_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_df_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_df_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->df = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_df_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_df_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->df);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_dnf_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_dnf_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_dnf_set" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);if (arg1) (arg1)->dnf = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_dnf_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_dnf_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (char) ((arg1)->dnf);
  jsresult = SWIG_From_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_rt_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_rt_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_rt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->rt = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_rt_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_rt_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->rt);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_ft_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_ft_set" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "i2cConnectParameters_ft_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->ft = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_i2cConnectParameters_ft_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters *arg1 = (i2cConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_i2cConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "i2cConnectParameters_ft_get" "', argument " "1"" of type '" "i2cConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< i2cConnectParameters * >(argp1);result = (int) ((arg1)->ft);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_i2cConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_i2cConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  i2cConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_i2cConnectParameters.");
  }
  result = (i2cConnectParameters *)new i2cConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_i2cConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_i2cConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_i2cConnectParameters_templ() {
  auto arg1 = reinterpret_cast<i2cConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_SOFTWARE_RESET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(SOFTWARE_RESET));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_HARDWARE_RESET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(HARDWARE_RESET));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CORE_RESET_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CORE_RESET));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_NORMAL_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(NORMAL_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_HOTPLUG_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(HOTPLUG_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_UNDER_RESET_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(UNDER_RESET_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_POWER_DOWN_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(POWER_DOWN_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_PRE_RESET_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(PRE_RESET_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_hwRstPulse_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(hwRstPulse_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_JTAG_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(JTAG));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_SWD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(SWD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_jtagFreq_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_jtagFreq_set" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "frequencies_jtagFreq_set" "', argument " "2"" of type '" "unsigned int [12]""'"); 
  } 
  arg2 = reinterpret_cast< unsigned int * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)12; ++ii) *(unsigned int *)&arg1->jtagFreq[ii] = *((unsigned int *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""jtagFreq""' of type '""unsigned int [12]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_jtagFreq_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_jtagFreq_get" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);result = (unsigned int *)(unsigned int *) ((arg1)->jtagFreq);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_jtagFreqNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_jtagFreqNumber_set" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequencies_jtagFreqNumber_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->jtagFreqNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_jtagFreqNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_jtagFreqNumber_get" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);result = (unsigned int) ((arg1)->jtagFreqNumber);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_swdFreq_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_swdFreq_set" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "frequencies_swdFreq_set" "', argument " "2"" of type '" "unsigned int [12]""'"); 
  } 
  arg2 = reinterpret_cast< unsigned int * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)12; ++ii) *(unsigned int *)&arg1->swdFreq[ii] = *((unsigned int *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""swdFreq""' of type '""unsigned int [12]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_swdFreq_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_swdFreq_get" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);result = (unsigned int *)(unsigned int *) ((arg1)->swdFreq);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_swdFreqNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_swdFreqNumber_set" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "frequencies_swdFreqNumber_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->swdFreqNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_frequencies_templ<SWIG_OBJ_WRAP>::_wrap_frequencies_swdFreqNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  frequencies *arg1 = (frequencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "frequencies_swdFreqNumber_get" "', argument " "1"" of type '" "frequencies *""'"); 
  }
  arg1 = reinterpret_cast< frequencies * >(argp1);result = (unsigned int) ((arg1)->swdFreqNumber);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_frequencies_templ<SWIG_OBJ_WRAP>::_exports_frequencies_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_frequencies;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  frequencies *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_frequencies.");
  }
  result = (frequencies *)new frequencies();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_frequencies_templ<SWIG_OBJ_WRAP>::_exports_frequencies_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_frequencies_templ<SWIG_OBJ_WRAP>::~_exports_frequencies_templ() {
  auto arg1 = reinterpret_cast<frequencies *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_dbgPort_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  debugPort arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_dbgPort_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_dbgPort_set" "', argument " "2"" of type '" "debugPort""'");
  } 
  arg2 = static_cast< debugPort >(val2);if (arg1) (arg1)->dbgPort = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_dbgPort_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  debugPort result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_dbgPort_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (debugPort) ((arg1)->dbgPort);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_index_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_index_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_index_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->index = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_index_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_index_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->index);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_serialNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[33] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_serialNumber_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 33);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debugConnectParameters_serialNumber_set" "', argument " "2"" of type '" "char [33]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->serialNumber,arg2,33*sizeof(char));
  else memset(arg1->serialNumber,0,33*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_serialNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_serialNumber_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (char *)(char *) ((arg1)->serialNumber);
  {
    size_t size = SWIG_strnlen(result, 33);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_firmwareVersion_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_firmwareVersion_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 20);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debugConnectParameters_firmwareVersion_set" "', argument " "2"" of type '" "char [20]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->firmwareVersion,arg2,20*sizeof(char));
  else memset(arg1->firmwareVersion,0,20*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_firmwareVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_firmwareVersion_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (char *)(char *) ((arg1)->firmwareVersion);
  {
    size_t size = SWIG_strnlen(result, 20);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_targetVoltage_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[5] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_targetVoltage_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 5);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debugConnectParameters_targetVoltage_set" "', argument " "2"" of type '" "char [5]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->targetVoltage,arg2,5*sizeof(char));
  else memset(arg1->targetVoltage,0,5*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_targetVoltage_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_targetVoltage_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (char *)(char *) ((arg1)->targetVoltage);
  {
    size_t size = SWIG_strnlen(result, 5);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_accessPortNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_accessPortNumber_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_accessPortNumber_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->accessPortNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_accessPortNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_accessPortNumber_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->accessPortNumber);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_accessPort_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_accessPort_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_accessPort_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->accessPort = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_accessPort_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_accessPort_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->accessPort);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_connectionMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  debugConnectMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_connectionMode_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_connectionMode_set" "', argument " "2"" of type '" "debugConnectMode""'");
  } 
  arg2 = static_cast< debugConnectMode >(val2);if (arg1) (arg1)->connectionMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_connectionMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  debugConnectMode result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_connectionMode_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (debugConnectMode) ((arg1)->connectionMode);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_resetMode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  debugResetMode arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_resetMode_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_resetMode_set" "', argument " "2"" of type '" "debugResetMode""'");
  } 
  arg2 = static_cast< debugResetMode >(val2);if (arg1) (arg1)->resetMode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_resetMode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  debugResetMode result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_resetMode_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (debugResetMode) ((arg1)->resetMode);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_isOldFirmware_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_isOldFirmware_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_isOldFirmware_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->isOldFirmware = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_isOldFirmware_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_isOldFirmware_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->isOldFirmware);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_freq_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  frequencies *arg2 = (frequencies *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_freq_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_frequencies, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debugConnectParameters_freq_set" "', argument " "2"" of type '" "frequencies *""'"); 
  }
  arg2 = reinterpret_cast< frequencies * >(argp2);if (arg1) (arg1)->freq = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_freq_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  frequencies *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_freq_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (frequencies *)& ((arg1)->freq);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_frequencies, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_frequency_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_frequency_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_frequency_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->frequency = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_frequency_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_frequency_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->frequency);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_isBridge_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_isBridge_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_isBridge_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->isBridge = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_isBridge_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_isBridge_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->isBridge);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_shared_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_shared_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_shared_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->shared = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_shared_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_shared_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->shared);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_board_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_board_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "debugConnectParameters_board_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->board,arg2,100*sizeof(char));
  else memset(arg1->board,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_board_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_board_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (char *)(char *) ((arg1)->board);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_DBG_Sleep_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_DBG_Sleep_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_DBG_Sleep_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->DBG_Sleep = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_DBG_Sleep_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_DBG_Sleep_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->DBG_Sleep);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_speed_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_speed_set" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "debugConnectParameters_speed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->speed = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_wrap_debugConnectParameters_speed_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters *arg1 = (debugConnectParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "debugConnectParameters_speed_get" "', argument " "1"" of type '" "debugConnectParameters *""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters * >(argp1);result = (int) ((arg1)->speed);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_debugConnectParameters_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_debugConnectParameters;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  debugConnectParameters *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_debugConnectParameters.");
  }
  result = (debugConnectParameters *)new debugConnectParameters();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::_exports_debugConnectParameters_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_debugConnectParameters_templ<SWIG_OBJ_WRAP>::~_exports_debugConnectParameters_templ() {
  auto arg1 = reinterpret_cast<debugConnectParameters *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_STLINK_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(STLINK_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_USART_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(USART_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_USB_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(USB_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_SPI_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(SPI_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_I2C_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(I2C_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CAN_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CAN_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_JLINK_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(JLINK_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_initProgressBar_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void (*arg2)() = (void (*)()) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_initProgressBar_set" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);{
    {
      int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f___void);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "displayCallBacks_initProgressBar_set" "', argument " "2"" of type '" "void (*)()""'"); 
      }
    }
  }
  if (arg1) (arg1)->initProgressBar = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_initProgressBar_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void (*result)() = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_initProgressBar_get" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);result = (void (*)()) ((arg1)->initProgressBar);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f___void);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_logMessage_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void (*arg2)(int,wchar_t const *) = (void (*)(int,wchar_t const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_logMessage_set" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);{
    {
      int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_int_p_q_const__wchar_t__void);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "displayCallBacks_logMessage_set" "', argument " "2"" of type '" "void (*)(int,wchar_t const *)""'"); 
      }
    }
  }
  if (arg1) (arg1)->logMessage = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_logMessage_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void (*result)(int,wchar_t const *) = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_logMessage_get" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);result = (void (*)(int,wchar_t const *)) ((arg1)->logMessage);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_int_p_q_const__wchar_t__void);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_loadBar_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void (*arg2)(int,int) = (void (*)(int,int)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_loadBar_set" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);{
    {
      int res = SWIG_ConvertFunctionPtr(value, (void**)(&arg2), SWIGTYPE_p_f_int_int__void);
      if (!SWIG_IsOK(res)) {
        SWIG_exception_fail(SWIG_ArgError(res), "in method '" "displayCallBacks_loadBar_set" "', argument " "2"" of type '" "void (*)(int,int)""'"); 
      }
    }
  }
  if (arg1) (arg1)->loadBar = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_wrap_displayCallBacks_loadBar_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks *arg1 = (displayCallBacks *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void (*result)(int,int) = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_displayCallBacks, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displayCallBacks_loadBar_get" "', argument " "1"" of type '" "displayCallBacks *""'"); 
  }
  arg1 = reinterpret_cast< displayCallBacks * >(argp1);result = (void (*)(int,int)) ((arg1)->loadBar);
  jsresult = SWIG_NewFunctionPtrObj((void *)(result), SWIGTYPE_p_f_int_int__void);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_exports_displayCallBacks_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_displayCallBacks;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  displayCallBacks *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_displayCallBacks.");
  }
  result = (displayCallBacks *)new displayCallBacks();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::_exports_displayCallBacks_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_displayCallBacks_templ<SWIG_OBJ_WRAP>::~_exports_displayCallBacks_templ() {
  auto arg1 = reinterpret_cast<displayCallBacks *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_address_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_address_set" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segmentData_C_address_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->address = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_address_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_address_get" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);result = (int) ((arg1)->address);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_size_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_size_set" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "segmentData_C_size_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->size = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_size_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_size_get" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);result = (int) ((arg1)->size);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_data_set" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "segmentData_C_data_set" "', argument " "2"" of type '" "unsigned char *""'"); 
  }
  arg2 = reinterpret_cast< unsigned char * >(argp2);if (arg1) (arg1)->data = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_wrap_segmentData_C_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  segmentData_C *arg1 = (segmentData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_segmentData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "segmentData_C_data_get" "', argument " "1"" of type '" "segmentData_C *""'"); 
  }
  arg1 = reinterpret_cast< segmentData_C * >(argp1);result = (unsigned char *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_exports_segmentData_C_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_segmentData_C;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  segmentData_C *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_segmentData_C.");
  }
  result = (segmentData_C *)new segmentData_C();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_segmentData_C_templ<SWIG_OBJ_WRAP>::_exports_segmentData_C_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_segmentData_C_templ<SWIG_OBJ_WRAP>::~_exports_segmentData_C_templ() {
  auto arg1 = reinterpret_cast<segmentData_C *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_Type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_Type_set" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fileData_C_Type_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->Type = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_Type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_Type_get" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);result = (int) ((arg1)->Type);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_segmentsNbr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_segmentsNbr_set" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "fileData_C_segmentsNbr_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->segmentsNbr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_segmentsNbr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_segmentsNbr_get" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);result = (int) ((arg1)->segmentsNbr);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_segments_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  segmentData_C *arg2 = (segmentData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_segments_set" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_segmentData_C, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "fileData_C_segments_set" "', argument " "2"" of type '" "segmentData_C *""'"); 
  }
  arg2 = reinterpret_cast< segmentData_C * >(argp2);if (arg1) (arg1)->segments = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_fileData_C_templ<SWIG_OBJ_WRAP>::_wrap_fileData_C_segments_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  segmentData_C *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileData_C_segments_get" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);result = (segmentData_C *) ((arg1)->segments);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_segmentData_C, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_fileData_C_templ<SWIG_OBJ_WRAP>::_exports_fileData_C_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_fileData_C;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  fileData_C *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_fileData_C.");
  }
  result = (fileData_C *)new fileData_C();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_fileData_C_templ<SWIG_OBJ_WRAP>::_exports_fileData_C_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_fileData_C_templ<SWIG_OBJ_WRAP>::~_exports_fileData_C_templ() {
  auto arg1 = reinterpret_cast<fileData_C *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_deviceId_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  unsigned short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_deviceId_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_short(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generalInf_deviceId_set" "', argument " "2"" of type '" "unsigned short""'");
  } 
  arg2 = static_cast< unsigned short >(val2);if (arg1) (arg1)->deviceId = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_deviceId_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_deviceId_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (unsigned short) ((arg1)->deviceId);
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_flashSize_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_flashSize_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generalInf_flashSize_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->flashSize = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_flashSize_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_flashSize_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (int) ((arg1)->flashSize);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_bootloaderVersion_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_bootloaderVersion_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "generalInf_bootloaderVersion_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->bootloaderVersion = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_bootloaderVersion_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_bootloaderVersion_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (int) ((arg1)->bootloaderVersion);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_type_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[4] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_type_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 4);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_type_set" "', argument " "2"" of type '" "char [4]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->type,arg2,4*sizeof(char));
  else memset(arg1->type,0,4*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_type_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_type_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->type);
  {
    size_t size = SWIG_strnlen(result, 4);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_cpu_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[20] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_cpu_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 20);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_cpu_set" "', argument " "2"" of type '" "char [20]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->cpu,arg2,20*sizeof(char));
  else memset(arg1->cpu,0,20*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_cpu_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_cpu_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->cpu);
  {
    size_t size = SWIG_strnlen(result, 20);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_name_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_name_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_name_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->name,arg2,100*sizeof(char));
  else memset(arg1->name,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_name_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_name_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->name);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_series_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_series_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_series_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->series,arg2,100*sizeof(char));
  else memset(arg1->series,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_series_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_series_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->series);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_description_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[150] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_description_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 150);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_description_set" "', argument " "2"" of type '" "char [150]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->description,arg2,150*sizeof(char));
  else memset(arg1->description,0,150*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_description_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_description_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->description);
  {
    size_t size = SWIG_strnlen(result, 150);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_revisionId_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[8] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_revisionId_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 8);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_revisionId_set" "', argument " "2"" of type '" "char [8]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->revisionId,arg2,8*sizeof(char));
  else memset(arg1->revisionId,0,8*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_revisionId_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_revisionId_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->revisionId);
  {
    size_t size = SWIG_strnlen(result, 8);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_board_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_board_set" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "generalInf_board_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->board,arg2,100*sizeof(char));
  else memset(arg1->board,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_generalInf_templ<SWIG_OBJ_WRAP>::_wrap_generalInf_board_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *arg1 = (generalInf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_generalInf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "generalInf_board_get" "', argument " "1"" of type '" "generalInf *""'"); 
  }
  arg1 = reinterpret_cast< generalInf * >(argp1);result = (char *)(char *) ((arg1)->board);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_generalInf_templ<SWIG_OBJ_WRAP>::_exports_generalInf_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_generalInf;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  generalInf *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_generalInf.");
  }
  result = (generalInf *)new generalInf();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_generalInf_templ<SWIG_OBJ_WRAP>::_exports_generalInf_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_generalInf_templ<SWIG_OBJ_WRAP>::~_exports_generalInf_templ() {
  auto arg1 = reinterpret_cast<generalInf *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_deviceSector_templ<SWIG_OBJ_WRAP>::_wrap_deviceSector_sectorNum_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  deviceSector *arg1 = (deviceSector *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_deviceSector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deviceSector_sectorNum_set" "', argument " "1"" of type '" "deviceSector *""'"); 
  }
  arg1 = reinterpret_cast< deviceSector * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "deviceSector_sectorNum_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sectorNum = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_deviceSector_templ<SWIG_OBJ_WRAP>::_wrap_deviceSector_sectorNum_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  deviceSector *arg1 = (deviceSector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_deviceSector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deviceSector_sectorNum_get" "', argument " "1"" of type '" "deviceSector *""'"); 
  }
  arg1 = reinterpret_cast< deviceSector * >(argp1);result = (uint32_t) ((arg1)->sectorNum);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_deviceSector_templ<SWIG_OBJ_WRAP>::_wrap_deviceSector_sectorSize_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  deviceSector *arg1 = (deviceSector *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_deviceSector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deviceSector_sectorSize_set" "', argument " "1"" of type '" "deviceSector *""'"); 
  }
  arg1 = reinterpret_cast< deviceSector * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "deviceSector_sectorSize_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sectorSize = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_deviceSector_templ<SWIG_OBJ_WRAP>::_wrap_deviceSector_sectorSize_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  deviceSector *arg1 = (deviceSector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_deviceSector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "deviceSector_sectorSize_get" "', argument " "1"" of type '" "deviceSector *""'"); 
  }
  arg1 = reinterpret_cast< deviceSector * >(argp1);result = (uint32_t) ((arg1)->sectorSize);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_deviceSector_templ<SWIG_OBJ_WRAP>::_exports_deviceSector_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_deviceSector;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  deviceSector *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_deviceSector.");
  }
  result = (deviceSector *)new deviceSector();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_deviceSector_templ<SWIG_OBJ_WRAP>::_exports_deviceSector_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_deviceSector_templ<SWIG_OBJ_WRAP>::~_exports_deviceSector_templ() {
  auto arg1 = reinterpret_cast<deviceSector *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_filePath_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[200] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_filePath_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 200);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "externalLoader_filePath_set" "', argument " "2"" of type '" "char [200]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->filePath,arg2,200*sizeof(char));
  else memset(arg1->filePath,0,200*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_filePath_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_filePath_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (char *)(char *) ((arg1)->filePath);
  {
    size_t size = SWIG_strnlen(result, 200);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceName_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[100] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceName_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 100);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "externalLoader_deviceName_set" "', argument " "2"" of type '" "char [100]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->deviceName,arg2,100*sizeof(char));
  else memset(arg1->deviceName,0,100*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceName_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceName_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (char *)(char *) ((arg1)->deviceName);
  {
    size_t size = SWIG_strnlen(result, 100);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceType_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceType_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalLoader_deviceType_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);if (arg1) (arg1)->deviceType = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceType_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceType_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (int) ((arg1)->deviceType);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceStartAddress_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceStartAddress_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalLoader_deviceStartAddress_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->deviceStartAddress = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceStartAddress_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceStartAddress_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (uint32_t) ((arg1)->deviceStartAddress);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceSize_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceSize_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalLoader_deviceSize_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->deviceSize = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_deviceSize_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_deviceSize_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (uint32_t) ((arg1)->deviceSize);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_pageSize_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_pageSize_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalLoader_pageSize_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->pageSize = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_pageSize_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_pageSize_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (uint32_t) ((arg1)->pageSize);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_sectorsTypeNbr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_sectorsTypeNbr_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalLoader_sectorsTypeNbr_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sectorsTypeNbr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_sectorsTypeNbr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_sectorsTypeNbr_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (uint32_t) ((arg1)->sectorsTypeNbr);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_sectors_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  deviceSector *arg2 = (deviceSector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_sectors_set" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_deviceSector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "externalLoader_sectors_set" "', argument " "2"" of type '" "deviceSector *""'"); 
  }
  arg2 = reinterpret_cast< deviceSector * >(argp2);if (arg1) (arg1)->sectors = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalLoader_templ<SWIG_OBJ_WRAP>::_wrap_externalLoader_sectors_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalLoader *arg1 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  deviceSector *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalLoader_sectors_get" "', argument " "1"" of type '" "externalLoader *""'"); 
  }
  arg1 = reinterpret_cast< externalLoader * >(argp1);result = (deviceSector *) ((arg1)->sectors);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_deviceSector, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_externalLoader_templ<SWIG_OBJ_WRAP>::_exports_externalLoader_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_externalLoader;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  externalLoader *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_externalLoader.");
  }
  result = (externalLoader *)new externalLoader();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_externalLoader_templ<SWIG_OBJ_WRAP>::_exports_externalLoader_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_externalLoader_templ<SWIG_OBJ_WRAP>::~_exports_externalLoader_templ() {
  auto arg1 = reinterpret_cast<externalLoader *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_wrap_externalStorageInfo_externalLoaderNbr_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalStorageInfo *arg1 = (externalStorageInfo *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalStorageInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalStorageInfo_externalLoaderNbr_set" "', argument " "1"" of type '" "externalStorageInfo *""'"); 
  }
  arg1 = reinterpret_cast< externalStorageInfo * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "externalStorageInfo_externalLoaderNbr_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if (arg1) (arg1)->externalLoaderNbr = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_wrap_externalStorageInfo_externalLoaderNbr_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalStorageInfo *arg1 = (externalStorageInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalStorageInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalStorageInfo_externalLoaderNbr_get" "', argument " "1"" of type '" "externalStorageInfo *""'"); 
  }
  arg1 = reinterpret_cast< externalStorageInfo * >(argp1);result = (unsigned int) ((arg1)->externalLoaderNbr);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_wrap_externalStorageInfo_externalLoader_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalStorageInfo *arg1 = (externalStorageInfo *) 0 ;
  externalLoader *arg2 = (externalLoader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalStorageInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalStorageInfo_externalLoader_set" "', argument " "1"" of type '" "externalStorageInfo *""'"); 
  }
  arg1 = reinterpret_cast< externalStorageInfo * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_externalLoader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "externalStorageInfo_externalLoader_set" "', argument " "2"" of type '" "externalLoader *""'"); 
  }
  arg2 = reinterpret_cast< externalLoader * >(argp2);if (arg1) (arg1)->externalLoader = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_wrap_externalStorageInfo_externalLoader_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  externalStorageInfo *arg1 = (externalStorageInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  externalLoader *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_externalStorageInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "externalStorageInfo_externalLoader_get" "', argument " "1"" of type '" "externalStorageInfo *""'"); 
  }
  arg1 = reinterpret_cast< externalStorageInfo * >(argp1);result = (externalLoader *) ((arg1)->externalLoader);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_externalLoader, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_exports_externalStorageInfo_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_externalStorageInfo;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  externalStorageInfo *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_externalStorageInfo.");
  }
  result = (externalStorageInfo *)new externalStorageInfo();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::_exports_externalStorageInfo_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_externalStorageInfo_templ<SWIG_OBJ_WRAP>::~_exports_externalStorageInfo_templ() {
  auto arg1 = reinterpret_cast<externalStorageInfo *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_function
Napi::Value _wrap_getStLinkList(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters **arg1 = (debugConnectParameters **) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getStLinkList.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getStLinkList" "', argument " "1"" of type '" "debugConnectParameters **""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters ** >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getStLinkList" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);result = (int)getStLinkList(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getStLinkEnumerationList(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters **arg1 = (debugConnectParameters **) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getStLinkEnumerationList.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_debugConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getStLinkEnumerationList" "', argument " "1"" of type '" "debugConnectParameters **""'"); 
  }
  arg1 = reinterpret_cast< debugConnectParameters ** >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getStLinkEnumerationList" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);result = (int)getStLinkEnumerationList(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectStLink(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectStLink.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_debugConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectStLink" "', argument " "1"" of type '" "debugConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectStLink" "', argument " "1"" of type '" "debugConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< debugConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectStLink(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_reset(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  debugResetMode arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_reset.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "reset" "', argument " "1"" of type '" "debugResetMode""'");
  } 
  arg1 = static_cast< debugResetMode >(val1);result = (int)reset(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getUsartList(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters **arg1 = (usartConnectParameters **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getUsartList.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_usartConnectParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getUsartList" "', argument " "1"" of type '" "usartConnectParameters **""'"); 
  }
  arg1 = reinterpret_cast< usartConnectParameters ** >(argp1);result = (int)getUsartList(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectUsartBootloader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  usartConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectUsartBootloader.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_usartConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectUsartBootloader" "', argument " "1"" of type '" "usartConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectUsartBootloader" "', argument " "1"" of type '" "usartConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< usartConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectUsartBootloader(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_sendByteUart(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_sendByteUart.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "sendByteUart" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (int)sendByteUart(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getDfuDeviceList(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoPtr *arg1 = (dfuDeviceInfoPtr *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getDfuDeviceList.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDfuDeviceList" "', argument " "1"" of type '" "dfuDeviceInfoPtr *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoPtr * >(argp1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getDfuDeviceList" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);ecode3 = SWIG_AsVal_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "getDfuDeviceList" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);result = (int)getDfuDeviceList(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectDfuBootloader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectDfuBootloader.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectDfuBootloader" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);result = (int)connectDfuBootloader(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectDfuBootloader2(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectDfuBootloader2.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_dfuConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectDfuBootloader2" "', argument " "1"" of type '" "dfuConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectDfuBootloader2" "', argument " "1"" of type '" "dfuConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< dfuConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectDfuBootloader2(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectSpiBootloader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  spiConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectSpiBootloader.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_spiConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectSpiBootloader" "', argument " "1"" of type '" "spiConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectSpiBootloader" "', argument " "1"" of type '" "spiConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< spiConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectSpiBootloader(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectCanBootloader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectCanBootloader.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_canConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectCanBootloader" "', argument " "1"" of type '" "canConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectCanBootloader" "', argument " "1"" of type '" "canConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< canConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectCanBootloader(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_connectI2cBootloader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  i2cConnectParameters arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_connectI2cBootloader.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_i2cConnectParameters,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "connectI2cBootloader" "', argument " "1"" of type '" "i2cConnectParameters""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "connectI2cBootloader" "', argument " "1"" of type '" "i2cConnectParameters""'");
      } else {
        arg1 = *(reinterpret_cast< i2cConnectParameters * >(argp1));
      }
    }
  }
  result = (int)connectI2cBootloader(SWIG_STD_MOVE(arg1));
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_setDisplayCallbacks(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  displayCallBacks arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_setDisplayCallbacks.");
  }
  
  {
    {
      res1 = SWIG_ConvertPtr(info[0], &argp1, SWIGTYPE_p_displayCallBacks,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setDisplayCallbacks" "', argument " "1"" of type '" "displayCallBacks""'"); 
      }  
      if (!argp1) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "setDisplayCallbacks" "', argument " "1"" of type '" "displayCallBacks""'");
      } else {
        arg1 = *(reinterpret_cast< displayCallBacks * >(argp1));
      }
    }
  }
  setDisplayCallbacks(SWIG_STD_MOVE(arg1));
  jsresult = env.Undefined();
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_setVerbosityLevel(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_setVerbosityLevel.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "setVerbosityLevel" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);setVerbosityLevel(arg1);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_checkDeviceConnection(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_checkDeviceConnection.");
  }
  
  result = (int)checkDeviceConnection();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getDeviceGeneralInf(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  generalInf *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getDeviceGeneralInf.");
  }
  
  result = (generalInf *)getDeviceGeneralInf();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_generalInf, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_readMemory(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned int arg1 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_readMemory.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "readMemory" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "readMemory" "', argument " "2"" of type '" "unsigned char **""'"); 
  }
  arg2 = reinterpret_cast< unsigned char ** >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "readMemory" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);result = (int)readMemory(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_writeMemory(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_writeMemory.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "writeMemory" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "writeMemory" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "writeMemory" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);result = (int)writeMemory(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_editSector(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_editSector.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "editSector" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);res2 = SWIG_AsCharPtrAndSize(info[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "editSector" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "editSector" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);result = (int)editSector(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_downloadFile(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  wchar_t *arg5 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_downloadFile.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "downloadFile" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "downloadFile" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "downloadFile" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);ecode4 = SWIG_AsVal_unsigned_SS_int(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "downloadFile" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);res5 = SWIG_ConvertPtr(info[4], &argp5,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "downloadFile" "', argument " "5"" of type '" "wchar_t const *""'"); 
  }
  arg5 = reinterpret_cast< wchar_t * >(argp5);result = (int)downloadFile((wchar_t const *)arg1,arg2,arg3,arg4,(wchar_t const *)arg5);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_execute(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_execute.");
  }
  
  ecode1 = SWIG_AsVal_unsigned_SS_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "execute" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);result = (int)execute(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_massErase(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) nullptr ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_massErase.");
  }
  
  if(info.Length() > 0)
  {
    res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "massErase" "', argument " "1"" of type '" "char *""'");
    }
    arg1 = reinterpret_cast< char * >(buf1);
  }
  result = (int)massErase(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_sectorErase(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned int *arg1 = (unsigned int *) (unsigned int *)0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) nullptr ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_sectorErase.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sectorErase" "', argument " "1"" of type '" "unsigned int []""'"); 
  } 
  arg1 = reinterpret_cast< unsigned int * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "sectorErase" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);if(info.Length() > 2)
  {
    res3 = SWIG_AsCharPtrAndSize(info[2], &buf3, NULL, &alloc3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "sectorErase" "', argument " "3"" of type '" "char *""'");
    }
    arg3 = reinterpret_cast< char * >(buf3);
  }
  result = (int)sectorErase(arg1,arg2,arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_readUnprotect(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_readUnprotect.");
  }
  
  result = (int)readUnprotect();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getCancelPointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getCancelPointer.");
  }
  
  result = (int *)getCancelPointer();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_int, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_fileOpen(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_fileOpen.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "fileOpen" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);result = (void *)fileOpen((wchar_t const *)arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_freeFileData(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_freeFileData.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "freeFileData" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);freeFileData(arg1);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_freeLibraryMemory(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  int res1 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_freeLibraryMemory.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "freeLibraryMemory" "', argument " "1"" of type '" "void *""'"); 
  }freeLibraryMemory(arg1);
  jsresult = env.Undefined();
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_verify(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_verify.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "verify" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "verify" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);result = (int)verify(arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_saveFileToFile(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  fileData_C *arg1 = (fileData_C *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_saveFileToFile.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_fileData_C, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "saveFileToFile" "', argument " "1"" of type '" "fileData_C *""'"); 
  }
  arg1 = reinterpret_cast< fileData_C * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "saveFileToFile" "', argument " "2"" of type '" "wchar_t const *""'"); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);result = (int)saveFileToFile(arg1,(wchar_t const *)arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_saveMemoryToFile(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_saveMemoryToFile.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "saveMemoryToFile" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);ecode2 = SWIG_AsVal_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "saveMemoryToFile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "saveMemoryToFile" "', argument " "3"" of type '" "wchar_t const *""'"); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);result = (int)saveMemoryToFile(arg1,arg2,(wchar_t const *)arg3);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_disconnect(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_disconnect.");
  }
  
  disconnect();
  jsresult = env.Undefined();
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_deleteInterfaceList(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_deleteInterfaceList.");
  }
  
  deleteInterfaceList();
  jsresult = env.Undefined();
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_automaticMode(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int val7 ;
  int ecode7 = 0 ;
  
  if(static_cast<int>(info.Length()) < 7 || static_cast<int>(info.Length()) > 7) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_automaticMode.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "automaticMode" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "automaticMode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "automaticMode" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);ecode4 = SWIG_AsVal_unsigned_SS_int(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "automaticMode" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);ecode5 = SWIG_AsVal_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "automaticMode" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);res6 = SWIG_AsCharPtrAndSize(info[5], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "automaticMode" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);ecode7 = SWIG_AsVal_int(info[6], &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "automaticMode" "', argument " "7"" of type '" "int""'");
  } 
  arg7 = static_cast< int >(val7);automaticMode((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jsresult = env.Undefined();
  
  
  
  
  
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getStorageStructure(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  storageStructure **arg1 = (storageStructure **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getStorageStructure.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_storageStructure, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getStorageStructure" "', argument " "1"" of type '" "storageStructure **""'"); 
  }
  arg1 = reinterpret_cast< storageStructure ** >(argp1);result = (int)getStorageStructure(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_sendOptionBytesCmd(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_sendOptionBytesCmd.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "sendOptionBytesCmd" "', argument " "1"" of type '" "char *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);result = (int)sendOptionBytesCmd(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_initOptionBytesInterface(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  peripheral_C *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_initOptionBytesInterface.");
  }
  
  result = (peripheral_C *)initOptionBytesInterface();
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_peripheral_C, 0 |  0 );
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_obDisplay(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_obDisplay.");
  }
  
  result = (int)obDisplay();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_setLoadersPath(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_setLoadersPath.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setLoadersPath" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);setLoadersPath((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_setExternalLoaderPath(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  externalLoader **arg2 = (externalLoader **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_setExternalLoaderPath.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "setExternalLoaderPath" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_p_externalLoader, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "setExternalLoaderPath" "', argument " "2"" of type '" "externalLoader **""'"); 
  }
  arg2 = reinterpret_cast< externalLoader ** >(argp2);setExternalLoaderPath((char const *)arg1,arg2);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getExternalLoaders(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  externalStorageInfo **arg2 = (externalStorageInfo **) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getExternalLoaders.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getExternalLoaders" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_p_externalStorageInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getExternalLoaders" "', argument " "2"" of type '" "externalStorageInfo **""'"); 
  }
  arg2 = reinterpret_cast< externalStorageInfo ** >(argp2);result = (int)getExternalLoaders((char const *)arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_removeExternalLoader(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_removeExternalLoader.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "removeExternalLoader" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);removeExternalLoader((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_deleteLoaders(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_deleteLoaders.");
  }
  
  deleteLoaders();
  jsresult = env.Undefined();
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getUID64(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  unsigned char **arg1 = (unsigned char **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getUID64.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getUID64" "', argument " "1"" of type '" "unsigned char **""'"); 
  }
  arg1 = reinterpret_cast< unsigned char ** >(argp1);result = (int)getUID64(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_firmwareDelete(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_firmwareDelete.");
  }
  
  result = (int)firmwareDelete();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_firmwareUpgrade(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 5 || static_cast<int>(info.Length()) > 5) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_firmwareUpgrade.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "firmwareUpgrade" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "firmwareUpgrade" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "firmwareUpgrade" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);ecode4 = SWIG_AsVal_unsigned_SS_int(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "firmwareUpgrade" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);ecode5 = SWIG_AsVal_unsigned_SS_int(info[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "firmwareUpgrade" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);result = (int)firmwareUpgrade((wchar_t const *)arg1,arg2,arg3,arg4,arg5);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_startWirelessStack(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_startWirelessStack.");
  }
  
  result = (int)startWirelessStack();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_updateAuthKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_updateAuthKey.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "updateAuthKey" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);result = (int)updateAuthKey((wchar_t const *)arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_authKeyLock(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_authKeyLock.");
  }
  
  result = (int)authKeyLock();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_writeUserKey(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  unsigned char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_writeUserKey.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "writeUserKey" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "writeUserKey" "', argument " "2"" of type '" "unsigned char""'");
  } 
  arg2 = static_cast< unsigned char >(val2);result = (int)writeUserKey((wchar_t const *)arg1,arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_antiRollBack(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_antiRollBack.");
  }
  
  result = (int)antiRollBack();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_startFus(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_startFus.");
  }
  
  result = (int)startFus();
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_programSsp(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 4 || static_cast<int>(info.Length()) > 4) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_programSsp.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "programSsp" "', argument " "1"" of type '" "wchar_t const *""'"); 
  }
  arg1 = reinterpret_cast< wchar_t * >(argp1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "programSsp" "', argument " "2"" of type '" "wchar_t const *""'"); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "programSsp" "', argument " "3"" of type '" "wchar_t const *""'"); 
  }
  arg3 = reinterpret_cast< wchar_t * >(argp3);ecode4 = SWIG_AsVal_int(info[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "programSsp" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);result = (int)programSsp((wchar_t const *)arg1,(wchar_t const *)arg2,(wchar_t const *)arg3,arg4);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmFirmwareID(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmFirmwareID.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmFirmwareID" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (char *)getHsmFirmwareID(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmCounter(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned long result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmCounter.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmCounter" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (unsigned long)getHsmCounter(arg1);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmState(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmState.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmState" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (char *)getHsmState(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmVersion(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmVersion.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmVersion" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (char *)getHsmVersion(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmType(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  char *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmType.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmType" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);result = (char *)getHsmType(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_getHsmLicense(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  int arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_getHsmLicense.");
  }
  
  ecode1 = SWIG_AsVal_int(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "getHsmLicense" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "getHsmLicense" "', argument " "2"" of type '" "wchar_t const *""'"); 
  }
  arg2 = reinterpret_cast< wchar_t * >(argp2);result = (int)getHsmLicense(arg1,(wchar_t const *)arg2);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfoArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_dfuDeviceInfoArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  dfuDeviceInfoArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dfuDeviceInfoArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_dfuDeviceInfoArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (dfuDeviceInfoArray *)new_dfuDeviceInfoArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfoArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_dfuDeviceInfoArray(dfuDeviceInfoArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::~_exports_dfuDeviceInfoArray_templ() {
  auto arg1 = reinterpret_cast<dfuDeviceInfoArray *>(this->self);
  if (this->owned && arg1) {
    delete_dfuDeviceInfoArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoArray *arg1 = (dfuDeviceInfoArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  dfuDeviceInfo result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfoArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoArray_getitem" "', argument " "1"" of type '" "dfuDeviceInfoArray *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuDeviceInfoArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = dfuDeviceInfoArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_NewPointerObj((new dfuDeviceInfo(result)), SWIGTYPE_p_dfuDeviceInfo, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoArray *arg1 = (dfuDeviceInfoArray *) 0 ;
  size_t arg2 ;
  dfuDeviceInfo arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfoArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoArray_setitem" "', argument " "1"" of type '" "dfuDeviceInfoArray *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "dfuDeviceInfoArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);{
    {
      res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_dfuDeviceInfo,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dfuDeviceInfoArray_setitem" "', argument " "3"" of type '" "dfuDeviceInfo""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dfuDeviceInfoArray_setitem" "', argument " "3"" of type '" "dfuDeviceInfo""'");
      } else {
        arg3 = *(reinterpret_cast< dfuDeviceInfo * >(argp3));
      }
    }
  }
  dfuDeviceInfoArray_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoArray *arg1 = (dfuDeviceInfoArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dfuDeviceInfo *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_dfuDeviceInfoArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoArray_cast" "', argument " "1"" of type '" "dfuDeviceInfoArray *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoArray * >(argp1);result = (dfuDeviceInfo *)dfuDeviceInfoArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoArray_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfo *arg1 = (dfuDeviceInfo *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dfuDeviceInfoArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoArray_frompointer" "', argument " "1"" of type '" "dfuDeviceInfo *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfo * >(argp1);result = (dfuDeviceInfoArray *)dfuDeviceInfoArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dfuDeviceInfoArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfoPtr_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_p_dfuDeviceInfo;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  dfuDeviceInfoPtr *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_dfuDeviceInfoPtr.");
  }
  result = (dfuDeviceInfoPtr *)new_dfuDeviceInfoPtr();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_exports_dfuDeviceInfoPtr_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_dfuDeviceInfoPtr(dfuDeviceInfoPtr *self){
  delete self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::~_exports_dfuDeviceInfoPtr_templ() {
  auto arg1 = reinterpret_cast<dfuDeviceInfoPtr *>(this->self);
  if (this->owned && arg1) {
    delete_dfuDeviceInfoPtr(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoPtr_assign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoPtr *arg1 = (dfuDeviceInfoPtr *) 0 ;
  dfuDeviceInfoPtr arg2 = (dfuDeviceInfoPtr) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoPtr_assign.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoPtr_assign" "', argument " "1"" of type '" "dfuDeviceInfoPtr *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoPtr * >(argp1);res2 = SWIG_ConvertPtr(info[0], &argp2,SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dfuDeviceInfoPtr_assign" "', argument " "2"" of type '" "dfuDeviceInfoPtr""'"); 
  }
  arg2 = reinterpret_cast< dfuDeviceInfoPtr >(argp2);dfuDeviceInfoPtr_assign(arg1,arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoPtr_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoPtr *arg1 = (dfuDeviceInfoPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dfuDeviceInfoPtr result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoPtr_value.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoPtr_value" "', argument " "1"" of type '" "dfuDeviceInfoPtr *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoPtr * >(argp1);result = (dfuDeviceInfoPtr)dfuDeviceInfoPtr_value(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_dfuDeviceInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoPtr_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoPtr *arg1 = (dfuDeviceInfoPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dfuDeviceInfoPtr *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoPtr_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoPtr_cast" "', argument " "1"" of type '" "dfuDeviceInfoPtr *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoPtr * >(argp1);result = (dfuDeviceInfoPtr *)dfuDeviceInfoPtr_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_dfuDeviceInfoPtr_templ<SWIG_OBJ_WRAP>::_wrap_dfuDeviceInfoPtr_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  dfuDeviceInfoPtr *arg1 = (dfuDeviceInfoPtr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  dfuDeviceInfoPtr *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_dfuDeviceInfoPtr_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dfuDeviceInfoPtr_frompointer" "', argument " "1"" of type '" "dfuDeviceInfoPtr *""'"); 
  }
  arg1 = reinterpret_cast< dfuDeviceInfoPtr * >(argp1);result = (dfuDeviceInfoPtr *)dfuDeviceInfoPtr_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_dfuDeviceInfo, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_LoadDll(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_LoadDll.");
  }
  
  res1 = SWIG_AsCharPtrAndSize(info[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LoadDll" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);LoadDll((char const *)arg1);
  jsresult = env.Undefined();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_dfuDeviceInfoArrayTo_p_dfuDeviceInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dfuDeviceInfo *)  ((dfuDeviceInfoArray *) x));
}
static void *_p_p_dfuDeviceInfoArrayTo_p_p_dfuDeviceInfo(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((dfuDeviceInfo **)  ((dfuDeviceInfoArray **) x));
}
static swig_type_info _swigt__p___int64 = {"_p___int64", "LONG64 *|LONGLONG *|__int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_canConnectParameters = {"_p_canConnectParameters", "p_canConnectParameters|canConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CCHAR *|CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_debugConnectMode = {"_p_debugConnectMode", "debugConnectMode *|enum debugConnectMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_debugConnectParameters = {"_p_debugConnectParameters", "p_debugConnectParameters|debugConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_debugPort = {"_p_debugPort", "debugPort *|enum debugPort *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_debugResetMode = {"_p_debugResetMode", "debugResetMode *|enum debugResetMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_deviceSector = {"_p_deviceSector", "p_deviceSector|deviceSector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dfuConnectParameters = {"_p_dfuConnectParameters", "p_dfuConnectParameters|dfuConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dfuDeviceInfo = {"_p_dfuDeviceInfo", "dfuDeviceInfoPtr|p_dfuDeviceInfo|dfuDeviceInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dfuDeviceInfoArray = {"_p_dfuDeviceInfoArray", "dfuDeviceInfoArray *|p_dfuDeviceInfoArray", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_displayCallBacks = {"_p_displayCallBacks", "p_displayCallBacks|displayCallBacks *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_externalLoader = {"_p_externalLoader", "p_externalLoader|externalLoader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_externalStorageInfo = {"_p_externalStorageInfo", "p_externalStorageInfo|externalStorageInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f___void = {"_p_f___void", "void (*)()", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_int__void = {"_p_f_int_int__void", "void (*)(int,int)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_int_p_q_const__wchar_t__void = {"_p_f_int_p_q_const__wchar_t__void", "void (*)(int,wchar_t const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_fileData_C = {"_p_fileData_C", "fileData_C *|p_fileData_C", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_frequencies = {"_p_frequencies", "p_frequencies|frequencies *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_generalInf = {"_p_generalInf", "generalInf *|p_generalInf", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_i2cConnectParameters = {"_p_i2cConnectParameters", "p_i2cConnectParameters|i2cConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT *|INT32 *|INT_PTR *|LONG32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "HRESULT *|LONG *|LONG_PTR *|SHANDLE_PTR *|SSIZE_T *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "LPCTSTR *|LPCUTSTR *|LPTCH *|LPTSTR *|LPUTSTR *|PCTSTR *|PCUTSTR *|PTCH *|PTSTR *|PUTSTR *|char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_debugConnectParameters = {"_p_p_debugConnectParameters", "debugConnectParameters **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_dfuDeviceInfo = {"_p_p_dfuDeviceInfo", "dfuDeviceInfoPtr *|p_p_dfuDeviceInfo|dfuDeviceInfo **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_dfuDeviceInfoArray = {"_p_p_dfuDeviceInfoArray", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_p_externalLoader = {"_p_p_externalLoader", "externalLoader **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_externalStorageInfo = {"_p_p_externalStorageInfo", "externalStorageInfo **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_storageStructure = {"_p_p_storageStructure", "storageStructure **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_char = {"_p_p_unsigned_char", "unsigned char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "PLCID *|unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_usartConnectParameters = {"_p_p_usartConnectParameters", "usartConnectParameters **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_peripheral_C = {"_p_peripheral_C", "peripheral_C *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_segmentData_C = {"_p_segmentData_C", "p_segmentData_C|segmentData_C *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|INT16 *|SHORT *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "INT8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_spiConnectParameters = {"_p_spiConnectParameters", "p_spiConnectParameters|spiConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_targetInterfaceType = {"_p_targetInterfaceType", "targetInterfaceType *|enum targetInterfaceType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "DWORD64 *|DWORDLONG *|UINT64 *|ULONG64 *|ULONGLONG *|unsigned __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "BOOLEAN *|BYTE *|FCHAR *|TBYTE *|UCHAR *|UINT8 *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD32 *|UINT *|UINT32 *|UINT_PTR *|ULONG32 *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "DWORD *|DWORD_PTR *|FLONG *|HANDLE_PTR *|LCID *|SIZE_T *|ULONG *|ULONG_PTR *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "FSHORT *|LANGID *|UHALF_PTR *|UINT16 *|USHORT *|WORD *|uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_usartConnectParameters = {"_p_usartConnectParameters", "p_usartConnectParameters|usartConnectParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_usartFlowControl = {"_p_usartFlowControl", "usartFlowControl *|enum usartFlowControl *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_usartParity = {"_p_usartParity", "usartParity *|enum usartParity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p___int64,
  &_swigt__p_canConnectParameters,
  &_swigt__p_char,
  &_swigt__p_debugConnectMode,
  &_swigt__p_debugConnectParameters,
  &_swigt__p_debugPort,
  &_swigt__p_debugResetMode,
  &_swigt__p_deviceSector,
  &_swigt__p_dfuConnectParameters,
  &_swigt__p_dfuDeviceInfo,
  &_swigt__p_dfuDeviceInfoArray,
  &_swigt__p_displayCallBacks,
  &_swigt__p_externalLoader,
  &_swigt__p_externalStorageInfo,
  &_swigt__p_f___void,
  &_swigt__p_f_int_int__void,
  &_swigt__p_f_int_p_q_const__wchar_t__void,
  &_swigt__p_fileData_C,
  &_swigt__p_float,
  &_swigt__p_frequencies,
  &_swigt__p_generalInf,
  &_swigt__p_i2cConnectParameters,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_p_char,
  &_swigt__p_p_debugConnectParameters,
  &_swigt__p_p_dfuDeviceInfo,
  &_swigt__p_p_dfuDeviceInfoArray,
  &_swigt__p_p_externalLoader,
  &_swigt__p_p_externalStorageInfo,
  &_swigt__p_p_storageStructure,
  &_swigt__p_p_unsigned_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_p_usartConnectParameters,
  &_swigt__p_peripheral_C,
  &_swigt__p_segmentData_C,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_spiConnectParameters,
  &_swigt__p_targetInterfaceType,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_usartConnectParameters,
  &_swigt__p_usartFlowControl,
  &_swigt__p_usartParity,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_canConnectParameters[] = {  {&_swigt__p_canConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_debugConnectMode[] = {  {&_swigt__p_debugConnectMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_debugConnectParameters[] = {  {&_swigt__p_debugConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_debugPort[] = {  {&_swigt__p_debugPort, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_debugResetMode[] = {  {&_swigt__p_debugResetMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_deviceSector[] = {  {&_swigt__p_deviceSector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dfuConnectParameters[] = {  {&_swigt__p_dfuConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dfuDeviceInfo[] = {  {&_swigt__p_dfuDeviceInfo, 0, 0, 0},  {&_swigt__p_dfuDeviceInfoArray, _p_dfuDeviceInfoArrayTo_p_dfuDeviceInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dfuDeviceInfoArray[] = {  {&_swigt__p_dfuDeviceInfoArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_displayCallBacks[] = {  {&_swigt__p_displayCallBacks, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_externalLoader[] = {  {&_swigt__p_externalLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_externalStorageInfo[] = {  {&_swigt__p_externalStorageInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f___void[] = {  {&_swigt__p_f___void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_int__void[] = {  {&_swigt__p_f_int_int__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_int_p_q_const__wchar_t__void[] = {  {&_swigt__p_f_int_p_q_const__wchar_t__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_fileData_C[] = {  {&_swigt__p_fileData_C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_frequencies[] = {  {&_swigt__p_frequencies, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_generalInf[] = {  {&_swigt__p_generalInf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_i2cConnectParameters[] = {  {&_swigt__p_i2cConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_debugConnectParameters[] = {  {&_swigt__p_p_debugConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_dfuDeviceInfoArray[] = {{&_swigt__p_p_dfuDeviceInfoArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_dfuDeviceInfo[] = {  {&_swigt__p_p_dfuDeviceInfo, 0, 0, 0},  {&_swigt__p_p_dfuDeviceInfoArray, _p_p_dfuDeviceInfoArrayTo_p_p_dfuDeviceInfo, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_externalLoader[] = {  {&_swigt__p_p_externalLoader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_externalStorageInfo[] = {  {&_swigt__p_p_externalStorageInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_storageStructure[] = {  {&_swigt__p_p_storageStructure, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_char[] = {  {&_swigt__p_p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_usartConnectParameters[] = {  {&_swigt__p_p_usartConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_peripheral_C[] = {  {&_swigt__p_peripheral_C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_segmentData_C[] = {  {&_swigt__p_segmentData_C, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_spiConnectParameters[] = {  {&_swigt__p_spiConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_targetInterfaceType[] = {  {&_swigt__p_targetInterfaceType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_usartConnectParameters[] = {  {&_swigt__p_usartConnectParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_usartFlowControl[] = {  {&_swigt__p_usartFlowControl, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_usartParity[] = {  {&_swigt__p_usartParity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p___int64,
  _swigc__p_canConnectParameters,
  _swigc__p_char,
  _swigc__p_debugConnectMode,
  _swigc__p_debugConnectParameters,
  _swigc__p_debugPort,
  _swigc__p_debugResetMode,
  _swigc__p_deviceSector,
  _swigc__p_dfuConnectParameters,
  _swigc__p_dfuDeviceInfo,
  _swigc__p_dfuDeviceInfoArray,
  _swigc__p_displayCallBacks,
  _swigc__p_externalLoader,
  _swigc__p_externalStorageInfo,
  _swigc__p_f___void,
  _swigc__p_f_int_int__void,
  _swigc__p_f_int_p_q_const__wchar_t__void,
  _swigc__p_fileData_C,
  _swigc__p_float,
  _swigc__p_frequencies,
  _swigc__p_generalInf,
  _swigc__p_i2cConnectParameters,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_p_char,
  _swigc__p_p_debugConnectParameters,
  _swigc__p_p_dfuDeviceInfo,
  _swigc__p_p_dfuDeviceInfoArray,
  _swigc__p_p_externalLoader,
  _swigc__p_p_externalStorageInfo,
  _swigc__p_p_storageStructure,
  _swigc__p_p_unsigned_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_p_usartConnectParameters,
  _swigc__p_peripheral_C,
  _swigc__p_segmentData_C,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_spiConnectParameters,
  _swigc__p_targetInterfaceType,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_usartConnectParameters,
  _swigc__p_usartFlowControl,
  _swigc__p_usartParity,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr) return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);





  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */
  

  /* register classes */
  /* Class: dfuDeviceInfo (_exports_dfuDeviceInfo) */
// jsnapi_registerclass
Napi::Function _exports_dfuDeviceInfo_ctor = _exports_dfuDeviceInfo_inst::GetClass(env);
exports.Set("dfuDeviceInfo", _exports_dfuDeviceInfo_ctor);
if (SWIGTYPE_p_dfuDeviceInfo->clientdata == nullptr) {
  SWIGTYPE_p_dfuDeviceInfo->clientdata = new size_t(0);
}
Napi::FunctionReference *_exports_dfuDeviceInfo_ctor_ref = new Napi::FunctionReference();
*_exports_dfuDeviceInfo_ctor_ref = Napi::Persistent(_exports_dfuDeviceInfo_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_dfuDeviceInfo_ctor_ref;
/* Class: usartConnectParameters (_exports_usartConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_usartConnectParameters_ctor = _exports_usartConnectParameters_inst::GetClass(env);
exports.Set("usartConnectParameters", _exports_usartConnectParameters_ctor);
if (SWIGTYPE_p_usartConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_usartConnectParameters->clientdata = new size_t(1);
}
Napi::FunctionReference *_exports_usartConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_usartConnectParameters_ctor_ref = Napi::Persistent(_exports_usartConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_usartConnectParameters_ctor_ref;
/* Class: dfuConnectParameters (_exports_dfuConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_dfuConnectParameters_ctor = _exports_dfuConnectParameters_inst::GetClass(env);
exports.Set("dfuConnectParameters", _exports_dfuConnectParameters_ctor);
if (SWIGTYPE_p_dfuConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_dfuConnectParameters->clientdata = new size_t(2);
}
Napi::FunctionReference *_exports_dfuConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_dfuConnectParameters_ctor_ref = Napi::Persistent(_exports_dfuConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _exports_dfuConnectParameters_ctor_ref;
/* Class: spiConnectParameters (_exports_spiConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_spiConnectParameters_ctor = _exports_spiConnectParameters_inst::GetClass(env);
exports.Set("spiConnectParameters", _exports_spiConnectParameters_ctor);
if (SWIGTYPE_p_spiConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_spiConnectParameters->clientdata = new size_t(3);
}
Napi::FunctionReference *_exports_spiConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_spiConnectParameters_ctor_ref = Napi::Persistent(_exports_spiConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _exports_spiConnectParameters_ctor_ref;
/* Class: canConnectParameters (_exports_canConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_canConnectParameters_ctor = _exports_canConnectParameters_inst::GetClass(env);
exports.Set("canConnectParameters", _exports_canConnectParameters_ctor);
if (SWIGTYPE_p_canConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_canConnectParameters->clientdata = new size_t(4);
}
Napi::FunctionReference *_exports_canConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_canConnectParameters_ctor_ref = Napi::Persistent(_exports_canConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _exports_canConnectParameters_ctor_ref;
/* Class: i2cConnectParameters (_exports_i2cConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_i2cConnectParameters_ctor = _exports_i2cConnectParameters_inst::GetClass(env);
exports.Set("i2cConnectParameters", _exports_i2cConnectParameters_ctor);
if (SWIGTYPE_p_i2cConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_i2cConnectParameters->clientdata = new size_t(5);
}
Napi::FunctionReference *_exports_i2cConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_i2cConnectParameters_ctor_ref = Napi::Persistent(_exports_i2cConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _exports_i2cConnectParameters_ctor_ref;
/* Class: frequencies (_exports_frequencies) */
// jsnapi_registerclass
Napi::Function _exports_frequencies_ctor = _exports_frequencies_inst::GetClass(env);
exports.Set("frequencies", _exports_frequencies_ctor);
if (SWIGTYPE_p_frequencies->clientdata == nullptr) {
  SWIGTYPE_p_frequencies->clientdata = new size_t(6);
}
Napi::FunctionReference *_exports_frequencies_ctor_ref = new Napi::FunctionReference();
*_exports_frequencies_ctor_ref = Napi::Persistent(_exports_frequencies_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _exports_frequencies_ctor_ref;
/* Class: debugConnectParameters (_exports_debugConnectParameters) */
// jsnapi_registerclass
Napi::Function _exports_debugConnectParameters_ctor = _exports_debugConnectParameters_inst::GetClass(env);
exports.Set("debugConnectParameters", _exports_debugConnectParameters_ctor);
if (SWIGTYPE_p_debugConnectParameters->clientdata == nullptr) {
  SWIGTYPE_p_debugConnectParameters->clientdata = new size_t(7);
}
Napi::FunctionReference *_exports_debugConnectParameters_ctor_ref = new Napi::FunctionReference();
*_exports_debugConnectParameters_ctor_ref = Napi::Persistent(_exports_debugConnectParameters_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _exports_debugConnectParameters_ctor_ref;
/* Class: displayCallBacks (_exports_displayCallBacks) */
// jsnapi_registerclass
Napi::Function _exports_displayCallBacks_ctor = _exports_displayCallBacks_inst::GetClass(env);
exports.Set("displayCallBacks", _exports_displayCallBacks_ctor);
if (SWIGTYPE_p_displayCallBacks->clientdata == nullptr) {
  SWIGTYPE_p_displayCallBacks->clientdata = new size_t(8);
}
Napi::FunctionReference *_exports_displayCallBacks_ctor_ref = new Napi::FunctionReference();
*_exports_displayCallBacks_ctor_ref = Napi::Persistent(_exports_displayCallBacks_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _exports_displayCallBacks_ctor_ref;
/* Class: segmentData_C (_exports_segmentData_C) */
// jsnapi_registerclass
Napi::Function _exports_segmentData_C_ctor = _exports_segmentData_C_inst::GetClass(env);
exports.Set("segmentData_C", _exports_segmentData_C_ctor);
if (SWIGTYPE_p_segmentData_C->clientdata == nullptr) {
  SWIGTYPE_p_segmentData_C->clientdata = new size_t(9);
}
Napi::FunctionReference *_exports_segmentData_C_ctor_ref = new Napi::FunctionReference();
*_exports_segmentData_C_ctor_ref = Napi::Persistent(_exports_segmentData_C_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[9] = _exports_segmentData_C_ctor_ref;
/* Class: fileData_C (_exports_fileData_C) */
// jsnapi_registerclass
Napi::Function _exports_fileData_C_ctor = _exports_fileData_C_inst::GetClass(env);
exports.Set("fileData_C", _exports_fileData_C_ctor);
if (SWIGTYPE_p_fileData_C->clientdata == nullptr) {
  SWIGTYPE_p_fileData_C->clientdata = new size_t(10);
}
Napi::FunctionReference *_exports_fileData_C_ctor_ref = new Napi::FunctionReference();
*_exports_fileData_C_ctor_ref = Napi::Persistent(_exports_fileData_C_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[10] = _exports_fileData_C_ctor_ref;
/* Class: generalInf (_exports_generalInf) */
// jsnapi_registerclass
Napi::Function _exports_generalInf_ctor = _exports_generalInf_inst::GetClass(env);
exports.Set("generalInf", _exports_generalInf_ctor);
if (SWIGTYPE_p_generalInf->clientdata == nullptr) {
  SWIGTYPE_p_generalInf->clientdata = new size_t(11);
}
Napi::FunctionReference *_exports_generalInf_ctor_ref = new Napi::FunctionReference();
*_exports_generalInf_ctor_ref = Napi::Persistent(_exports_generalInf_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[11] = _exports_generalInf_ctor_ref;
/* Class: deviceSector (_exports_deviceSector) */
// jsnapi_registerclass
Napi::Function _exports_deviceSector_ctor = _exports_deviceSector_inst::GetClass(env);
exports.Set("deviceSector", _exports_deviceSector_ctor);
if (SWIGTYPE_p_deviceSector->clientdata == nullptr) {
  SWIGTYPE_p_deviceSector->clientdata = new size_t(12);
}
Napi::FunctionReference *_exports_deviceSector_ctor_ref = new Napi::FunctionReference();
*_exports_deviceSector_ctor_ref = Napi::Persistent(_exports_deviceSector_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[12] = _exports_deviceSector_ctor_ref;
/* Class: externalLoader (_exports_externalLoader) */
// jsnapi_registerclass
Napi::Function _exports_externalLoader_ctor = _exports_externalLoader_inst::GetClass(env);
exports.Set("externalLoader", _exports_externalLoader_ctor);
if (SWIGTYPE_p_externalLoader->clientdata == nullptr) {
  SWIGTYPE_p_externalLoader->clientdata = new size_t(13);
}
Napi::FunctionReference *_exports_externalLoader_ctor_ref = new Napi::FunctionReference();
*_exports_externalLoader_ctor_ref = Napi::Persistent(_exports_externalLoader_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[13] = _exports_externalLoader_ctor_ref;
/* Class: externalStorageInfo (_exports_externalStorageInfo) */
// jsnapi_registerclass
Napi::Function _exports_externalStorageInfo_ctor = _exports_externalStorageInfo_inst::GetClass(env);
exports.Set("externalStorageInfo", _exports_externalStorageInfo_ctor);
if (SWIGTYPE_p_externalStorageInfo->clientdata == nullptr) {
  SWIGTYPE_p_externalStorageInfo->clientdata = new size_t(14);
}
Napi::FunctionReference *_exports_externalStorageInfo_ctor_ref = new Napi::FunctionReference();
*_exports_externalStorageInfo_ctor_ref = Napi::Persistent(_exports_externalStorageInfo_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[14] = _exports_externalStorageInfo_ctor_ref;
/* Class: dfuDeviceInfoArray (_exports_dfuDeviceInfoArray) */
// jsnapi_registerclass
Napi::Function _exports_dfuDeviceInfoArray_ctor = _exports_dfuDeviceInfoArray_inst::GetClass(env);
exports.Set("dfuDeviceInfoArray", _exports_dfuDeviceInfoArray_ctor);
if (SWIGTYPE_p_dfuDeviceInfoArray->clientdata == nullptr) {
  SWIGTYPE_p_dfuDeviceInfoArray->clientdata = new size_t(15);
}
Napi::FunctionReference *_exports_dfuDeviceInfoArray_ctor_ref = new Napi::FunctionReference();
*_exports_dfuDeviceInfoArray_ctor_ref = Napi::Persistent(_exports_dfuDeviceInfoArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[15] = _exports_dfuDeviceInfoArray_ctor_ref;
/* Class: dfuDeviceInfoPtr (_exports_dfuDeviceInfoPtr) */
// jsnapi_registerclass
Napi::Function _exports_dfuDeviceInfoPtr_ctor = _exports_dfuDeviceInfoPtr_inst::GetClass(env);
exports.Set("dfuDeviceInfoPtr", _exports_dfuDeviceInfoPtr_ctor);
if (SWIGTYPE_p_p_dfuDeviceInfo->clientdata == nullptr) {
  SWIGTYPE_p_p_dfuDeviceInfo->clientdata = new size_t(16);
}
Napi::FunctionReference *_exports_dfuDeviceInfoPtr_ctor_ref = new Napi::FunctionReference();
*_exports_dfuDeviceInfoPtr_ctor_ref = Napi::Persistent(_exports_dfuDeviceInfoPtr_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[16] = _exports_dfuDeviceInfoPtr_ctor_ref;


  /* enable inheritance */
  
Napi::Value jsObjectValue, jsSetProtoValue;
Napi::Object jsObject;
Napi::Function setProto;
NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
setProto = jsSetProtoValue.As<Napi::Function>();



  /* setup inheritances */
  
// Inheritance for _exports_dfuDeviceInfo (dfuDeviceInfo) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_dfuDeviceInfo_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_dfuDeviceInfo_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_usartConnectParameters (usartConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_usartConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_usartConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_dfuConnectParameters (dfuConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_dfuConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_dfuConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_spiConnectParameters (spiConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_spiConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_spiConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_canConnectParameters (canConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_canConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_canConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_i2cConnectParameters (i2cConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_i2cConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_i2cConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_frequencies (frequencies) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_frequencies_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_frequencies_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_debugConnectParameters (debugConnectParameters) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_debugConnectParameters_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_debugConnectParameters_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_displayCallBacks (displayCallBacks) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_displayCallBacks_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_displayCallBacks_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_segmentData_C (segmentData_C) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_segmentData_C_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_segmentData_C_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_fileData_C (fileData_C) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_fileData_C_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_fileData_C_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_generalInf (generalInf) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_generalInf_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_generalInf_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_deviceSector (deviceSector) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_deviceSector_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_deviceSector_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_externalLoader (externalLoader) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_externalLoader_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_externalLoader_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_externalStorageInfo (externalStorageInfo) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_externalStorageInfo_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_externalStorageInfo_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_dfuDeviceInfoArray (dfuDeviceInfoArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_dfuDeviceInfoArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_dfuDeviceInfoArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_dfuDeviceInfoPtr (dfuDeviceInfoPtr) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_dfuDeviceInfoPtr_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_dfuDeviceInfoPtr_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_VER_LEVEL_NONE_get, JS_veto_set_variable>("CUBEPROGRAMMER_VER_LEVEL_NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_VER_LEVEL_ONE_get, JS_veto_set_variable>("CUBEPROGRAMMER_VER_LEVEL_ONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_VER_LEVEL_TWO_get, JS_veto_set_variable>("CUBEPROGRAMMER_VER_LEVEL_TWO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_VER_LEVEL_DEBUG_get, JS_veto_set_variable>("CUBEPROGRAMMER_VER_LEVEL_DEBUG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_NO_PROGRESS_BAR_get, JS_veto_set_variable>("CUBEPROGRAMMER_NO_PROGRESS_BAR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_NO_ERROR_get, JS_veto_set_variable>("CUBEPROGRAMMER_NO_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NOT_CONNECTED_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NOT_CONNECTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NO_DEVICE_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NO_DEVICE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_CONNECTION_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_CONNECTION");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NO_FILE_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NO_FILE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NOT_SUPPORTED_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NOT_SUPPORTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_INTERFACE_NOT_SUPPORTED_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_INTERFACE_NOT_SUPPORTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NO_MEM_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NO_MEM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_WRONG_PARAM_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_WRONG_PARAM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_READ_MEM_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_READ_MEM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_WRITE_MEM_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_WRITE_MEM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_ERASE_MEM_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_ERASE_MEM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_UNSUPPORTED_FILE_FORMAT_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_UNSUPPORTED_FILE_FORMAT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_REFRESH_REQUIRED_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_REFRESH_REQUIRED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_NO_SECURITY_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_NO_SECURITY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_CHANGE_FREQ_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_CHANGE_FREQ");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_RDP_ENABLED_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_RDP_ENABLED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CUBEPROGRAMMER_ERROR_OTHER_get, JS_veto_set_variable>("CUBEPROGRAMMER_ERROR_OTHER");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_Flash_Size_1KB_get, JS_veto_set_variable>("Flash_Size_1KB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_Flash_Size_512KB_get, JS_veto_set_variable>("Flash_Size_512KB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_Flash_Size_256KB_get, JS_veto_set_variable>("Flash_Size_256KB");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_FIRST_INSTALL_ACTIVE_get, JS_veto_set_variable>("FIRST_INSTALL_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_FIRST_INSTALL_NOT_ACTIVE_get, JS_veto_set_variable>("FIRST_INSTALL_NOT_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_START_STACK_ACTIVE_get, JS_veto_set_variable>("START_STACK_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_START_STACK_NOT_ACTIVE_get, JS_veto_set_variable>("START_STACK_NOT_ACTIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_VERIFY_FILE_DOWLOAD_FILE_get, JS_veto_set_variable>("VERIFY_FILE_DOWLOAD_FILE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_DO_NOT_VERIFY_DOWLOAD_FILE_get, JS_veto_set_variable>("DO_NOT_VERIFY_DOWLOAD_FILE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_EVEN_get, JS_veto_set_variable>("EVEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_ODD_get, JS_veto_set_variable>("ODD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_NONE_get, JS_veto_set_variable>("NONE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_OFF_get, JS_veto_set_variable>("OFF");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_HARDWARE_get, JS_veto_set_variable>("HARDWARE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SOFTWARE_get, JS_veto_set_variable>("SOFTWARE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SOFTWARE_RESET_get, JS_veto_set_variable>("SOFTWARE_RESET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_HARDWARE_RESET_get, JS_veto_set_variable>("HARDWARE_RESET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CORE_RESET_get, JS_veto_set_variable>("CORE_RESET");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_NORMAL_MODE_get, JS_veto_set_variable>("NORMAL_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_HOTPLUG_MODE_get, JS_veto_set_variable>("HOTPLUG_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_UNDER_RESET_MODE_get, JS_veto_set_variable>("UNDER_RESET_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_POWER_DOWN_MODE_get, JS_veto_set_variable>("POWER_DOWN_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_PRE_RESET_MODE_get, JS_veto_set_variable>("PRE_RESET_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_hwRstPulse_MODE_get, JS_veto_set_variable>("hwRstPulse_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_JTAG_get, JS_veto_set_variable>("JTAG");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SWD_get, JS_veto_set_variable>("SWD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_STLINK_INTERFACE_get, JS_veto_set_variable>("STLINK_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_USART_INTERFACE_get, JS_veto_set_variable>("USART_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_USB_INTERFACE_get, JS_veto_set_variable>("USB_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_SPI_INTERFACE_get, JS_veto_set_variable>("SPI_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_I2C_INTERFACE_get, JS_veto_set_variable>("I2C_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CAN_INTERFACE_get, JS_veto_set_variable>("CAN_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_JLINK_INTERFACE_get, JS_veto_set_variable>("JLINK_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getStLinkList", _wrap_getStLinkList);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getStLinkEnumerationList", _wrap_getStLinkEnumerationList);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectStLink", _wrap_connectStLink);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("reset", _wrap_reset);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getUsartList", _wrap_getUsartList);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectUsartBootloader", _wrap_connectUsartBootloader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("sendByteUart", _wrap_sendByteUart);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getDfuDeviceList", _wrap_getDfuDeviceList);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectDfuBootloader", _wrap_connectDfuBootloader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectDfuBootloader2", _wrap_connectDfuBootloader2);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectSpiBootloader", _wrap_connectSpiBootloader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectCanBootloader", _wrap_connectCanBootloader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("connectI2cBootloader", _wrap_connectI2cBootloader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("setDisplayCallbacks", _wrap_setDisplayCallbacks);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("setVerbosityLevel", _wrap_setVerbosityLevel);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("checkDeviceConnection", _wrap_checkDeviceConnection);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getDeviceGeneralInf", _wrap_getDeviceGeneralInf);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("readMemory", _wrap_readMemory);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("writeMemory", _wrap_writeMemory);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("editSector", _wrap_editSector);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("downloadFile", _wrap_downloadFile);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("execute", _wrap_execute);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("massErase", _wrap_massErase);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("sectorErase", _wrap_sectorErase);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("readUnprotect", _wrap_readUnprotect);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getCancelPointer", _wrap_getCancelPointer);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("fileOpen", _wrap_fileOpen);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("freeFileData", _wrap_freeFileData);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("freeLibraryMemory", _wrap_freeLibraryMemory);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("verify", _wrap_verify);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("saveFileToFile", _wrap_saveFileToFile);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("saveMemoryToFile", _wrap_saveMemoryToFile);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("disconnect", _wrap_disconnect);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("deleteInterfaceList", _wrap_deleteInterfaceList);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("automaticMode", _wrap_automaticMode);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getStorageStructure", _wrap_getStorageStructure);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("sendOptionBytesCmd", _wrap_sendOptionBytesCmd);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("initOptionBytesInterface", _wrap_initOptionBytesInterface);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("obDisplay", _wrap_obDisplay);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("setLoadersPath", _wrap_setLoadersPath);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("setExternalLoaderPath", _wrap_setExternalLoaderPath);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getExternalLoaders", _wrap_getExternalLoaders);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("removeExternalLoader", _wrap_removeExternalLoader);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("deleteLoaders", _wrap_deleteLoaders);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getUID64", _wrap_getUID64);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("firmwareDelete", _wrap_firmwareDelete);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("firmwareUpgrade", _wrap_firmwareUpgrade);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("startWirelessStack", _wrap_startWirelessStack);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("updateAuthKey", _wrap_updateAuthKey);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("authKeyLock", _wrap_authKeyLock);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("writeUserKey", _wrap_writeUserKey);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("antiRollBack", _wrap_antiRollBack);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("startFus", _wrap_startFus);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("programSsp", _wrap_programSsp);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmFirmwareID", _wrap_getHsmFirmwareID);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmCounter", _wrap_getHsmCounter);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmState", _wrap_getHsmState);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmVersion", _wrap_getHsmVersion);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmType", _wrap_getHsmType);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("getHsmLicense", _wrap_getHsmLicense);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("LoadDll", _wrap_LoadDll);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(vsomeip, Init)
