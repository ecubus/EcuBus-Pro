{"version":3,"file":"plugin.js","mappings":"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","sources":["webpack://ecubuspro/./node_modules/workerpool/src/Promise.js","webpack://ecubuspro/external node-commonjs \"worker_threads\"","webpack://ecubuspro/./node_modules/workerpool/src/Pool.js","webpack://ecubuspro/external node-commonjs \"child_process\"","webpack://ecubuspro/./node_modules/workerpool/src/generated/embeddedWorker.js","webpack://ecubuspro/./node_modules/workerpool/src/transfer.js","webpack://ecubuspro/./node_modules/workerpool/src/environment.js","webpack://ecubuspro/./node_modules/workerpool/src/worker.js","webpack://ecubuspro/./node_modules/workerpool/src/debug-port-allocator.js","webpack://ecubuspro/./node_modules/workerpool/src/index.js","webpack://ecubuspro/./node_modules/workerpool/src/WorkerHandler.js","webpack://ecubuspro/external node-commonjs \"os\"","webpack://ecubuspro/./node_modules/workerpool/src/validateOptions.js","webpack://ecubuspro/webpack/bootstrap","webpack://ecubuspro/webpack/runtime/define property getters","webpack://ecubuspro/webpack/runtime/hasOwnProperty shorthand","webpack://ecubuspro/webpack/runtime/make namespace object","webpack://ecubuspro/./src/main/plugin-sdk/index.ts"],"sourcesContent":["'use strict';\n\n/**\n * Promise\n *\n * Inspired by https://gist.github.com/RubaXa/8501359 from RubaXa <trash@rubaxa.org>\n * @template T\n * @template [E=Error]\n * @param {Function} handler   Called as handler(resolve: Function, reject: Function)\n * @param {Promise} [parent]   Parent promise for propagation of cancel and timeout\n */\nfunction Promise(handler, parent) {\n  var me = this;\n\n  if (!(this instanceof Promise)) {\n    throw new SyntaxError('Constructor must be called with the new operator');\n  }\n\n  if (typeof handler !== 'function') {\n    throw new SyntaxError('Function parameter handler(resolve, reject) missing');\n  }\n\n  var _onSuccess = [];\n  var _onFail = [];\n\n  // status\n  /**\n   * @readonly\n   */\n  this.resolved = false;\n  /**\n   * @readonly\n   */\n  this.rejected = false;\n  /**\n   * @readonly\n   */\n  this.pending = true;\n\n  /**\n   * Process onSuccess and onFail callbacks: add them to the queue.\n   * Once the promise is resolved, the function _promise is replace.\n   * @param {Function} onSuccess\n   * @param {Function} onFail\n   * @private\n   */\n  var _process = function (onSuccess, onFail) {\n    _onSuccess.push(onSuccess);\n    _onFail.push(onFail);\n  };\n\n  /**\n   * Add an onSuccess callback and optionally an onFail callback to the Promise\n   * @template TT\n   * @template [TE=never]\n   * @param {(r: T) => TT | PromiseLike<TT>} onSuccess\n   * @param {(r: E) => TE | PromiseLike<TE>} [onFail]\n   * @returns {Promise<TT | TE, any>} promise\n   */\n  this.then = function (onSuccess, onFail) {\n    return new Promise(function (resolve, reject) {\n      var s = onSuccess ? _then(onSuccess, resolve, reject) : resolve;\n      var f = onFail    ? _then(onFail,    resolve, reject) : reject;\n\n      _process(s, f);\n    }, me);\n  };\n\n  /**\n   * Resolve the promise\n   * @param {*} result\n   * @type {Function}\n   */\n  var _resolve = function (result) {\n    // update status\n    me.resolved = true;\n    me.rejected = false;\n    me.pending = false;\n\n    _onSuccess.forEach(function (fn) {\n      fn(result);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onSuccess(result);\n    };\n\n    _resolve = _reject = function () { };\n\n    return me;\n  };\n\n  /**\n   * Reject the promise\n   * @param {Error} error\n   * @type {Function}\n   */\n  var _reject = function (error) {\n    // update status\n    me.resolved = false;\n    me.rejected = true;\n    me.pending = false;\n\n    _onFail.forEach(function (fn) {\n      fn(error);\n    });\n\n    _process = function (onSuccess, onFail) {\n      onFail(error);\n    };\n\n    _resolve = _reject = function () { }\n\n    return me;\n  };\n\n  /**\n   * Cancel the promise. This will reject the promise with a CancellationError\n   * @returns {this} self\n   */\n  this.cancel = function () {\n    if (parent) {\n      parent.cancel();\n    }\n    else {\n      _reject(new CancellationError());\n    }\n\n    return me;\n  };\n\n  /**\n   * Set a timeout for the promise. If the promise is not resolved within\n   * the time, the promise will be cancelled and a TimeoutError is thrown.\n   * If the promise is resolved in time, the timeout is removed.\n   * @param {number} delay     Delay in milliseconds\n   * @returns {this} self\n   */\n  this.timeout = function (delay) {\n    if (parent) {\n      parent.timeout(delay);\n    }\n    else {\n      var timer = setTimeout(function () {\n        _reject(new TimeoutError('Promise timed out after ' + delay + ' ms'));\n      }, delay);\n\n      me.always(function () {\n        clearTimeout(timer);\n      });\n    }\n\n    return me;\n  };\n\n  // attach handler passing the resolve and reject functions\n  handler(function (result) {\n    _resolve(result);\n  }, function (error) {\n    _reject(error);\n  });\n}\n\n/**\n * Execute given callback, then call resolve/reject based on the returned result\n * @param {Function} callback\n * @param {Function} resolve\n * @param {Function} reject\n * @returns {Function}\n * @private\n */\nfunction _then(callback, resolve, reject) {\n  return function (result) {\n    try {\n      var res = callback(result);\n      if (res && typeof res.then === 'function' && typeof res['catch'] === 'function') {\n        // method returned a promise\n        res.then(resolve, reject);\n      }\n      else {\n        resolve(res);\n      }\n    }\n    catch (error) {\n      reject(error);\n    }\n  }\n}\n\n/**\n * Add an onFail callback to the Promise\n * @template TT\n * @param {(error: E) => TT | PromiseLike<TT>} onFail\n * @returns {Promise<T | TT>} promise\n */\nPromise.prototype['catch'] = function (onFail) {\n  return this.then(null, onFail);\n};\n\n// TODO: add support for Promise.catch(Error, callback)\n// TODO: add support for Promise.catch(Error, Error, callback)\n\n/**\n * Execute given callback when the promise either resolves or rejects.\n * @template TT\n * @param {() => Promise<TT>} fn\n * @returns {Promise<TT>} promise\n */\nPromise.prototype.always = function (fn) {\n  return this.then(fn, fn);\n};\n\n/**\n * Create a promise which resolves when all provided promises are resolved,\n * and fails when any of the promises resolves.\n * @param {Promise[]} promises\n * @returns {Promise<any[], any>} promise\n */\nPromise.all = function (promises){\n  return new Promise(function (resolve, reject) {\n    var remaining = promises.length,\n        results = [];\n\n    if (remaining) {\n      promises.forEach(function (p, i) {\n        p.then(function (result) {\n          results[i] = result;\n          remaining--;\n          if (remaining == 0) {\n            resolve(results);\n          }\n        }, function (error) {\n          remaining = 0;\n          reject(error);\n        });\n      });\n    }\n    else {\n      resolve(results);\n    }\n  });\n};\n\n/**\n * Create a promise resolver\n * @returns {{promise: Promise, resolve: Function, reject: Function}} resolver\n */\nPromise.defer = function () {\n  var resolver = {};\n\n  resolver.promise = new Promise(function (resolve, reject) {\n    resolver.resolve = resolve;\n    resolver.reject = reject;\n  });\n\n  return resolver;\n};\n\n/**\n * Create a cancellation error\n * @param {String} [message]\n * @extends Error\n */\nfunction CancellationError(message) {\n  this.message = message || 'promise cancelled';\n  this.stack = (new Error()).stack;\n}\n\nCancellationError.prototype = new Error();\nCancellationError.prototype.constructor = Error;\nCancellationError.prototype.name = 'CancellationError';\n\nPromise.CancellationError = CancellationError;\n\n\n/**\n * Create a timeout error\n * @param {String} [message]\n * @extends Error\n */\nfunction TimeoutError(message) {\n  this.message = message || 'timeout exceeded';\n  this.stack = (new Error()).stack;\n}\n\nTimeoutError.prototype = new Error();\nTimeoutError.prototype.constructor = Error;\nTimeoutError.prototype.name = 'TimeoutError';\n\nPromise.TimeoutError = TimeoutError;\n\n\nexports.Promise = Promise;\n","module.exports = require(\"worker_threads\");","var {Promise} = require('./Promise');\nvar WorkerHandler = require('./WorkerHandler');\nvar environment = require('./environment');\nvar DebugPortAllocator = require('./debug-port-allocator');\nvar DEBUG_PORT_ALLOCATOR = new DebugPortAllocator();\n/**\n * A pool to manage workers, which can be created using the function workerpool.pool.\n *\n * @param {String} [script]   Optional worker script\n * @param {import('./types.js').WorkerPoolOptions} [options]  See docs\n * @constructor\n */\nfunction Pool(script, options) {\n  if (typeof script === 'string') {\n    /** @readonly */\n    this.script = script || null;\n  }\n  else {\n    this.script = null;\n    options = script;\n  }\n\n  /** @private */\n  this.workers = [];  // queue with all workers\n  /** @private */\n  this.tasks = [];    // queue with tasks awaiting execution\n\n  options = options || {};\n\n  /** @readonly */\n  this.forkArgs = Object.freeze(options.forkArgs || []);\n  /** @readonly */\n  this.forkOpts = Object.freeze(options.forkOpts || {});\n  /** @readonly */\n  this.workerOpts = Object.freeze(options.workerOpts || {});\n  /** @readonly */\n  this.workerThreadOpts = Object.freeze(options.workerThreadOpts || {})\n  /** @private */\n  this.debugPortStart = (options.debugPortStart || 43210);\n  /** @readonly @deprecated */\n  this.nodeWorker = options.nodeWorker;\n  /** @readonly\n   * @type {'auto' | 'web' | 'process' | 'thread'}\n   */\n  this.workerType = options.workerType || options.nodeWorker || 'auto'\n  /** @readonly */\n  this.maxQueueSize = options.maxQueueSize || Infinity;\n  /** @readonly */\n  this.workerTerminateTimeout = options.workerTerminateTimeout || 1000;\n\n  /** @readonly */\n  this.onCreateWorker = options.onCreateWorker || (() => null);\n  /** @readonly */\n  this.onTerminateWorker = options.onTerminateWorker || (() => null);\n\n  /** @readonly */\n  this.emitStdStreams = options.emitStdStreams || false\n\n  // configuration\n  if (options && 'maxWorkers' in options) {\n    validateMaxWorkers(options.maxWorkers);\n    /** @readonly */\n    this.maxWorkers = options.maxWorkers;\n  }\n  else {\n    this.maxWorkers = Math.max((environment.cpus || 4) - 1, 1);\n  }\n\n  if (options && 'minWorkers' in options) {\n    if(options.minWorkers === 'max') {\n      /** @readonly */\n      this.minWorkers = this.maxWorkers;\n    } else {\n      validateMinWorkers(options.minWorkers);\n      this.minWorkers = options.minWorkers;\n      this.maxWorkers = Math.max(this.minWorkers, this.maxWorkers);     // in case minWorkers is higher than maxWorkers\n    }\n    this._ensureMinWorkers();\n  }\n\n  /** @private */\n  this._boundNext = this._next.bind(this);\n\n\n  if (this.workerType === 'thread') {\n    WorkerHandler.ensureWorkerThreads();\n  }\n}\n\n\n/**\n * Execute a function on a worker.\n *\n * Example usage:\n *\n *   var pool = new Pool()\n *\n *   // call a function available on the worker\n *   pool.exec('fibonacci', [6])\n *\n *   // offload a function\n *   function add(a, b) {\n *     return a + b\n *   };\n *   pool.exec(add, [2, 4])\n *       .then(function (result) {\n *         console.log(result); // outputs 6\n *       })\n *       .catch(function(error) {\n *         console.log(error);\n *       });\n * @template { (...args: any[]) => any } T\n * @param {String | T} method  Function name or function.\n *                                    If `method` is a string, the corresponding\n *                                    method on the worker will be executed\n *                                    If `method` is a Function, the function\n *                                    will be stringified and executed via the\n *                                    workers built-in function `run(fn, args)`.\n * @param {Parameters<T> | null} [params]  Function arguments applied when calling the function\n * @param {import('./types.js').ExecOptions} [options]  Options\n * @return {Promise<ReturnType<T>>}\n */\nPool.prototype.exec = function (method, params, options) {\n  // validate type of arguments\n  if (params && !Array.isArray(params)) {\n    throw new TypeError('Array expected as argument \"params\"');\n  }\n\n  if (typeof method === 'string') {\n    var resolver = Promise.defer();\n\n    if (this.tasks.length >= this.maxQueueSize) {\n      throw new Error('Max queue size of ' + this.maxQueueSize + ' reached');\n    }\n\n    // add a new task to the queue\n    var tasks = this.tasks;\n    var task = {\n      method:  method,\n      params:  params,\n      resolver: resolver,\n      timeout: null,\n      options: options\n    };\n    tasks.push(task);\n\n    // replace the timeout method of the Promise with our own,\n    // which starts the timer as soon as the task is actually started\n    var originalTimeout = resolver.promise.timeout;\n    resolver.promise.timeout = function timeout (delay) {\n      if (tasks.indexOf(task) !== -1) {\n        // task is still queued -> start the timer later on\n        task.timeout = delay;\n        return resolver.promise;\n      }\n      else {\n        // task is already being executed -> start timer immediately\n        return originalTimeout.call(resolver.promise, delay);\n      }\n    };\n\n    // trigger task execution\n    this._next();\n\n    return resolver.promise;\n  }\n  else if (typeof method === 'function') {\n    // send stringified function and function arguments to worker\n    return this.exec('run', [String(method), params], options);\n  }\n  else {\n    throw new TypeError('Function or string expected as argument \"method\"');\n  }\n};\n\n/**\n * Create a proxy for current worker. Returns an object containing all\n * methods available on the worker. All methods return promises resolving the methods result.\n * @template { { [k: string]: (...args: any[]) => any } } T\n * @return {Promise<import('./types.js').Proxy<T>, Error>} Returns a promise which resolves with a proxy object\n */\nPool.prototype.proxy = function () {\n  if (arguments.length > 0) {\n    throw new Error('No arguments expected');\n  }\n\n  var pool = this;\n  return this.exec('methods')\n      .then(function (methods) {\n        var proxy = {};\n\n        methods.forEach(function (method) {\n          proxy[method] = function () {\n            return pool.exec(method, Array.prototype.slice.call(arguments));\n          }\n        });\n\n        return proxy;\n      });\n};\n\n/**\n * Creates new array with the results of calling a provided callback function\n * on every element in this array.\n * @param {Array} array\n * @param {function} callback  Function taking two arguments:\n *                             `callback(currentValue, index)`\n * @return {Promise.<Array>} Returns a promise which resolves  with an Array\n *                           containing the results of the callback function\n *                           executed for each of the array elements.\n */\n/* TODO: implement map\nPool.prototype.map = function (array, callback) {\n};\n*/\n\n/**\n * Grab the first task from the queue, find a free worker, and assign the\n * worker to the task.\n * @private\n */\nPool.prototype._next = function () {\n  if (this.tasks.length > 0) {\n    // there are tasks in the queue\n\n    // find an available worker\n    var worker = this._getWorker();\n    if (worker) {\n      // get the first task from the queue\n      var me = this;\n      var task = this.tasks.shift();\n\n      // check if the task is still pending (and not cancelled -> promise rejected)\n      if (task.resolver.promise.pending) {\n        // send the request to the worker\n        var promise = worker.exec(task.method, task.params, task.resolver, task.options)\n          .then(me._boundNext)\n          .catch(function () {\n            // if the worker crashed and terminated, remove it from the pool\n            if (worker.terminated) {\n              return me._removeWorker(worker);\n            }\n          }).then(function() {\n            me._next(); // trigger next task in the queue\n          });\n\n        // start queued timer now\n        if (typeof task.timeout === 'number') {\n          promise.timeout(task.timeout);\n        }\n      } else {\n        // The task taken was already complete (either rejected or resolved), so just trigger next task in the queue\n        me._next();\n      }\n    }\n  }\n};\n\n/**\n * Get an available worker. If no worker is available and the maximum number\n * of workers isn't yet reached, a new worker will be created and returned.\n * If no worker is available and the maximum number of workers is reached,\n * null will be returned.\n *\n * @return {WorkerHandler | null} worker\n * @private\n */\nPool.prototype._getWorker = function() {\n  // find a non-busy worker\n  var workers = this.workers;\n  for (var i = 0; i < workers.length; i++) {\n    var worker = workers[i];\n    if (worker.busy() === false) {\n      return worker;\n    }\n  }\n\n  if (workers.length < this.maxWorkers) {\n    // create a new worker\n    worker = this._createWorkerHandler();\n    workers.push(worker);\n    return worker;\n  }\n\n  return null;\n};\n\n/**\n * Remove a worker from the pool.\n * Attempts to terminate worker if not already terminated, and ensures the minimum\n * pool size is met.\n * @param {WorkerHandler} worker\n * @return {Promise<WorkerHandler>}\n * @private\n */\nPool.prototype._removeWorker = function(worker) {\n  var me = this;\n\n  DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n  // _removeWorker will call this, but we need it to be removed synchronously\n  this._removeWorkerFromList(worker);\n  // If minWorkers set, spin up new workers to replace the crashed ones\n  this._ensureMinWorkers();\n  // terminate the worker (if not already terminated)\n  return new Promise(function(resolve, reject) {\n    worker.terminate(false, function(err) {\n      me.onTerminateWorker({\n        forkArgs: worker.forkArgs,\n        forkOpts: worker.forkOpts,\n        workerThreadOpts: worker.workerThreadOpts,\n        script: worker.script\n      });\n      if (err) {\n        reject(err);\n      } else {\n        resolve(worker);\n      }\n    });\n  });\n};\n\n/**\n * Remove a worker from the pool list.\n * @param {WorkerHandler} worker\n * @private\n */\nPool.prototype._removeWorkerFromList = function(worker) {\n  // remove from the list with workers\n  var index = this.workers.indexOf(worker);\n  if (index !== -1) {\n    this.workers.splice(index, 1);\n  }\n};\n\n/**\n * Close all active workers. Tasks currently being executed will be finished first.\n * @param {boolean} [force=false]   If false (default), the workers are terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the workers will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<void, Error>}\n */\nPool.prototype.terminate = function (force, timeout) {\n  var me = this;\n\n  // cancel any pending tasks\n  this.tasks.forEach(function (task) {\n    task.resolver.reject(new Error('Pool terminated'));\n  });\n  this.tasks.length = 0;\n\n  var f = function (worker) {\n    DEBUG_PORT_ALLOCATOR.releasePort(worker.debugPort);\n    this._removeWorkerFromList(worker);\n  };\n  var removeWorker = f.bind(this);\n\n  var promises = [];\n  var workers = this.workers.slice();\n  workers.forEach(function (worker) {\n    var termPromise = worker.terminateAndNotify(force, timeout)\n      .then(removeWorker)\n      .always(function() {\n        me.onTerminateWorker({\n          forkArgs: worker.forkArgs,\n          forkOpts: worker.forkOpts,\n          workerThreadOpts: worker.workerThreadOpts,\n          script: worker.script\n        });\n      });\n    promises.push(termPromise);\n  });\n  return Promise.all(promises);\n};\n\n/**\n * Retrieve statistics on tasks and workers.\n * @return {{totalWorkers: number, busyWorkers: number, idleWorkers: number, pendingTasks: number, activeTasks: number}} Returns an object with statistics\n */\nPool.prototype.stats = function () {\n  var totalWorkers = this.workers.length;\n  var busyWorkers = this.workers.filter(function (worker) {\n    return worker.busy();\n  }).length;\n\n  return {\n    totalWorkers:  totalWorkers,\n    busyWorkers:   busyWorkers,\n    idleWorkers:   totalWorkers - busyWorkers,\n\n    pendingTasks:  this.tasks.length,\n    activeTasks:   busyWorkers\n  };\n};\n\n/**\n * Ensures that a minimum of minWorkers is up and running\n * @private\n */\nPool.prototype._ensureMinWorkers = function() {\n  if (this.minWorkers) {\n    for(var i = this.workers.length; i < this.minWorkers; i++) {\n      this.workers.push(this._createWorkerHandler());\n    }\n  }\n};\n\n/**\n * Helper function to create a new WorkerHandler and pass all options.\n * @return {WorkerHandler}\n * @private\n */\nPool.prototype._createWorkerHandler = function () {\n  const overriddenParams = this.onCreateWorker({\n    forkArgs: this.forkArgs,\n    forkOpts: this.forkOpts,\n    workerOpts: this.workerOpts,\n    workerThreadOpts: this.workerThreadOpts,\n    script: this.script\n  }) || {};\n\n  return new WorkerHandler(overriddenParams.script || this.script, {\n    forkArgs: overriddenParams.forkArgs || this.forkArgs,\n    forkOpts: overriddenParams.forkOpts || this.forkOpts,\n    workerOpts: overriddenParams.workerOpts || this.workerOpts,\n    workerThreadOpts: overriddenParams.workerThreadOpts || this.workerThreadOpts,\n    debugPort: DEBUG_PORT_ALLOCATOR.nextAvailableStartingAt(this.debugPortStart),\n    workerType: this.workerType,\n    workerTerminateTimeout: this.workerTerminateTimeout,\n    emitStdStreams: this.emitStdStreams,\n  });\n}\n\n/**\n * Ensure that the maxWorkers option is an integer >= 1\n * @param {*} maxWorkers\n * @returns {boolean} returns true maxWorkers has a valid value\n */\nfunction validateMaxWorkers(maxWorkers) {\n  if (!isNumber(maxWorkers) || !isInteger(maxWorkers) || maxWorkers < 1) {\n    throw new TypeError('Option maxWorkers must be an integer number >= 1');\n  }\n}\n\n/**\n * Ensure that the minWorkers option is an integer >= 0\n * @param {*} minWorkers\n * @returns {boolean} returns true when minWorkers has a valid value\n */\nfunction validateMinWorkers(minWorkers) {\n  if (!isNumber(minWorkers) || !isInteger(minWorkers) || minWorkers < 0) {\n    throw new TypeError('Option minWorkers must be an integer number >= 0');\n  }\n}\n\n/**\n * Test whether a variable is a number\n * @param {*} value\n * @returns {boolean} returns true when value is a number\n */\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Test whether a number is an integer\n * @param {number} value\n * @returns {boolean} Returns true if value is an integer\n */\nfunction isInteger(value) {\n  return Math.round(value) == value;\n}\n\nmodule.exports = Pool;\n","module.exports = require(\"child_process\");","/**\n * embeddedWorker.js contains an embedded version of worker.js.\n * This file is automatically generated,\n * changes made in this file will be overwritten.\n */\nmodule.exports = \"!function(e,n){\\\"object\\\"==typeof exports&&\\\"undefined\\\"!=typeof module?module.exports=n():\\\"function\\\"==typeof define&&define.amd?define(n):(e=\\\"undefined\\\"!=typeof globalThis?globalThis:e||self).worker=n()}(this,(function(){\\\"use strict\\\";function e(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,\\\"default\\\")?e.default:e}var n={};var t=function(e,n){this.message=e,this.transfer=n};return function(e){var n=t,r={exit:function(){}};if(\\\"undefined\\\"!=typeof self&&\\\"function\\\"==typeof postMessage&&\\\"function\\\"==typeof addEventListener)r.on=function(e,n){addEventListener(e,(function(e){n(e.data)}))},r.send=function(e){postMessage(e)};else{if(\\\"undefined\\\"==typeof process)throw new Error(\\\"Script must be executed as a worker\\\");var o;try{o=require(\\\"worker_threads\\\")}catch(e){if(\\\"object\\\"!=typeof e||null===e||\\\"MODULE_NOT_FOUND\\\"!==e.code)throw e}if(o&&null!==o.parentPort){var i=o.parentPort;r.send=i.postMessage.bind(i),r.on=i.on.bind(i),r.exit=process.exit.bind(process)}else r.on=process.on.bind(process),r.send=function(e){process.send(e)},r.on(\\\"disconnect\\\",(function(){process.exit(1)})),r.exit=process.exit.bind(process)}function s(e){return Object.getOwnPropertyNames(e).reduce((function(n,t){return Object.defineProperty(n,t,{value:e[t],enumerable:!0})}),{})}function d(e){return e&&\\\"function\\\"==typeof e.then&&\\\"function\\\"==typeof e.catch}r.methods={},r.methods.run=function(e,n){var t=new Function(\\\"return (\\\"+e+\\\").apply(null, arguments);\\\");return t.apply(t,n)},r.methods.methods=function(){return Object.keys(r.methods)},r.terminationHandler=void 0,r.cleanupAndExit=function(e){var n=function(){r.exit(e)};if(!r.terminationHandler)return n();var t=r.terminationHandler(e);d(t)?t.then(n,n):n()};var u=null;r.on(\\\"message\\\",(function(e){if(\\\"__workerpool-terminate__\\\"===e)return r.cleanupAndExit(0);try{var t=r.methods[e.method];if(!t)throw new Error('Unknown method \\\"'+e.method+'\\\"');u=e.id;var o=t.apply(t,e.params);d(o)?o.then((function(t){t instanceof n?r.send({id:e.id,result:t.message,error:null},t.transfer):r.send({id:e.id,result:t,error:null}),u=null})).catch((function(n){r.send({id:e.id,result:null,error:s(n)}),u=null})):(o instanceof n?r.send({id:e.id,result:o.message,error:null},o.transfer):r.send({id:e.id,result:o,error:null}),u=null)}catch(n){r.send({id:e.id,result:null,error:s(n)})}})),r.register=function(e,n){if(e)for(var t in e)e.hasOwnProperty(t)&&(r.methods[t]=e[t]);n&&(r.terminationHandler=n.onTerminate),r.send(\\\"ready\\\")},r.emit=function(e){if(u){if(e instanceof n)return void r.send({id:u,isEvent:!0,payload:e.message},e.transfer);r.send({id:u,isEvent:!0,payload:e})}},e.add=r.register,e.emit=r.emit}(n),e(n)}));\\n//# sourceMappingURL=worker.min.js.map\\n\";\n","/**\n * The helper class for transferring data from the worker to the main thread.\n *\n * @param {Object} message The object to deliver to the main thread.\n * @param {Object[]} transfer An array of transferable Objects to transfer ownership of.\n */\nfunction Transfer(message, transfer) {\n  this.message = message;\n  this.transfer = transfer;\n}\n\nmodule.exports = Transfer;\n","\n// source: https://github.com/flexdinesh/browser-or-node\n// source: https://github.com/mozilla/pdf.js/blob/7ea0e40e588864cd938d1836ec61f1928d3877d3/src/shared/util.js#L24\nvar isNode = function (nodeProcess) {\n  return (\n    typeof nodeProcess !== 'undefined' &&\n    nodeProcess.versions != null &&\n    nodeProcess.versions.node != null &&\n    nodeProcess + '' === '[object process]'\n  );\n}\nmodule.exports.isNode = isNode\n\n// determines the JavaScript platform: browser or node\nmodule.exports.platform = typeof process !== 'undefined' && isNode(process)\n  ? 'node'\n  : 'browser';\n\n// determines whether the code is running in main thread or not\n// note that in node.js we have to check both worker_thread and child_process\nvar worker_threads = module.exports.platform === 'node' && require('worker_threads');\nmodule.exports.isMainThread = module.exports.platform === 'node'\n  ? ((!worker_threads || worker_threads.isMainThread) && !process.connected)\n  : typeof Window !== 'undefined';\n\n// determines the number of cpus available\nmodule.exports.cpus = module.exports.platform === 'browser'\n  ? self.navigator.hardwareConcurrency\n  : require('os').cpus().length;\n\n","/**\n * worker must be started as a child process or a web worker.\n * It listens for RPC messages from the parent process.\n */\nvar Transfer = require('./transfer');\n\n/**\n * Special message sent by parent which causes the worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\n// var nodeOSPlatform = require('./environment').nodeOSPlatform;\n\n// create a worker API for sending and receiving messages which works both on\n// node.js and in the browser\nvar worker = {\n  exit: function() {}\n};\nif (typeof self !== 'undefined' && typeof postMessage === 'function' && typeof addEventListener === 'function') {\n  // worker in the browser\n  worker.on = function (event, callback) {\n    addEventListener(event, function (message) {\n      callback(message.data);\n    })\n  };\n  worker.send = function (message) {\n    postMessage(message);\n  };\n}\nelse if (typeof process !== 'undefined') {\n  // node.js\n\n  var WorkerThreads;\n  try {\n    WorkerThreads = require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads, fallback to sub-process based workers\n    } else {\n      throw error;\n    }\n  }\n\n  if (WorkerThreads &&\n    /* if there is a parentPort, we are in a WorkerThread */\n    WorkerThreads.parentPort !== null) {\n    var parentPort  = WorkerThreads.parentPort;\n    worker.send = parentPort.postMessage.bind(parentPort);\n    worker.on = parentPort.on.bind(parentPort);\n    worker.exit = process.exit.bind(process);\n  } else {\n    worker.on = process.on.bind(process);\n    // ignore transfer argument since it is not supported by process\n    worker.send = function (message) {\n      process.send(message);\n    };\n    // register disconnect handler only for subprocess worker to exit when parent is killed unexpectedly\n    worker.on('disconnect', function () {\n      process.exit(1);\n    });\n    worker.exit = process.exit.bind(process);\n  }\n}\nelse {\n  throw new Error('Script must be executed as a worker');\n}\n\nfunction convertError(error) {\n  return Object.getOwnPropertyNames(error).reduce(function(product, name) {\n    return Object.defineProperty(product, name, {\n\tvalue: error[name],\n\tenumerable: true\n    });\n  }, {});\n}\n\n/**\n * Test whether a value is a Promise via duck typing.\n * @param {*} value\n * @returns {boolean} Returns true when given value is an object\n *                    having functions `then` and `catch`.\n */\nfunction isPromise(value) {\n  return value && (typeof value.then === 'function') && (typeof value.catch === 'function');\n}\n\n// functions available externally\nworker.methods = {};\n\n/**\n * Execute a function with provided arguments\n * @param {String} fn     Stringified function\n * @param {Array} [args]  Function arguments\n * @returns {*}\n */\nworker.methods.run = function run(fn, args) {\n  var f = new Function('return (' + fn + ').apply(null, arguments);');\n  return f.apply(f, args);\n};\n\n/**\n * Get a list with methods available on this worker\n * @return {String[]} methods\n */\nworker.methods.methods = function methods() {\n  return Object.keys(worker.methods);\n};\n\n/**\n * Custom handler for when the worker is terminated.\n */\nworker.terminationHandler = undefined;\n\n/**\n * Cleanup and exit the worker.\n * @param {Number} code \n * @returns \n */\nworker.cleanupAndExit = function(code) {\n  var _exit = function() {\n    worker.exit(code);\n  }\n\n  if(!worker.terminationHandler) {\n    return _exit();\n  }\n\n  var result = worker.terminationHandler(code);\n  if (isPromise(result)) {\n    result.then(_exit, _exit);\n  } else {\n    _exit();\n  }\n}\n\nvar currentRequestId = null;\n\nworker.on('message', function (request) {\n  if (request === TERMINATE_METHOD_ID) {\n    return worker.cleanupAndExit(0);\n  }\n  try {\n    var method = worker.methods[request.method];\n\n    if (method) {\n      currentRequestId = request.id;\n      \n      // execute the function\n      var result = method.apply(method, request.params);\n\n      if (isPromise(result)) {\n        // promise returned, resolve this and then return\n        result\n            .then(function (result) {\n              if (result instanceof Transfer) {\n                worker.send({\n                  id: request.id,\n                  result: result.message,\n                  error: null\n                }, result.transfer);\n              } else {\n                worker.send({\n                  id: request.id,\n                  result: result,\n                  error: null\n                });\n              }\n              currentRequestId = null;\n            })\n            .catch(function (err) {\n              worker.send({\n                id: request.id,\n                result: null,\n                error: convertError(err)\n              });\n              currentRequestId = null;\n            });\n      }\n      else {\n        // immediate result\n        if (result instanceof Transfer) {\n          worker.send({\n            id: request.id,\n            result: result.message,\n            error: null\n          }, result.transfer);\n        } else {\n          worker.send({\n            id: request.id,\n            result: result,\n            error: null\n          });\n        }\n\n        currentRequestId = null;\n      }\n    }\n    else {\n      throw new Error('Unknown method \"' + request.method + '\"');\n    }\n  }\n  catch (err) {\n    worker.send({\n      id: request.id,\n      result: null,\n      error: convertError(err)\n    });\n  }\n});\n\n/**\n * Register methods to the worker\n * @param {Object} [methods]\n * @param {import('./types.js').WorkerRegisterOptions} [options]\n */\nworker.register = function (methods, options) {\n\n  if (methods) {\n    for (var name in methods) {\n      if (methods.hasOwnProperty(name)) {\n        worker.methods[name] = methods[name];\n      }\n    }\n  }\n\n  if (options) {\n    worker.terminationHandler = options.onTerminate;\n  }\n\n  worker.send('ready');\n};\n\nworker.emit = function (payload) {\n  {\n    if (payload instanceof Transfer) {\n      worker.send({\n        id: currentRequestId,\n        isEvent: true,\n        payload: payload.message\n      }, payload.transfer);\n      return;\n    }\n\n    worker.send({\n      id: currentRequestId,\n      isEvent: true,\n      payload\n    });\n  }\n};\n\nif (typeof exports !== 'undefined') {\n  exports.add = worker.register;\n  exports.emit = worker.emit;\n}\n","'use strict';\n\nvar MAX_PORTS = 65535;\nmodule.exports = DebugPortAllocator;\nfunction DebugPortAllocator() {\n  this.ports = Object.create(null);\n  this.length = 0;\n}\n\nDebugPortAllocator.prototype.nextAvailableStartingAt = function(starting) {\n  while (this.ports[starting] === true) {\n    starting++;\n  }\n\n  if (starting >= MAX_PORTS) {\n    throw new Error('WorkerPool debug port limit reached: ' + starting + '>= ' + MAX_PORTS );\n  }\n\n  this.ports[starting] = true;\n  this.length++;\n  return starting;\n};\n\nDebugPortAllocator.prototype.releasePort = function(port) {\n  delete this.ports[port];\n  this.length--;\n};\n\n","const {platform, isMainThread, cpus} = require('./environment');\n\n/** @typedef {import(\"./Pool\")} Pool */\n/** @typedef {import(\"./types.js\").WorkerPoolOptions} WorkerPoolOptions */\n/** @typedef {import(\"./types.js\").WorkerRegisterOptions} WorkerRegisterOptions */\n\n/**\n * @template { { [k: string]: (...args: any[]) => any } } T\n * @typedef {import('./types.js').Proxy<T>} Proxy<T>\n */\n\n/**\n * @overload\n * Create a new worker pool\n * @param {WorkerPoolOptions} [script]\n * @returns {Pool} pool\n */\n/**\n * @overload\n * Create a new worker pool\n * @param {string} [script]\n * @param {WorkerPoolOptions} [options]\n * @returns {Pool} pool\n */\nfunction pool(script, options) {\n  var Pool = require('./Pool');\n\n  return new Pool(script, options);\n};\nexports.pool = pool;\n\n/**\n * Create a worker and optionally register a set of methods to the worker.\n * @param {{ [k: string]: (...args: any[]) => any }} [methods]\n * @param {WorkerRegisterOptions} [options]\n */\nfunction worker(methods, options) {\n  var worker = require('./worker');\n  worker.add(methods, options);\n};\nexports.worker = worker;\n\n/**\n * Sends an event to the parent worker pool.\n * @param {any} payload \n */\nfunction workerEmit(payload) {\n  var worker = require('./worker');\n  worker.emit(payload);\n};\nexports.workerEmit = workerEmit;\n\nconst {Promise} = require('./Promise');\nexports.Promise = Promise;\n\nexports.Transfer = require('./transfer');\n\nexports.platform = platform;\nexports.isMainThread = isMainThread;\nexports.cpus = cpus;\n","'use strict';\n\nvar {Promise} = require('./Promise');\nvar environment = require('./environment');\nconst {validateOptions, forkOptsNames, workerThreadOptsNames, workerOptsNames} = require(\"./validateOptions\");\n\n/**\n * Special message sent by parent which causes a child process worker to terminate itself.\n * Not a \"message object\"; this string is the entire message.\n */\nvar TERMINATE_METHOD_ID = '__workerpool-terminate__';\n\nfunction ensureWorkerThreads() {\n  var WorkerThreads = tryRequireWorkerThreads()\n  if (!WorkerThreads) {\n    throw new Error('WorkerPool: workerType = \\'thread\\' is not supported, Node >= 11.7.0 required')\n  }\n\n  return WorkerThreads;\n}\n\n// check whether Worker is supported by the browser\nfunction ensureWebWorker() {\n  // Workaround for a bug in PhantomJS (Or QtWebkit): https://github.com/ariya/phantomjs/issues/14534\n  if (typeof Worker !== 'function' && (typeof Worker !== 'object' || typeof Worker.prototype.constructor !== 'function')) {\n    throw new Error('WorkerPool: Web Workers not supported');\n  }\n}\n\nfunction tryRequireWorkerThreads() {\n  try {\n    return require('worker_threads');\n  } catch(error) {\n    if (typeof error === 'object' && error !== null && error.code === 'MODULE_NOT_FOUND') {\n      // no worker_threads available (old version of node.js)\n      return null;\n    } else {\n      throw error;\n    }\n  }\n}\n\n// get the default worker script\nfunction getDefaultWorker() {\n  if (environment.platform === 'browser') {\n    // test whether the browser supports all features that we need\n    if (typeof Blob === 'undefined') {\n      throw new Error('Blob not supported by the browser');\n    }\n    if (!window.URL || typeof window.URL.createObjectURL !== 'function') {\n      throw new Error('URL.createObjectURL not supported by the browser');\n    }\n\n    // use embedded worker.js\n    var blob = new Blob([require('./generated/embeddedWorker')], {type: 'text/javascript'});\n    return window.URL.createObjectURL(blob);\n  }\n  else {\n    // use external worker.js in current directory\n    return __dirname + '/worker.js';\n  }\n}\n\nfunction setupWorker(script, options) {\n  if (options.workerType === 'web') { // browser only\n    ensureWebWorker();\n    return setupBrowserWorker(script, options.workerOpts, Worker);\n  } else if (options.workerType === 'thread') { // node.js only\n    WorkerThreads = ensureWorkerThreads();\n    return setupWorkerThreadWorker(script, WorkerThreads, options);\n  } else if (options.workerType === 'process' || !options.workerType) { // node.js only\n    return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n  } else { // options.workerType === 'auto' or undefined\n    if (environment.platform === 'browser') {\n      ensureWebWorker();\n      return setupBrowserWorker(script, options.workerOpts, Worker);\n    }\n    else { // environment.platform === 'node'\n      var WorkerThreads = tryRequireWorkerThreads();\n      if (WorkerThreads) {\n        return setupWorkerThreadWorker(script, WorkerThreads, options);\n      } else {\n        return setupProcessWorker(script, resolveForkOptions(options), require('child_process'));\n      }\n    }\n  }\n}\n\nfunction setupBrowserWorker(script, workerOpts, Worker) {\n  // validate the options right before creating the worker (not when creating the pool)\n  validateOptions(workerOpts, workerOptsNames, 'workerOpts')\n\n  // create the web worker\n  var worker = new Worker(script, workerOpts);\n\n  worker.isBrowserWorker = true;\n  // add node.js API to the web worker\n  worker.on = function (event, callback) {\n    this.addEventListener(event, function (message) {\n      callback(message.data);\n    });\n  };\n  worker.send = function (message, transfer) {\n    this.postMessage(message, transfer);\n  };\n  return worker;\n}\n\nfunction setupWorkerThreadWorker(script, WorkerThreads, options) {\n  // validate the options right before creating the worker thread (not when creating the pool)\n  validateOptions(options?.workerThreadOpts, workerThreadOptsNames, 'workerThreadOpts')\n\n  var worker = new WorkerThreads.Worker(script, {\n    stdout: options?.emitStdStreams ?? false, // pipe worker.STDOUT to process.STDOUT if not requested\n    stderr: options?.emitStdStreams ?? false,  // pipe worker.STDERR to process.STDERR if not requested\n    ...options?.workerThreadOpts\n  });\n  worker.isWorkerThread = true;\n  worker.send = function(message, transfer) {\n    this.postMessage(message, transfer);\n  };\n\n  worker.kill = function() {\n    this.terminate();\n    return true;\n  };\n\n  worker.disconnect = function() {\n    this.terminate();\n  };\n\n  if (options?.emitStdStreams) {\n    worker.stdout.on('data', (data) => worker.emit(\"stdout\", data))\n    worker.stderr.on('data', (data) => worker.emit(\"stderr\", data))\n  }\n\n  return worker;\n}\n\nfunction setupProcessWorker(script, options, child_process) {\n  // validate the options right before creating the child process (not when creating the pool)\n  validateOptions(options.forkOpts, forkOptsNames, 'forkOpts')\n\n  // no WorkerThreads, fallback to sub-process based workers\n  var worker = child_process.fork(\n    script,\n    options.forkArgs,\n    options.forkOpts\n  );\n\n  // ignore transfer argument since it is not supported by process\n  var send = worker.send;\n  worker.send = function (message) {\n    return send.call(worker, message);\n  };\n\n  if (options.emitStdStreams) {\n    worker.stdout.on('data', (data) => worker.emit(\"stdout\", data))\n    worker.stderr.on('data', (data) => worker.emit(\"stderr\", data))\n  }\n\n  worker.isChildProcess = true;\n  return worker;\n}\n\n// add debug flags to child processes if the node inspector is active\nfunction resolveForkOptions(opts) {\n  opts = opts || {};\n\n  var processExecArgv = process.execArgv.join(' ');\n  var inspectorActive = processExecArgv.indexOf('--inspect') !== -1;\n  var debugBrk = processExecArgv.indexOf('--debug-brk') !== -1;\n\n  var execArgv = [];\n  if (inspectorActive) {\n    execArgv.push('--inspect=' + opts.debugPort);\n\n    if (debugBrk) {\n      execArgv.push('--debug-brk');\n    }\n  }\n\n  process.execArgv.forEach(function(arg) {\n    if (arg.indexOf('--max-old-space-size') > -1) {\n      execArgv.push(arg)\n    }\n  })\n\n  return Object.assign({}, opts, {\n    forkArgs: opts.forkArgs,\n    forkOpts: Object.assign({}, opts.forkOpts, {\n      execArgv: (opts.forkOpts && opts.forkOpts.execArgv || [])\n      .concat(execArgv),\n      stdio: opts.emitStdStreams ? \"pipe\": undefined\n    })\n  });\n}\n\n/**\n * Converts a serialized error to Error\n * @param {Object} obj Error that has been serialized and parsed to object\n * @return {Error} The equivalent Error.\n */\nfunction objectToError (obj) {\n  var temp = new Error('')\n  var props = Object.keys(obj)\n\n  for (var i = 0; i < props.length; i++) {\n    temp[props[i]] = obj[props[i]]\n  }\n\n  return temp\n}\n\nfunction handleEmittedStdPayload(handler, payload) {\n  // TODO: refactor if parallel task execution gets added\n  if (Object.keys(handler.processing).length !== 1) {\n    return;\n  }\n  var task = Object.values(handler.processing)[0]\n  if (task.options && typeof task.options.on === 'function') {\n    task.options.on(payload);\n  }\n}\n\n/**\n * A WorkerHandler controls a single worker. This worker can be a child process\n * on node.js or a WebWorker in a browser environment.\n * @param {String} [script] If no script is provided, a default worker with a\n *                          function run will be created.\n * @param {import('./types.js').WorkerPoolOptions} [_options] See docs\n * @constructor\n */\nfunction WorkerHandler(script, _options) {\n  var me = this;\n  var options = _options || {};\n\n  this.script = script || getDefaultWorker();\n  this.worker = setupWorker(this.script, options);\n  this.debugPort = options.debugPort;\n  this.forkOpts = options.forkOpts;\n  this.forkArgs = options.forkArgs;\n  this.workerOpts = options.workerOpts;\n  this.workerThreadOpts = options.workerThreadOpts\n  this.workerTerminateTimeout = options.workerTerminateTimeout;\n\n  // The ready message is only sent if the worker.add method is called (And the default script is not used)\n  if (!script) {\n    this.worker.ready = true;\n  }\n\n  // queue for requests that are received before the worker is ready\n  this.requestQueue = [];\n\n  this.worker.on(\"stdout\", function (data) {\n    handleEmittedStdPayload(me, {\"stdout\": data.toString()})\n  })\n  this.worker.on(\"stderr\", function (data) {\n    handleEmittedStdPayload(me, {\"stderr\": data.toString()})\n  })\n\n  this.worker.on('message', function (response) {\n    if (me.terminated) {\n      return;\n    }\n    if (typeof response === 'string' && response === 'ready') {\n      me.worker.ready = true;\n      dispatchQueuedRequests();\n    } else {\n      // find the task from the processing queue, and run the tasks callback\n      var id = response.id;\n      var task = me.processing[id];\n      if (task !== undefined) {\n       \n        if (response.isEvent) {\n          if (task.options && typeof task.options.on === 'function') {\n            this.lastTask=task;\n            task.options.on(response.payload);\n          }\n        } else {\n          // remove the task from the queue\n          delete me.processing[id];\n\n          // test if we need to terminate\n          if (me.terminating === true) {\n            // complete worker termination if all tasks are finished\n            me.terminate();\n          }\n\n          // resolve the task's promise\n          if (response.error) {\n            task.resolver.reject(objectToError(response.error));\n          }\n          else {\n            task.resolver.resolve(response.result);\n          }\n        }\n      }else if(this.lastTask){\n        if (response.isEvent) {\n          if (this.lastTask.options && typeof this.lastTask.options.on === 'function') {\n            this.lastTask.options.on(response.payload);\n          }\n        }\n      }else if(this.globalOn){\n        if (response.isEvent) {\n          if (this.globalOn) {\n            this.globalOn(response.payload);\n          }\n        }\n      }\n    }\n  });\n\n  // reject all running tasks on worker error\n  function onError(error) {\n    me.terminated = true;\n\n    for (var id in me.processing) {\n      if (me.processing[id] !== undefined) {\n        me.processing[id].resolver.reject(error);\n      }\n    }\n    me.processing = Object.create(null);\n  }\n\n  // send all queued requests to worker\n  function dispatchQueuedRequests()\n  {\n    for(const request of me.requestQueue.splice(0)) {\n      me.worker.send(request.message, request.transfer);\n    }\n  }\n\n  var worker = this.worker;\n  // listen for worker messages error and exit\n  this.worker.on('error', onError);\n  this.worker.on('exit', function (exitCode, signalCode) {\n    var message = 'Workerpool Worker terminated Unexpectedly\\n';\n\n    message += '    exitCode: `' + exitCode + '`\\n';\n    message += '    signalCode: `' + signalCode + '`\\n';\n\n    message += '    workerpool.script: `' +  me.script + '`\\n';\n    message += '    spawnArgs: `' +  worker.spawnargs + '`\\n';\n    message += '    spawnfile: `' + worker.spawnfile + '`\\n'\n\n    message += '    stdout: `' + worker.stdout + '`\\n'\n    message += '    stderr: `' + worker.stderr + '`\\n'\n\n    onError(new Error(message));\n  });\n\n  this.processing = Object.create(null); // queue with tasks currently in progress\n\n  this.terminating = false;\n  this.terminated = false;\n  this.cleaning = false;\n  this.terminationHandler = null;\n  this.lastId = 0;\n}\n\n/**\n * Get a list with methods available on the worker.\n * @return {Promise.<String[], Error>} methods\n */\nWorkerHandler.prototype.methods = function () {\n  return this.exec('methods');\n};\n\n/**\n * Execute a method with given parameters on the worker\n * @param {String} method\n * @param {Array} [params]\n * @param {{resolve: Function, reject: Function}} [resolver]\n * @param {import('./types.js').ExecOptions}  [options]\n * @return {Promise.<*, Error>} result\n */\nWorkerHandler.prototype.exec = function(method, params, resolver, options) {\n  if (!resolver) {\n    resolver = Promise.defer();\n  }\n\n  // generate a unique id for the task\n  var id = ++this.lastId;\n\n  // register a new task as being in progress\n  this.processing[id] = {\n    id: id,\n    resolver: resolver,\n    options: options\n  };\n\n  // build a JSON-RPC request\n  var request = {\n    message: {\n      id: id,\n      method: method,\n      params: params\n    },\n    transfer: options && options.transfer\n  };\n\n  if (this.terminated) {\n    resolver.reject(new Error('Worker is terminated'));\n  } else if (this.worker.ready) {\n    // send the request to the worker\n    this.worker.send(request.message, request.transfer);\n  } else {\n    this.requestQueue.push(request);\n  }\n\n  // on cancellation, force the worker to terminate\n  var me = this;\n  return resolver.promise.catch(function (error) {\n    if (error instanceof Promise.CancellationError || error instanceof Promise.TimeoutError) {\n      // remove this task from the queue. It is already rejected (hence this\n      // catch event), and else it will be rejected again when terminating\n      delete me.processing[id];\n\n      // terminate worker\n      return me.terminateAndNotify(true)\n        .then(function() {\n          throw error;\n        }, function(err) {\n          throw err;\n        });\n    } else {\n      throw error;\n    }\n  })\n};\n\n/**\n * Test whether the worker is processing any tasks or cleaning up before termination.\n * @return {boolean} Returns true if the worker is busy\n */\nWorkerHandler.prototype.busy = function () {\n  return this.cleaning || Object.keys(this.processing).length > 0;\n};\n\n/**\n * Terminate the worker.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {function} [callback=null] If provided, will be called when process terminates.\n */\nWorkerHandler.prototype.terminate = function (force, callback) {\n  var me = this;\n  if (force) {\n    // cancel all tasks in progress\n    for (var id in this.processing) {\n      if (this.processing[id] !== undefined) {\n        this.processing[id].resolver.reject(new Error('Worker terminated'));\n      }\n    }\n    this.processing = Object.create(null);\n  }\n\n  if (typeof callback === 'function') {\n    this.terminationHandler = callback;\n  }\n  if (!this.busy()) {\n    // all tasks are finished. kill the worker\n    var cleanup = function(err) {\n      me.terminated = true;\n      me.cleaning = false;\n      if (me.worker != null && me.worker.removeAllListeners) {\n        // removeAllListeners is only available for child_process\n        me.worker.removeAllListeners('message');\n      }\n      me.worker = null;\n      me.terminating = false;\n      if (me.terminationHandler) {\n        me.terminationHandler(err, me);\n      } else if (err) {\n        throw err;\n      }\n    }\n\n    if (this.worker) {\n      if (typeof this.worker.kill === 'function') {\n        if (this.worker.killed) {\n          cleanup(new Error('worker already killed!'));\n          return;\n        }\n\n        // child process and worker threads\n        var cleanExitTimeout = setTimeout(function() {\n          if (me.worker) {\n            me.worker.kill();\n          }\n        }, this.workerTerminateTimeout);\n\n        this.worker.once('exit', function() {\n          clearTimeout(cleanExitTimeout);\n          if (me.worker) {\n            me.worker.killed = true;\n          }\n          cleanup();\n        });\n\n        if (this.worker.ready) {\n          this.worker.send(TERMINATE_METHOD_ID);\n        } else {\n          this.requestQueue.push({ message: TERMINATE_METHOD_ID });\n        }\n\n        // mark that the worker is cleaning up resources\n        // to prevent new tasks from being executed\n        this.cleaning = true;\n        return;\n      }\n      else if (typeof this.worker.terminate === 'function') {\n        this.worker.terminate(); // web worker\n        this.worker.killed = true;\n      }\n      else {\n        throw new Error('Failed to terminate worker');\n      }\n    }\n    cleanup();\n  }\n  else {\n    // we can't terminate immediately, there are still tasks being executed\n    this.terminating = true;\n  }\n};\n\n/**\n * Terminate the worker, returning a Promise that resolves when the termination has been done.\n * @param {boolean} [force=false]   If false (default), the worker is terminated\n *                                  after finishing all tasks currently in\n *                                  progress. If true, the worker will be\n *                                  terminated immediately.\n * @param {number} [timeout]        If provided and non-zero, worker termination promise will be rejected\n *                                  after timeout if worker process has not been terminated.\n * @return {Promise.<WorkerHandler, Error>}\n */\nWorkerHandler.prototype.terminateAndNotify = function (force, timeout) {\n  var resolver = Promise.defer();\n  if (timeout) {\n    resolver.promise.timeout(timeout);\n  }\n  this.terminate(force, function(err, worker) {\n    if (err) {\n      resolver.reject(err);\n    } else {\n      resolver.resolve(worker);\n    }\n  });\n  return resolver.promise;\n};\n\nmodule.exports = WorkerHandler;\nmodule.exports._tryRequireWorkerThreads = tryRequireWorkerThreads;\nmodule.exports._setupProcessWorker = setupProcessWorker;\nmodule.exports._setupBrowserWorker = setupBrowserWorker;\nmodule.exports._setupWorkerThreadWorker = setupWorkerThreadWorker;\nmodule.exports.ensureWorkerThreads = ensureWorkerThreads;\n","module.exports = require(\"os\");","/**\n * Validate that the object only contains known option names\n * - Throws an error when unknown options are detected\n * - Throws an error when some of the allowed options are attached\n * @param {Object | undefined} options\n * @param {string[]} allowedOptionNames\n * @param {string} objectName\n * @retrun {Object} Returns the original options\n */\nexports.validateOptions = function validateOptions(options, allowedOptionNames, objectName) {\n  if (!options) {\n    return\n  }\n\n  var optionNames = options ?  Object.keys(options) : []\n\n  // check for unknown properties\n  var unknownOptionName = optionNames.find(optionName => !allowedOptionNames.includes(optionName))\n  if (unknownOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an unknown option \"' + unknownOptionName + '\"')\n  }\n\n  // check for inherited properties which are not present on the object itself\n  var illegalOptionName = allowedOptionNames.find(allowedOptionName => {\n    return Object.prototype[allowedOptionName] && !optionNames.includes(allowedOptionName)\n  })\n  if (illegalOptionName) {\n    throw new Error('Object \"' + objectName + '\" contains an inherited option \"' + illegalOptionName + '\" which is ' +\n      'not defined in the object itself but in its prototype. Only plain objects are allowed. ' +\n      'Please remove the option from the prototype or override it with a value \"undefined\".')\n  }\n\n  return options\n}\n\n// source: https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker\nexports.workerOptsNames = [\n  'credentials', 'name', 'type' ]\n\n// source: https://nodejs.org/api/child_process.html#child_processforkmodulepath-args-options\nexports.forkOptsNames = [\n  'cwd', 'detached', 'env', 'execPath', 'execArgv', 'gid', 'serialization',\n  'signal', 'killSignal', 'silent', 'stdio', 'uid', 'windowsVerbatimArguments',\n  'timeout'\n]\n\n// source: https://nodejs.org/api/worker_threads.html#new-workerfilename-options\nexports.workerThreadOptsNames = [\n  'argv', 'env', 'eval', 'execArgv', 'stdin', 'stdout', 'stderr', 'workerData',\n  'trackUnmanagedFds', 'transferList', 'resourceLimits', 'name'\n]\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n//@ts-ignore\r\nimport workerpool from 'workerpool'\r\n\r\nexport function registerService(name: string, func: any) {\r\n  workerpool.worker({\r\n    [name]: func\r\n  })\r\n}\r\n\r\nexport function emitEvent(name: string, data: any) {\r\n  workerpool.workerEmit({\r\n    event: name,\r\n    data: data\r\n  })\r\n}\r\n"],"names":["Promise","handler","parent","me","this","SyntaxError","_onSuccess","_onFail","resolved","rejected","pending","_process","onSuccess","onFail","push","then","resolve","reject","s","_then","f","_resolve","result","forEach","fn","_reject","error","cancel","CancellationError","timeout","delay","timer","setTimeout","TimeoutError","always","clearTimeout","callback","res","message","stack","Error","prototype","all","promises","remaining","length","results","p","i","defer","resolver","promise","constructor","name","exports","module","require","WorkerHandler","environment","DEBUG_PORT_ALLOCATOR","Pool","script","options","workers","tasks","forkArgs","Object","freeze","forkOpts","workerOpts","workerThreadOpts","debugPortStart","nodeWorker","workerType","maxQueueSize","Infinity","workerTerminateTimeout","onCreateWorker","onTerminateWorker","emitStdStreams","maxWorkers","isNumber","isInteger","TypeError","validateMaxWorkers","Math","max","cpus","minWorkers","validateMinWorkers","_ensureMinWorkers","_boundNext","_next","bind","ensureWorkerThreads","value","round","exec","method","params","Array","isArray","task","originalTimeout","indexOf","call","String","proxy","arguments","pool","methods","slice","worker","_getWorker","shift","catch","terminated","_removeWorker","busy","_createWorkerHandler","releasePort","debugPort","_removeWorkerFromList","terminate","err","index","splice","force","removeWorker","termPromise","terminateAndNotify","stats","totalWorkers","busyWorkers","filter","idleWorkers","pendingTasks","activeTasks","overriddenParams","nextAvailableStartingAt","transfer","isNode","nodeProcess","versions","node","platform","process","worker_threads","isMainThread","connected","Window","self","navigator","hardwareConcurrency","Transfer","exit","postMessage","addEventListener","on","event","data","send","WorkerThreads","code","parentPort","convertError","getOwnPropertyNames","reduce","product","defineProperty","enumerable","isPromise","run","args","Function","apply","keys","terminationHandler","undefined","cleanupAndExit","_exit","currentRequestId","request","id","register","hasOwnProperty","onTerminate","emit","payload","isEvent","add","DebugPortAllocator","ports","create","starting","port","workerEmit","validateOptions","forkOptsNames","workerThreadOptsNames","workerOptsNames","TERMINATE_METHOD_ID","tryRequireWorkerThreads","ensureWebWorker","Worker","setupBrowserWorker","isBrowserWorker","setupWorkerThreadWorker","stdout","stderr","isWorkerThread","kill","disconnect","setupProcessWorker","child_process","fork","isChildProcess","resolveForkOptions","opts","processExecArgv","execArgv","join","inspectorActive","debugBrk","arg","assign","concat","stdio","handleEmittedStdPayload","processing","values","_options","onError","Blob","window","URL","createObjectURL","blob","type","__dirname","getDefaultWorker","setupWorker","ready","requestQueue","toString","response","dispatchQueuedRequests","lastTask","terminating","obj","temp","props","objectToError","globalOn","exitCode","signalCode","spawnargs","spawnfile","cleaning","lastId","cleanup","removeAllListeners","killed","cleanExitTimeout","once","_tryRequireWorkerThreads","_setupProcessWorker","_setupBrowserWorker","_setupWorkerThreadWorker","allowedOptionNames","objectName","optionNames","unknownOptionName","find","optionName","includes","illegalOptionName","allowedOptionName","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","d","definition","key","o","get","prop","r","Symbol","toStringTag","registerService","func","emitEvent"],"sourceRoot":""}