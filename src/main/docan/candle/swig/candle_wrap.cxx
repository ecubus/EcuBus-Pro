/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGJAVASCRIPT
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#define SWIG_FromCharPtrAndSize(cptr, size) SWIG_Env_FromCharPtrAndSize(env, cptr, size)
#define SWIG_FromCharPtr(cptr)              SWIG_Env_FromCharPtrAndSize(env, cptr, strlen(cptr))


#define SWIG_NAPI_FROM_DECL_ARGS(arg1)              (Napi::Env env, arg1)
#define SWIG_NAPI_FROM_CALL_ARGS(arg1)              (env, arg1)



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



#if defined(_CPPUNWIND) || defined(__EXCEPTIONS)
#define NAPI_CPP_EXCEPTIONS
#else
#define NAPI_DISABLE_CPP_EXCEPTIONS
#define NODE_ADDON_API_ENABLE_MAYBE
#endif

// This gives us
// Branch Node.js v10.x - from v10.20.0
// Branch Node.js v12.x - from v12.17.0
// Everything from Node.js v14.0.0 on
// Our limiting feature is napi_set_instance_data
#ifndef NAPI_VERSION
#define NAPI_VERSION 6
#elif NAPI_VERSION < 6
#error NAPI_VERSION 6 is the minimum supported target (Node.js >=14, >=12.17, >=10.20)
#endif
#include <napi.h>

#include <errno.h>
#include <limits.h>
#include <stdlib.h>
#include <assert.h>
#include <map>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* ---------------------------------------------------------------------------
 * Error handling
 *
 * ---------------------------------------------------------------------------*/

/*
 * We support several forms:
 *
 * SWIG_Raise("Error message")
 * which creates an Error object with the error message
 *
 * SWIG_Raise(SWIG_TypeError, "Type error")
 * which creates the specified error type with the message
 *
 * SWIG_Raise(obj)
 * which throws the object itself
 *
 * SWIG_Raise(obj, "Exception const &", SWIGType_p_Exception)
 * which also throws the object itself and discards the unneeded extra type info
 *
 * These must be functions instead of macros to use the C++ overloading to
 * resolve the arguments
 */
#define SWIG_exception(code, msg)               SWIG_Error(code, msg)
#define SWIG_fail                               goto fail

#ifdef NAPI_CPP_EXCEPTIONS

#define SWIG_Error(code, msg)                   SWIG_NAPI_Raise(env, code, msg)
#define NAPI_CHECK_MAYBE(maybe)                 (maybe)
#define NAPI_CHECK_RESULT(maybe, result)        (result = maybe)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  throw Napi::Error::New(env, msg);
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      throw Napi::Error::New(env, msg);
    case SWIG_OverflowError:
    case SWIG_IndexError:
      throw Napi::RangeError::New(env, msg);
    case SWIG_ValueError:
    case SWIG_TypeError:
      throw Napi::TypeError::New(env, msg);
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  throw Napi::Error(env, obj);
}

#else

#define SWIG_Error(code, msg)     do { SWIG_NAPI_Raise(env, code, msg); SWIG_fail; } while (0)
#define NAPI_CHECK_MAYBE(maybe)   do { if (maybe.IsNothing()) SWIG_fail; } while (0)
#define NAPI_CHECK_RESULT(maybe, result)          \
        do {                                      \
                auto r = maybe;                   \
                if (r.IsNothing()) SWIG_fail;     \
                result = r.Unwrap();              \
        } while (0)

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, const char *msg) {
  Napi::Error::New(env, msg).ThrowAsJavaScriptException();
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, int type, const char *msg) {
  switch(type) {
    default:
    case SWIG_IOError:
    case SWIG_MemoryError:
    case SWIG_SystemError:
    case SWIG_RuntimeError:
    case SWIG_DivisionByZero:
    case SWIG_SyntaxError:
      Napi::Error::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_OverflowError:
    case SWIG_IndexError:
      Napi::RangeError::New(env, msg).ThrowAsJavaScriptException();
      return;
    case SWIG_ValueError:
    case SWIG_TypeError:
      Napi::TypeError::New(env, msg).ThrowAsJavaScriptException();
      return;
  }
}

SWIGINTERN void SWIG_NAPI_Raise(Napi::Env env, Napi::Value obj,
        const char *msg = nullptr, swig_type_info *info = nullptr) {
  Napi::Error(env, obj).ThrowAsJavaScriptException();
}

#endif

void JS_veto_set_variable(const Napi::CallbackInfo &info) {
  SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

struct EnvInstanceData {
  Napi::Env env;
  // Base class per-environment constructor, used to check
  // if a JS object is a SWIG wrapper
  Napi::FunctionReference *SWIG_NAPI_ObjectWrapCtor;
  // Per-environment wrapper constructors, indexed by the number in
  // swig_type->clientdata
  Napi::FunctionReference **ctor;
  swig_module_info *swig_module;
  EnvInstanceData(Napi::Env, swig_module_info *);
  ~EnvInstanceData();
};

typedef size_t SWIG_NAPI_ClientData;

// Base class for all wrapped objects,
// used mostly when unwrapping unknown objects
template <typename SWIG_OBJ_WRAP>
class SWIG_NAPI_ObjectWrap_templ : public Napi::ObjectWrap<SWIG_OBJ_WRAP> {
  public:
    void *self;
    bool owned;
    size_t size;
    swig_type_info *info;
    SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info);
    SWIG_NAPI_ObjectWrap_templ(bool, const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info),
        self(nullptr),
        owned(true),
        size(0),
        info(nullptr)
        {}
    virtual ~SWIG_NAPI_ObjectWrap_templ() {};

    Napi::Value ToString(const Napi::CallbackInfo &info);
};

template <typename SWIG_OBJ_WRAP>
SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::SWIG_NAPI_ObjectWrap_templ(const Napi::CallbackInfo &info) :
        Napi::ObjectWrap<SWIG_OBJ_WRAP>(info), size(0), info(nullptr) { 
  Napi::Env env = info.Env();
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object of unknown type in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
  } else {
    SWIG_Error(SWIG_ERROR, "This constructor is not accessible from JS");
  }
  return;
  goto fail;
fail:
  return;
}

template <typename SWIG_OBJ_WRAP>
Napi::Value SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>::ToString(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  static char repr[128];
  const char *name = SWIG_TypePrettyName(this->info);
  snprintf(repr, sizeof(repr), "{SwigObject %s (%s) at %p %s}",
    this->info ? this->info->name : "unknown",
    name ? name : "unknown",
    this->self,
    this->owned ? "[owned]" : "[copy]");
  return Napi::String::New(env, repr);
}

class SWIG_NAPI_ObjectWrap_inst : public SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst> {
public:
  using SWIG_NAPI_ObjectWrap_templ::SWIG_NAPI_ObjectWrap_templ;
  static Napi::Function GetClass(Napi::Env);
  static void GetMembers(
    Napi::Env,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &,
    std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
  );
};

void SWIG_NAPI_ObjectWrap_inst::GetMembers(
        Napi::Env env,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &members,
        std::map<std::string, SWIG_NAPI_ObjectWrap_templ::PropertyDescriptor> &
) {
  members.erase("toString");
  members.insert({"toString", SWIG_NAPI_ObjectWrap_templ::InstanceMethod("toString", &SWIG_NAPI_ObjectWrap_templ::ToString)});
}

Napi::Function SWIG_NAPI_ObjectWrap_inst::GetClass(Napi::Env env) {
  return Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::DefineClass(env, "SwigObject", {});
}

SWIGRUNTIME int SWIG_NAPI_ConvertInstancePtr(Napi::Object objRef, void **ptr, swig_type_info *info, int flags) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  Napi::Env env = objRef.Env();
  if(!objRef.IsObject()) return SWIG_ERROR;

  // Check if this is a SWIG wrapper
  Napi::FunctionReference *ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  bool instanceOf;
  NAPI_CHECK_RESULT(objRef.InstanceOf(ctor->Value()), instanceOf);
  if (!instanceOf) {
    return SWIG_TypeError;
  }

  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  // Now check if the SWIG type is compatible unless the types match exactly or the type is unknown
  if(info && ow->info != info && ow->info != nullptr) {
    swig_cast_info *tc = SWIG_TypeCheckStruct(ow->info, info);
    if (!tc && ow->info->name) {
      tc = SWIG_TypeCheck(ow->info->name, info);
    }
    bool type_valid = tc != 0;
    if(!type_valid) {
      return SWIG_TypeError;
    }
    int newmemory = 0;
    *ptr = SWIG_TypeCast(tc, ow->self, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  } else {
    *ptr = ow->self;
  }

  if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !ow->owned) {
    return SWIG_ERROR_RELEASE_NOT_OWNED;
  } else {
    if (flags & SWIG_POINTER_DISOWN) {
      ow->owned = false;
    }
    if (flags & SWIG_POINTER_CLEAR) {
      ow->self = nullptr;
    }
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_GetInstancePtr(Napi::Value valRef, void **ptr) {
  SWIG_NAPI_ObjectWrap_inst *ow;
  if(!valRef.IsObject()) {
    return SWIG_TypeError;
  }
  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  ow = Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(objRef);

  if(ow->self == nullptr) {
    return SWIG_ERROR;
  }

  *ptr = ow->self;
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGRUNTIME int SWIG_NAPI_ConvertPtr(Napi::Value valRef, void **ptr, swig_type_info *info, int flags) {
  // special case: JavaScript null => C NULL pointer
  if (valRef.IsNull()) {
    *ptr=0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  if (!valRef.IsObject()) {
    return SWIG_TypeError;
  }

  Napi::Object objRef;
  NAPI_CHECK_RESULT(valRef.ToObject(), objRef);
  return SWIG_NAPI_ConvertInstancePtr(objRef, ptr, info, flags);
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGRUNTIME Napi::Value SWIG_NAPI_NewPointerObj(Napi::Env env, void *ptr, swig_type_info *info, int flags) {
  Napi::External<void> native;
  Napi::FunctionReference *ctor;

  if (ptr == nullptr) {
    return env.Null();
  }
  native = Napi::External<void>::New(env, ptr);

  size_t *idx = info != nullptr ?
        reinterpret_cast<SWIG_NAPI_ClientData *>(info->clientdata) :
        nullptr;
  if (idx == nullptr) {
    // This type does not have a dedicated wrapper
    ctor = env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor;
  } else {
    ctor = env.GetInstanceData<EnvInstanceData>()->ctor[*idx];
  }

  Napi::Value wrapped;
  NAPI_CHECK_RESULT(ctor->New({native}), wrapped);

  // Preserve the type even if using the generic wrapper
  if (idx == nullptr && info != nullptr) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->info = info;
  }

  if ((flags & SWIG_POINTER_OWN) == SWIG_POINTER_OWN) {
    Napi::Object obj;
    NAPI_CHECK_RESULT(wrapped.ToObject(), obj);
    Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->owned = true;
  }

  return wrapped;
  goto fail;
fail:
  return Napi::Value();
}

#define SWIG_ConvertPtr(obj, ptr, info, flags)          SWIG_NAPI_ConvertPtr(obj, ptr, info, flags)
#define SWIG_NewPointerObj(ptr, info, flags)            SWIG_NAPI_NewPointerObj(env, ptr, info, flags)

#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_NAPI_ConvertInstancePtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_NAPI_NewPointerObj(env, thisvalue, type, flags)

#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_NAPI_ConvertPtr(obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_NAPI_NewPointerObj(env, ptr, type, 0)

#define SWIG_GetInstancePtr(obj, ptr)                   SWIG_NAPI_GetInstancePtr(obj, ptr)

SWIGRUNTIME Napi::Value _SWIG_NAPI_wrap_equals(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  bool result;
  int res1;
  int res2;

  if(info.Length() != 1) SWIG_Error(SWIG_ERROR, "Illegal number of arguments for equals.");

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ERROR, "Could not get pointer from 'this' object for equals.");
  }
  res2 = SWIG_GetInstancePtr(info[0], &arg2);
  if (!SWIG_IsOK(res2)) {
    SWIG_Error(SWIG_ArgError(res2), " in method '" "equals" "', argument " "1"" of type '" "void *""'");
  }

  result = (bool)(arg1 == arg2);
  jsresult = Napi::Boolean::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}

SWIGRUNTIME Napi::Value _wrap_getCPtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  void *arg1 = (void *) 0 ;
  long result;
  int res1;

  res1 = SWIG_GetInstancePtr(info.This(), &arg1);
  if (!SWIG_IsOK(res1)) {
    SWIG_Error(SWIG_ArgError(res1), " in method '" "getCPtr" "', argument " "1"" of type '" "void *""'");
  }

  result = (long)arg1;
  jsresult = Napi::Number::New(env, result);

  return jsresult;
  goto fail;
fail:
  return Napi::Value();
}


/* ---------------------------------------------------------------------------
 * PackedData object
 * (objects visible to JS that do not have a dedicated wrapper but must preserve type)
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME
Napi::Value SWIG_NAPI_NewPackedObj(Napi::Env env, void *data, size_t size, swig_type_info *type) {
  void *data_copy = new uint8_t[size];
  memcpy(data_copy, data, size);
  Napi::Value val = SWIG_NAPI_NewPointerObj(env, data_copy, type, SWIG_POINTER_OWN);
  Napi::Object obj;
  if (val.IsEmpty()) goto fail;

  NAPI_CHECK_RESULT(val.ToObject(), obj);
  Napi::ObjectWrap<SWIG_NAPI_ObjectWrap_inst>::Unwrap(obj)->size = size;

fail:
  return val;
}

SWIGRUNTIME
int SWIG_NAPI_ConvertPacked(Napi::Value valRef, void *ptr, size_t size, swig_type_info *type) {
  void *tmp;
  if (!SWIG_IsOK(SWIG_NAPI_ConvertPtr(valRef, &tmp, type, 0))) {
    return SWIG_ERROR;
  }
  memcpy(ptr, tmp, size);
  return SWIG_OK;
}

#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_NAPI_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_NAPI_NewPackedObj(env, ptr, sz, type)


/* ---------------------------------------------------------------------------
 * Support for IN/OUTPUT typemaps (see Lib/typemaps/inoutlist.swg)
 *
 * ---------------------------------------------------------------------------*/

SWIGRUNTIME

Napi::Value SWIG_NAPI_AppendOutput(Napi::Env env, Napi::Value result, Napi::Value obj) {
  if (result.IsUndefined()) {
    result = Napi::Array::New(env);
  } else if (!result.IsArray()) {
    Napi::Array tmparr = Napi::Array::New(env);
    tmparr.Set(static_cast<uint32_t>(0), result);
    result = tmparr;
  }

  Napi::Array arr = result.As<Napi::Array>();
  arr.Set(arr.Length(), obj);
  return arr;
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CharArray swig_types[0]
#define SWIGTYPE_p_DeviceArray swig_types[1]
#define SWIGTYPE_p_OVERLAPPED swig_types[2]
#define SWIGTYPE_p_TS swig_types[3]
#define SWIGTYPE_p_U8Array swig_types[4]
#define SWIGTYPE_p_Uint8Array swig_types[5]
#define SWIGTYPE_p_WINUSB_INTERFACE_HANDLE swig_types[6]
#define SWIGTYPE_p___int64 swig_types[7]
#define SWIGTYPE_p_candle_bittiming_t swig_types[8]
#define SWIGTYPE_p_candle_capability_extended_t swig_types[9]
#define SWIGTYPE_p_candle_capability_t swig_types[10]
#define SWIGTYPE_p_candle_device_config_t swig_types[11]
#define SWIGTYPE_p_candle_device_mode_t swig_types[12]
#define SWIGTYPE_p_candle_device_t swig_types[13]
#define SWIGTYPE_p_candle_devstate_t swig_types[14]
#define SWIGTYPE_p_candle_err_t swig_types[15]
#define SWIGTYPE_p_candle_frame_t swig_types[16]
#define SWIGTYPE_p_candle_frametype_t swig_types[17]
#define SWIGTYPE_p_candle_host_config_t swig_types[18]
#define SWIGTYPE_p_candle_list_t swig_types[19]
#define SWIGTYPE_p_candle_mode_t swig_types[20]
#define SWIGTYPE_p_canfd swig_types[21]
#define SWIGTYPE_p_canlde_rx_urb swig_types[22]
#define SWIGTYPE_p_char swig_types[23]
#define SWIGTYPE_p_classic_can swig_types[24]
#define SWIGTYPE_p_float swig_types[25]
#define SWIGTYPE_p_int swig_types[26]
#define SWIGTYPE_p_long swig_types[27]
#define SWIGTYPE_p_long_long swig_types[28]
#define SWIGTYPE_p_msg_t swig_types[29]
#define SWIGTYPE_p_p_char swig_types[30]
#define SWIGTYPE_p_p_unsigned_long swig_types[31]
#define SWIGTYPE_p_p_void swig_types[32]
#define SWIGTYPE_p_short swig_types[33]
#define SWIGTYPE_p_signed___int64 swig_types[34]
#define SWIGTYPE_p_signed_char swig_types[35]
#define SWIGTYPE_p_unsigned___int64 swig_types[36]
#define SWIGTYPE_p_unsigned_char swig_types[37]
#define SWIGTYPE_p_unsigned_int swig_types[38]
#define SWIGTYPE_p_unsigned_long swig_types[39]
#define SWIGTYPE_p_unsigned_long_long swig_types[40]
#define SWIGTYPE_p_unsigned_short swig_types[41]
#define SWIGTYPE_p_void swig_types[42]
#define SWIGTYPE_p_wchar_t swig_types[43]
static swig_type_info *swig_types[45];
static swig_module_info swig_module = {swig_types, 44, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */



#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <assert.h>


#include <windows.h>
#include <stdlib.h>
#include "candle_defs.h"
#include "candle.h"

extern bool __stdcall DLL SetContextDevice(std::string name,candle_device_t* hdev);
extern bool __stdcall DLL SendCANMsg(std::string name,uint8_t ch,candle_frame_t *frame);
extern std::string __stdcall DLL GetDeviceFriendlyName(candle_device_t* hdev);
extern std::string __stdcall DLL GetDevicePath(candle_device_t* hdev);


#include <stdint.h>		// Use the C99 official header


#include <string>


typedef uint32_t TS;

SWIGINTERN TS *new_TS(){
  return new uint32_t();
}

SWIGINTERN
int SWIG_AsVal_unsigned_SS_int (Napi::Value valRef, unsigned int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned int>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN void TS_assign(TS *self,uint32_t value){
  *self = value;
}
SWIGINTERN uint32_t TS_value(TS *self){
  return *self;
}

SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_int(Napi::Env env, unsigned int val)
{
  return Napi::Number::New(env, val);
}

SWIGINTERN uint32_t *TS_cast(TS *self){
  return self;
}
SWIGINTERN TS *TS_frompointer(uint32_t *t){
  return (TS *) t;
}

typedef uint8_t U8Array;


SWIGINTERN
int SWIG_AsVal_double (Napi::Value obj, double *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }

  if(val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<double>(num.DoubleValue());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_long (Napi::Value obj, unsigned long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN
int SWIG_AsVal_unsigned_SS_long_SS_long (Napi::Value obj, unsigned long long *val)
{
  if(!obj.IsNumber()) {
    return SWIG_TypeError;
  }
  if (obj.ToNumber().Int64Value() < 0) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(obj.ToNumber(), num);
    *val = static_cast<unsigned long long>(num.Int64Value());
  }
  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t (Napi::Value obj, size_t *val)
{
  int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
  if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
  } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
    unsigned long long v;
    res = SWIG_AsVal_unsigned_SS_long_SS_long (obj, val ? &v : 0);
    if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  }
#endif
  return res;
}

SWIGINTERN U8Array *new_U8Array(size_t nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN uint8_t U8Array_getitem(U8Array *self,size_t index){
  return self[index];
}

SWIGINTERNINLINE Napi::Value
SWIG_From_unsigned_SS_char(Napi::Env env, unsigned char c)
{
  return Napi::Number::New(env, static_cast<double>(c));
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (Napi::Value obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN void U8Array_setitem(U8Array *self,size_t index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *U8Array_cast(U8Array *self){
  return self;
}
SWIGINTERN U8Array *U8Array_frompointer(uint8_t *t){
  return (U8Array *) t;
}

typedef candle_device_t DeviceArray;

SWIGINTERN DeviceArray *new_DeviceArray(size_t nelements){
  return new candle_device_t[nelements]();
}
SWIGINTERN candle_device_t DeviceArray_getitem(DeviceArray *self,size_t index){
  return self[index];
}
SWIGINTERN void DeviceArray_setitem(DeviceArray *self,size_t index,candle_device_t value){
  self[index] = value;
}
SWIGINTERN candle_device_t *DeviceArray_cast(DeviceArray *self){
  return self;
}
SWIGINTERN DeviceArray *DeviceArray_frompointer(candle_device_t *t){
  return (DeviceArray *) t;
}

typedef uint16_t CharArray;

SWIGINTERN CharArray *new_CharArray(size_t nelements){
  return new uint16_t[nelements]();
}
SWIGINTERN uint16_t CharArray_getitem(CharArray *self,size_t index){
  return self[index];
}

SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_short(Napi::Env env, unsigned short val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
int SWIG_AsVal_unsigned_SS_short (Napi::Value valRef, unsigned short* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    if (num.Int64Value() < 0) {
      return SWIG_TypeError;
    }
    *val = static_cast<unsigned short>(num.Uint32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}

SWIGINTERN void CharArray_setitem(CharArray *self,size_t index,uint16_t value){
  self[index] = value;
}
SWIGINTERN uint16_t *CharArray_cast(CharArray *self){
  return self;
}
SWIGINTERN CharArray *CharArray_frompointer(uint16_t *t){
  return (CharArray *) t;
}

typedef uint8_t Uint8Array;

SWIGINTERN Uint8Array *new_Uint8Array(size_t nelements){
  return new uint8_t[nelements]();
}
SWIGINTERN uint8_t Uint8Array_getitem(Uint8Array *self,size_t index){
  return self[index];
}
SWIGINTERN void Uint8Array_setitem(Uint8Array *self,size_t index,uint8_t value){
  self[index] = value;
}
SWIGINTERN uint8_t *Uint8Array_cast(Uint8Array *self){
  return self;
}
SWIGINTERN Uint8Array *Uint8Array_frompointer(uint8_t *t){
  return (Uint8Array *) t;
}

SWIGINTERN
Napi::Value SWIG_From_int(Napi::Env env, int val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Napi::Value valRef, char** cptr, size_t* psize, int *alloc)
{
  if(valRef.IsString()) {
    Napi::String js_str;
    NAPI_CHECK_RESULT(valRef.ToString(), js_str);

    std::string str = js_str.Utf8Value();
    size_t len = str.size() + 1;
    char* cstr = (char*) (new char[len]());
    memcpy(cstr, str.data(), len);
    
    if(alloc) *alloc = SWIG_NEWOBJ;
    if(psize) *psize = len;
    if(cptr) *cptr = cstr;
    
    return SWIG_OK;
  } else {
    if(valRef.IsObject()) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      Napi::Object obj;
      NAPI_CHECK_RESULT(valRef.ToObject(), obj);
      // try if the object is a wrapped char[]
      if (pchar_descriptor) {
        void* vptr = 0;
        if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
          if (cptr) *cptr = (char *) vptr;
          if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
          if (alloc) *alloc = SWIG_OLDOBJ;
          return SWIG_OK;
        }
      }
    }
  }
  goto fail;
fail:
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Napi::Value obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    /* special case of single char conversion when we don't need space for NUL */
    if (size == 1 && csize == 2 && cptr && !cptr[1]) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Napi::Value
SWIG_Env_FromCharPtrAndSize(Napi::Env env, const char* carray, size_t size)
{
  if (carray) {
    Napi::String js_str = Napi::String::New(env, carray, size);
    return js_str;
  } else {
    return env.Undefined();
  }
}


SWIGINTERN size_t
SWIG_strnlen(const char* s, size_t maxlen)
{
  const char *p;
  for (p = s; maxlen-- && *p; p++)
    ;
  return p - s;
}


SWIGINTERN
int SWIG_AsVal_int (Napi::Value valRef, int* val)
{
  if (!valRef.IsNumber()) {
    return SWIG_TypeError;
  }
  if (val) {
    Napi::Number num;
    NAPI_CHECK_RESULT(valRef.ToNumber(), num);
    *val = static_cast<int>(num.Int32Value());
  }

  return SWIG_OK;
  goto fail;
fail:
  return SWIG_ERROR;
}


SWIGINTERN
Napi::Value SWIG_From_unsigned_SS_long(Napi::Env env, unsigned long val)
{
  return Napi::Number::New(env, val);
}


SWIGINTERN
Napi::Value SWIG_From_bool(Napi::Env env, bool val)
{
  return Napi::Boolean::New(env, val);
}


// Override the default one with an empty one


SWIGINTERN int
SWIG_AsPtr_std_string (Napi::Value obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE Napi::Value
SWIG_From_std_string  SWIG_NAPI_FROM_DECL_ARGS(const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}






#define SWIG_NAPI_INIT xmlpp_initialize


// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_TS_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_TS_templ(const Napi::CallbackInfo &);
_exports_TS_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_TS(const Napi::CallbackInfo &);
virtual ~_exports_TS_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_TS_assign(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TS_value(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_TS_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_TS_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_TS_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_TS_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_TS_inst : public _exports_TS_templ<_exports_TS_inst> {
public:
  using _exports_TS_templ::_exports_TS_templ;
  virtual ~_exports_TS_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_TS_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_TS_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: TS (_exports_TS) */
// jsnapi_getclass
Napi::Function _exports_TS_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_TS_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_TS_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_TS_inst>::DefineClass(env, "TS", symbolTable);
}

void _exports_TS_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_TS_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_TS_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("assign");
  members.insert({
    "assign",
      _exports_TS_templ::InstanceMethod("assign",
        &_exports_TS_templ::_wrap_TS_assign,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("value");
  members.insert({
    "value",
      _exports_TS_templ::InstanceMethod("value",
        &_exports_TS_templ::_wrap_TS_value,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_TS_templ::InstanceMethod("cast",
        &_exports_TS_templ::_wrap_TS_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_TS_templ::_wrap_TS_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_U8Array_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_U8Array_templ(const Napi::CallbackInfo &);
_exports_U8Array_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_U8Array(const Napi::CallbackInfo &);
virtual ~_exports_U8Array_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_U8Array_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_U8Array_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_U8Array_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_U8Array_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_U8Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_U8Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_U8Array_inst : public _exports_U8Array_templ<_exports_U8Array_inst> {
public:
  using _exports_U8Array_templ::_exports_U8Array_templ;
  virtual ~_exports_U8Array_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_U8Array_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_U8Array_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: U8Array (_exports_U8Array) */
// jsnapi_getclass
Napi::Function _exports_U8Array_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_U8Array_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_U8Array_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_U8Array_inst>::DefineClass(env, "U8Array", symbolTable);
}

void _exports_U8Array_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_U8Array_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_U8Array_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_U8Array_templ::InstanceMethod("getitem",
        &_exports_U8Array_templ::_wrap_U8Array_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_U8Array_templ::InstanceMethod("setitem",
        &_exports_U8Array_templ::_wrap_U8Array_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_U8Array_templ::InstanceMethod("cast",
        &_exports_U8Array_templ::_wrap_U8Array_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_U8Array_templ::_wrap_U8Array_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_DeviceArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_DeviceArray_templ(const Napi::CallbackInfo &);
_exports_DeviceArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_DeviceArray(const Napi::CallbackInfo &);
virtual ~_exports_DeviceArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_DeviceArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DeviceArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_DeviceArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_DeviceArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_DeviceArray_inst : public _exports_DeviceArray_templ<_exports_DeviceArray_inst> {
public:
  using _exports_DeviceArray_templ::_exports_DeviceArray_templ;
  virtual ~_exports_DeviceArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_DeviceArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_DeviceArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: DeviceArray (_exports_DeviceArray) */
// jsnapi_getclass
Napi::Function _exports_DeviceArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_DeviceArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_DeviceArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_DeviceArray_inst>::DefineClass(env, "DeviceArray", symbolTable);
}

void _exports_DeviceArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_DeviceArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_DeviceArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_DeviceArray_templ::InstanceMethod("getitem",
        &_exports_DeviceArray_templ::_wrap_DeviceArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_DeviceArray_templ::InstanceMethod("setitem",
        &_exports_DeviceArray_templ::_wrap_DeviceArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_DeviceArray_templ::InstanceMethod("cast",
        &_exports_DeviceArray_templ::_wrap_DeviceArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_DeviceArray_templ::_wrap_DeviceArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_CharArray_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_CharArray_templ(const Napi::CallbackInfo &);
_exports_CharArray_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_CharArray(const Napi::CallbackInfo &);
virtual ~_exports_CharArray_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_CharArray_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CharArray_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_CharArray_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_CharArray_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_CharArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_CharArray_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_CharArray_inst : public _exports_CharArray_templ<_exports_CharArray_inst> {
public:
  using _exports_CharArray_templ::_exports_CharArray_templ;
  virtual ~_exports_CharArray_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_CharArray_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_CharArray_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: CharArray (_exports_CharArray) */
// jsnapi_getclass
Napi::Function _exports_CharArray_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_CharArray_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_CharArray_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_CharArray_inst>::DefineClass(env, "CharArray", symbolTable);
}

void _exports_CharArray_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_CharArray_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_CharArray_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_CharArray_templ::InstanceMethod("getitem",
        &_exports_CharArray_templ::_wrap_CharArray_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_CharArray_templ::InstanceMethod("setitem",
        &_exports_CharArray_templ::_wrap_CharArray_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_CharArray_templ::InstanceMethod("cast",
        &_exports_CharArray_templ::_wrap_CharArray_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_CharArray_templ::_wrap_CharArray_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_Uint8Array_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_Uint8Array_templ(const Napi::CallbackInfo &);
_exports_Uint8Array_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_Uint8Array(const Napi::CallbackInfo &);
virtual ~_exports_Uint8Array_templ();
// jsnapi_class_method_declaration
Napi::Value _wrap_Uint8Array_getitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Uint8Array_setitem(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_Uint8Array_cast(const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
static Napi::Value _wrap_Uint8Array_frompointer(const Napi::CallbackInfo &);
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_Uint8Array_inst : public _exports_Uint8Array_templ<_exports_Uint8Array_inst> {
public:
  using _exports_Uint8Array_templ::_exports_Uint8Array_templ;
  virtual ~_exports_Uint8Array_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_Uint8Array_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_Uint8Array_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: Uint8Array (_exports_Uint8Array) */
// jsnapi_getclass
Napi::Function _exports_Uint8Array_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_Uint8Array_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_Uint8Array_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_Uint8Array_inst>::DefineClass(env, "Uint8Array", symbolTable);
}

void _exports_Uint8Array_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_Uint8Array_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_Uint8Array_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_member_function_descriptor
  members.erase("getitem");
  members.insert({
    "getitem",
      _exports_Uint8Array_templ::InstanceMethod("getitem",
        &_exports_Uint8Array_templ::_wrap_Uint8Array_getitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("setitem");
  members.insert({
    "setitem",
      _exports_Uint8Array_templ::InstanceMethod("setitem",
        &_exports_Uint8Array_templ::_wrap_Uint8Array_setitem,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  // jsnapi_member_function_descriptor
  members.erase("cast");
  members.insert({
    "cast",
      _exports_Uint8Array_templ::InstanceMethod("cast",
        &_exports_Uint8Array_templ::_wrap_Uint8Array_cast,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
  /* add static class functions and variables */
  // jsnapi_register_static_function
  staticMembers.erase("frompointer");
  staticMembers.insert({
    "frompointer",
      StaticMethod("frompointer",
        &_exports_Uint8Array_templ::_wrap_Uint8Array_frompointer,
        static_cast<napi_property_attributes>(napi_writable | napi_configurable))
    });
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_host_config_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_host_config_t_templ(const Napi::CallbackInfo &);
_exports_candle_host_config_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_host_config_t_byte_order_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_host_config_t_byte_order_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_host_config_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_host_config_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_host_config_t_inst : public _exports_candle_host_config_t_templ<_exports_candle_host_config_t_inst> {
public:
  using _exports_candle_host_config_t_templ::_exports_candle_host_config_t_templ;
  virtual ~_exports_candle_host_config_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_host_config_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_host_config_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_host_config_t (_exports_candle_host_config_t) */
// jsnapi_getclass
Napi::Function _exports_candle_host_config_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_host_config_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_host_config_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_host_config_t_inst>::DefineClass(env, "candle_host_config_t", symbolTable);
}

void _exports_candle_host_config_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_host_config_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_host_config_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("byte_order");
  members.insert({
    "byte_order",
      _exports_candle_host_config_t_templ::InstanceAccessor("byte_order",
        &_exports_candle_host_config_t_templ::_wrap_candle_host_config_t_byte_order_get,
        &_exports_candle_host_config_t_templ::_wrap_candle_host_config_t_byte_order_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_device_config_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_device_config_t_templ(const Napi::CallbackInfo &);
_exports_candle_device_config_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_reserved1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_reserved1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_reserved2_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_reserved2_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_reserved3_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_reserved3_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_icount_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_icount_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_sw_version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_sw_version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_config_t_hw_version_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_config_t_hw_version_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_device_config_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_device_config_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_device_config_t_inst : public _exports_candle_device_config_t_templ<_exports_candle_device_config_t_inst> {
public:
  using _exports_candle_device_config_t_templ::_exports_candle_device_config_t_templ;
  virtual ~_exports_candle_device_config_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_device_config_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_device_config_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_device_config_t (_exports_candle_device_config_t) */
// jsnapi_getclass
Napi::Function _exports_candle_device_config_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_device_config_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_device_config_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_device_config_t_inst>::DefineClass(env, "candle_device_config_t", symbolTable);
}

void _exports_candle_device_config_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_device_config_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_device_config_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("reserved1");
  members.insert({
    "reserved1",
      _exports_candle_device_config_t_templ::InstanceAccessor("reserved1",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved1_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved2");
  members.insert({
    "reserved2",
      _exports_candle_device_config_t_templ::InstanceAccessor("reserved2",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved2_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved2_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved3");
  members.insert({
    "reserved3",
      _exports_candle_device_config_t_templ::InstanceAccessor("reserved3",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved3_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_reserved3_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("icount");
  members.insert({
    "icount",
      _exports_candle_device_config_t_templ::InstanceAccessor("icount",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_icount_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_icount_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sw_version");
  members.insert({
    "sw_version",
      _exports_candle_device_config_t_templ::InstanceAccessor("sw_version",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_sw_version_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_sw_version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("hw_version");
  members.insert({
    "hw_version",
      _exports_candle_device_config_t_templ::InstanceAccessor("hw_version",
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_hw_version_get,
        &_exports_candle_device_config_t_templ::_wrap_candle_device_config_t_hw_version_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_device_mode_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_device_mode_t_templ(const Napi::CallbackInfo &);
_exports_candle_device_mode_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_mode_t_mode_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_mode_t_mode_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_mode_t_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_mode_t_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_device_mode_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_device_mode_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_device_mode_t_inst : public _exports_candle_device_mode_t_templ<_exports_candle_device_mode_t_inst> {
public:
  using _exports_candle_device_mode_t_templ::_exports_candle_device_mode_t_templ;
  virtual ~_exports_candle_device_mode_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_device_mode_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_device_mode_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_device_mode_t (_exports_candle_device_mode_t) */
// jsnapi_getclass
Napi::Function _exports_candle_device_mode_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_device_mode_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_device_mode_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_device_mode_t_inst>::DefineClass(env, "candle_device_mode_t", symbolTable);
}

void _exports_candle_device_mode_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_device_mode_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_device_mode_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("mode");
  members.insert({
    "mode",
      _exports_candle_device_mode_t_templ::InstanceAccessor("mode",
        &_exports_candle_device_mode_t_templ::_wrap_candle_device_mode_t_mode_get,
        &_exports_candle_device_mode_t_templ::_wrap_candle_device_mode_t_mode_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_candle_device_mode_t_templ::InstanceAccessor("flags",
        &_exports_candle_device_mode_t_templ::_wrap_candle_device_mode_t_flags_get,
        &_exports_candle_device_mode_t_templ::_wrap_candle_device_mode_t_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_canlde_rx_urb_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_canlde_rx_urb_templ(const Napi::CallbackInfo &);
_exports_canlde_rx_urb_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canlde_rx_urb_ovl_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canlde_rx_urb_ovl_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canlde_rx_urb_buf_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canlde_rx_urb_buf_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_canlde_rx_urb(const Napi::CallbackInfo &);
virtual ~_exports_canlde_rx_urb_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_canlde_rx_urb_inst : public _exports_canlde_rx_urb_templ<_exports_canlde_rx_urb_inst> {
public:
  using _exports_canlde_rx_urb_templ::_exports_canlde_rx_urb_templ;
  virtual ~_exports_canlde_rx_urb_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_canlde_rx_urb_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_canlde_rx_urb_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: canlde_rx_urb (_exports_canlde_rx_urb) */
// jsnapi_getclass
Napi::Function _exports_canlde_rx_urb_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_canlde_rx_urb_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_canlde_rx_urb_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_canlde_rx_urb_inst>::DefineClass(env, "canlde_rx_urb", symbolTable);
}

void _exports_canlde_rx_urb_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_canlde_rx_urb_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_canlde_rx_urb_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("ovl");
  members.insert({
    "ovl",
      _exports_canlde_rx_urb_templ::InstanceAccessor("ovl",
        &_exports_canlde_rx_urb_templ::_wrap_canlde_rx_urb_ovl_get,
        &_exports_canlde_rx_urb_templ::_wrap_canlde_rx_urb_ovl_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("buf");
  members.insert({
    "buf",
      _exports_canlde_rx_urb_templ::InstanceAccessor("buf",
        &_exports_canlde_rx_urb_templ::_wrap_canlde_rx_urb_buf_get,
        &_exports_canlde_rx_urb_templ::_wrap_canlde_rx_urb_buf_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_device_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_device_t_templ(const Napi::CallbackInfo &);
_exports_candle_device_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_path_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_path_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_friendly_name_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_friendly_name_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_state_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_state_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_last_error_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_last_error_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_error_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_error_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_deviceHandle_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_deviceHandle_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_winUSBHandle_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_winUSBHandle_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_interfaceNumber_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_interfaceNumber_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_bulkInPipe_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_bulkInPipe_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_bulkOutPipe_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_bulkOutPipe_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_dconf_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_dconf_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_bt_const_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_bt_const_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_data_bt_const_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_data_bt_const_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_rxurbs_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_rxurbs_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_device_t_rxevents_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_device_t_rxevents_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_device_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_device_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_device_t_inst : public _exports_candle_device_t_templ<_exports_candle_device_t_inst> {
public:
  using _exports_candle_device_t_templ::_exports_candle_device_t_templ;
  virtual ~_exports_candle_device_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_device_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_device_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_device_t (_exports_candle_device_t) */
// jsnapi_getclass
Napi::Function _exports_candle_device_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_device_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_device_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_device_t_inst>::DefineClass(env, "candle_device_t", symbolTable);
}

void _exports_candle_device_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_device_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_device_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("path");
  members.insert({
    "path",
      _exports_candle_device_t_templ::InstanceAccessor("path",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_path_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_path_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("friendly_name");
  members.insert({
    "friendly_name",
      _exports_candle_device_t_templ::InstanceAccessor("friendly_name",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_friendly_name_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_friendly_name_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("state");
  members.insert({
    "state",
      _exports_candle_device_t_templ::InstanceAccessor("state",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_state_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_state_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("last_error");
  members.insert({
    "last_error",
      _exports_candle_device_t_templ::InstanceAccessor("last_error",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_last_error_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_last_error_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("error");
  members.insert({
    "error",
      _exports_candle_device_t_templ::InstanceAccessor("error",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_error_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_error_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("deviceHandle");
  members.insert({
    "deviceHandle",
      _exports_candle_device_t_templ::InstanceAccessor("deviceHandle",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_deviceHandle_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_deviceHandle_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("winUSBHandle");
  members.insert({
    "winUSBHandle",
      _exports_candle_device_t_templ::InstanceAccessor("winUSBHandle",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_winUSBHandle_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_winUSBHandle_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("interfaceNumber");
  members.insert({
    "interfaceNumber",
      _exports_candle_device_t_templ::InstanceAccessor("interfaceNumber",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_interfaceNumber_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_interfaceNumber_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("bulkInPipe");
  members.insert({
    "bulkInPipe",
      _exports_candle_device_t_templ::InstanceAccessor("bulkInPipe",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bulkInPipe_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bulkInPipe_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("bulkOutPipe");
  members.insert({
    "bulkOutPipe",
      _exports_candle_device_t_templ::InstanceAccessor("bulkOutPipe",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bulkOutPipe_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bulkOutPipe_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dconf");
  members.insert({
    "dconf",
      _exports_candle_device_t_templ::InstanceAccessor("dconf",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_dconf_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_dconf_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("bt_const");
  members.insert({
    "bt_const",
      _exports_candle_device_t_templ::InstanceAccessor("bt_const",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bt_const_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_bt_const_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("data_bt_const");
  members.insert({
    "data_bt_const",
      _exports_candle_device_t_templ::InstanceAccessor("data_bt_const",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_data_bt_const_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_data_bt_const_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rxurbs");
  members.insert({
    "rxurbs",
      _exports_candle_device_t_templ::InstanceAccessor("rxurbs",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_rxurbs_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_rxurbs_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("rxevents");
  members.insert({
    "rxevents",
      _exports_candle_device_t_templ::InstanceAccessor("rxevents",
        &_exports_candle_device_t_templ::_wrap_candle_device_t_rxevents_get,
        &_exports_candle_device_t_templ::_wrap_candle_device_t_rxevents_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_list_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_list_t_templ(const Napi::CallbackInfo &);
_exports_candle_list_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_list_t_num_devices_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_list_t_num_devices_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_list_t_last_error_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_list_t_last_error_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_list_t_dev_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_list_t_dev_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_list_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_list_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_list_t_inst : public _exports_candle_list_t_templ<_exports_candle_list_t_inst> {
public:
  using _exports_candle_list_t_templ::_exports_candle_list_t_templ;
  virtual ~_exports_candle_list_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_list_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_list_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_list_t (_exports_candle_list_t) */
// jsnapi_getclass
Napi::Function _exports_candle_list_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_list_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_list_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_list_t_inst>::DefineClass(env, "candle_list_t", symbolTable);
}

void _exports_candle_list_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_list_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_list_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("num_devices");
  members.insert({
    "num_devices",
      _exports_candle_list_t_templ::InstanceAccessor("num_devices",
        &_exports_candle_list_t_templ::_wrap_candle_list_t_num_devices_get,
        &_exports_candle_list_t_templ::_wrap_candle_list_t_num_devices_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("last_error");
  members.insert({
    "last_error",
      _exports_candle_list_t_templ::InstanceAccessor("last_error",
        &_exports_candle_list_t_templ::_wrap_candle_list_t_last_error_get,
        &_exports_candle_list_t_templ::_wrap_candle_list_t_last_error_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dev");
  members.insert({
    "dev",
      _exports_candle_list_t_templ::InstanceAccessor("dev",
        &_exports_candle_list_t_templ::_wrap_candle_list_t_dev_get,
        &_exports_candle_list_t_templ::_wrap_candle_list_t_dev_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_classic_can_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_classic_can_t_templ(const Napi::CallbackInfo &);
_exports_classic_can_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_classic_can_t_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_classic_can_t_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_classic_can_t_timestamp_us_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_classic_can_t_timestamp_us_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_classic_can_t_dummy_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_classic_can_t_dummy_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_classic_can_t(const Napi::CallbackInfo &);
virtual ~_exports_classic_can_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_classic_can_t_inst : public _exports_classic_can_t_templ<_exports_classic_can_t_inst> {
public:
  using _exports_classic_can_t_templ::_exports_classic_can_t_templ;
  virtual ~_exports_classic_can_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_classic_can_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_classic_can_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: classic_can_t (_exports_classic_can_t) */
// jsnapi_getclass
Napi::Function _exports_classic_can_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_classic_can_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_classic_can_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_classic_can_t_inst>::DefineClass(env, "classic_can_t", symbolTable);
}

void _exports_classic_can_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_classic_can_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_classic_can_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_classic_can_t_templ::InstanceAccessor("data",
        &_exports_classic_can_t_templ::_wrap_classic_can_t_data_get,
        &_exports_classic_can_t_templ::_wrap_classic_can_t_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timestamp_us");
  members.insert({
    "timestamp_us",
      _exports_classic_can_t_templ::InstanceAccessor("timestamp_us",
        &_exports_classic_can_t_templ::_wrap_classic_can_t_timestamp_us_get,
        &_exports_classic_can_t_templ::_wrap_classic_can_t_timestamp_us_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dummy");
  members.insert({
    "dummy",
      _exports_classic_can_t_templ::InstanceAccessor("dummy",
        &_exports_classic_can_t_templ::_wrap_classic_can_t_dummy_get,
        &_exports_classic_can_t_templ::_wrap_classic_can_t_dummy_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_canfd_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_canfd_t_templ(const Napi::CallbackInfo &);
_exports_canfd_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_t_data_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_t_data_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_canfd_t_timestamp_us_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_canfd_t_timestamp_us_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_canfd_t(const Napi::CallbackInfo &);
virtual ~_exports_canfd_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_canfd_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_canfd_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_canfd_t_inst : public _exports_canfd_t_templ<_exports_canfd_t_inst> {
public:
  using _exports_canfd_t_templ::_exports_canfd_t_templ;
  virtual ~_exports_canfd_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_canfd_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_canfd_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: canfd_t (_exports_canfd_t) */
// jsnapi_getclass
Napi::Function _exports_canfd_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_canfd_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_canfd_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_canfd_t_inst>::DefineClass(env, "canfd_t", symbolTable);
}

void _exports_canfd_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_canfd_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_canfd_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("data");
  members.insert({
    "data",
      _exports_canfd_t_templ::InstanceAccessor("data",
        &_exports_canfd_t_templ::_wrap_canfd_t_data_get,
        &_exports_canfd_t_templ::_wrap_canfd_t_data_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("timestamp_us");
  members.insert({
    "timestamp_us",
      _exports_canfd_t_templ::InstanceAccessor("timestamp_us",
        &_exports_canfd_t_templ::_wrap_canfd_t_timestamp_us_get,
        &_exports_canfd_t_templ::_wrap_canfd_t_timestamp_us_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_msg_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_msg_t_templ(const Napi::CallbackInfo &);
_exports_msg_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_msg_t_classic_can_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_msg_t_classic_can_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_msg_t_canfd_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_msg_t_canfd_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_msg_t(const Napi::CallbackInfo &);
virtual ~_exports_msg_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_msg_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_msg_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_msg_t_inst : public _exports_msg_t_templ<_exports_msg_t_inst> {
public:
  using _exports_msg_t_templ::_exports_msg_t_templ;
  virtual ~_exports_msg_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_msg_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_msg_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: msg_t (_exports_msg_t) */
// jsnapi_getclass
Napi::Function _exports_msg_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_msg_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_msg_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_msg_t_inst>::DefineClass(env, "msg_t", symbolTable);
}

void _exports_msg_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_msg_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_msg_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("classic_can");
  members.insert({
    "classic_can",
      _exports_msg_t_templ::InstanceAccessor("classic_can",
        &_exports_msg_t_templ::_wrap_msg_t_classic_can_get,
        &_exports_msg_t_templ::_wrap_msg_t_classic_can_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("canfd");
  members.insert({
    "canfd",
      _exports_msg_t_templ::InstanceAccessor("canfd",
        &_exports_msg_t_templ::_wrap_msg_t_canfd_get,
        &_exports_msg_t_templ::_wrap_msg_t_canfd_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_frame_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_frame_t_templ(const Napi::CallbackInfo &);
_exports_candle_frame_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_echo_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_echo_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_can_id_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_can_id_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_can_dlc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_can_dlc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_channel_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_channel_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_flags_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_flags_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_reserved_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_reserved_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_frame_t_msg_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_frame_t_msg_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_frame_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_frame_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_frame_t_inst : public _exports_candle_frame_t_templ<_exports_candle_frame_t_inst> {
public:
  using _exports_candle_frame_t_templ::_exports_candle_frame_t_templ;
  virtual ~_exports_candle_frame_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_frame_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_frame_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_frame_t (_exports_candle_frame_t) */
// jsnapi_getclass
Napi::Function _exports_candle_frame_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_frame_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_frame_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_frame_t_inst>::DefineClass(env, "candle_frame_t", symbolTable);
}

void _exports_candle_frame_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_frame_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_frame_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("echo_id");
  members.insert({
    "echo_id",
      _exports_candle_frame_t_templ::InstanceAccessor("echo_id",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_echo_id_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_echo_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_id");
  members.insert({
    "can_id",
      _exports_candle_frame_t_templ::InstanceAccessor("can_id",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_can_id_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_can_id_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("can_dlc");
  members.insert({
    "can_dlc",
      _exports_candle_frame_t_templ::InstanceAccessor("can_dlc",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_can_dlc_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_can_dlc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("channel");
  members.insert({
    "channel",
      _exports_candle_frame_t_templ::InstanceAccessor("channel",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_channel_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_channel_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("flags");
  members.insert({
    "flags",
      _exports_candle_frame_t_templ::InstanceAccessor("flags",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_flags_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_flags_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("reserved");
  members.insert({
    "reserved",
      _exports_candle_frame_t_templ::InstanceAccessor("reserved",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_reserved_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_reserved_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("msg");
  members.insert({
    "msg",
      _exports_candle_frame_t_templ::InstanceAccessor("msg",
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_msg_get,
        &_exports_candle_frame_t_templ::_wrap_candle_frame_t_msg_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_capability_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_capability_t_templ(const Napi::CallbackInfo &);
_exports_candle_capability_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_feature_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_feature_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_fclk_can_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_fclk_can_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_tseg1_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_tseg1_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_tseg1_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_tseg1_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_tseg2_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_tseg2_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_tseg2_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_tseg2_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_sjw_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_sjw_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_brp_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_brp_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_brp_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_brp_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_t_brp_inc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_t_brp_inc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_capability_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_capability_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_capability_t_inst : public _exports_candle_capability_t_templ<_exports_candle_capability_t_inst> {
public:
  using _exports_candle_capability_t_templ::_exports_candle_capability_t_templ;
  virtual ~_exports_candle_capability_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_capability_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_capability_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_capability_t (_exports_candle_capability_t) */
// jsnapi_getclass
Napi::Function _exports_candle_capability_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_capability_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_capability_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_capability_t_inst>::DefineClass(env, "candle_capability_t", symbolTable);
}

void _exports_candle_capability_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_capability_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_capability_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("feature");
  members.insert({
    "feature",
      _exports_candle_capability_t_templ::InstanceAccessor("feature",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_feature_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_feature_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fclk_can");
  members.insert({
    "fclk_can",
      _exports_candle_capability_t_templ::InstanceAccessor("fclk_can",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_fclk_can_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_fclk_can_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg1_min");
  members.insert({
    "tseg1_min",
      _exports_candle_capability_t_templ::InstanceAccessor("tseg1_min",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg1_min_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg1_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg1_max");
  members.insert({
    "tseg1_max",
      _exports_candle_capability_t_templ::InstanceAccessor("tseg1_max",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg1_max_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg1_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg2_min");
  members.insert({
    "tseg2_min",
      _exports_candle_capability_t_templ::InstanceAccessor("tseg2_min",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg2_min_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg2_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg2_max");
  members.insert({
    "tseg2_max",
      _exports_candle_capability_t_templ::InstanceAccessor("tseg2_max",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg2_max_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_tseg2_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sjw_max");
  members.insert({
    "sjw_max",
      _exports_candle_capability_t_templ::InstanceAccessor("sjw_max",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_sjw_max_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_sjw_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_min");
  members.insert({
    "brp_min",
      _exports_candle_capability_t_templ::InstanceAccessor("brp_min",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_min_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_max");
  members.insert({
    "brp_max",
      _exports_candle_capability_t_templ::InstanceAccessor("brp_max",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_max_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_inc");
  members.insert({
    "brp_inc",
      _exports_candle_capability_t_templ::InstanceAccessor("brp_inc",
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_inc_get,
        &_exports_candle_capability_t_templ::_wrap_candle_capability_t_brp_inc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_capability_extended_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_capability_extended_t_templ(const Napi::CallbackInfo &);
_exports_candle_capability_extended_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_feature_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_feature_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_fclk_can_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_fclk_can_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_tseg1_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_tseg1_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_tseg1_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_tseg1_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_tseg2_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_tseg2_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_tseg2_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_tseg2_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_sjw_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_sjw_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_brp_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_brp_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_brp_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_brp_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_brp_inc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_brp_inc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dttseg1_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dttseg1_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dttseg1_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dttseg1_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dttseg2_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dttseg2_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dttseg2_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dttseg2_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dtsjw_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dtsjw_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dtbrp_min_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dtbrp_min_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dtbrp_max_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dtbrp_max_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_capability_extended_t_dtbrp_inc_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_capability_extended_t_dtbrp_inc_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_capability_extended_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_capability_extended_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_capability_extended_t_inst : public _exports_candle_capability_extended_t_templ<_exports_candle_capability_extended_t_inst> {
public:
  using _exports_candle_capability_extended_t_templ::_exports_candle_capability_extended_t_templ;
  virtual ~_exports_candle_capability_extended_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_capability_extended_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_capability_extended_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_capability_extended_t (_exports_candle_capability_extended_t) */
// jsnapi_getclass
Napi::Function _exports_candle_capability_extended_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_capability_extended_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_capability_extended_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_capability_extended_t_inst>::DefineClass(env, "candle_capability_extended_t", symbolTable);
}

void _exports_candle_capability_extended_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_capability_extended_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_capability_extended_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("feature");
  members.insert({
    "feature",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("feature",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_feature_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_feature_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("fclk_can");
  members.insert({
    "fclk_can",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("fclk_can",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_fclk_can_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_fclk_can_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg1_min");
  members.insert({
    "tseg1_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("tseg1_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg1_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg1_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg1_max");
  members.insert({
    "tseg1_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("tseg1_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg1_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg1_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg2_min");
  members.insert({
    "tseg2_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("tseg2_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg2_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg2_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("tseg2_max");
  members.insert({
    "tseg2_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("tseg2_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg2_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_tseg2_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sjw_max");
  members.insert({
    "sjw_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("sjw_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_sjw_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_sjw_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_min");
  members.insert({
    "brp_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("brp_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_max");
  members.insert({
    "brp_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("brp_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp_inc");
  members.insert({
    "brp_inc",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("brp_inc",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_inc_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_brp_inc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dttseg1_min");
  members.insert({
    "dttseg1_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dttseg1_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg1_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg1_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dttseg1_max");
  members.insert({
    "dttseg1_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dttseg1_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg1_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg1_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dttseg2_min");
  members.insert({
    "dttseg2_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dttseg2_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg2_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg2_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dttseg2_max");
  members.insert({
    "dttseg2_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dttseg2_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg2_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dttseg2_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dtsjw_max");
  members.insert({
    "dtsjw_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dtsjw_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtsjw_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtsjw_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dtbrp_min");
  members.insert({
    "dtbrp_min",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dtbrp_min",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_min_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_min_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dtbrp_max");
  members.insert({
    "dtbrp_max",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dtbrp_max",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_max_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_max_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("dtbrp_inc");
  members.insert({
    "dtbrp_inc",
      _exports_candle_capability_extended_t_templ::InstanceAccessor("dtbrp_inc",
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_inc_get,
        &_exports_candle_capability_extended_t_templ::_wrap_candle_capability_extended_t_dtbrp_inc_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}
// jsnapi_class_prologue_template
template <typename SWIG_OBJ_WRAP>
class _exports_candle_bittiming_t_templ : public SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP> {
public:
  _exports_candle_bittiming_t_templ(const Napi::CallbackInfo &);
_exports_candle_bittiming_t_templ(bool, const Napi::CallbackInfo &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_bittiming_t_prop_seg_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_bittiming_t_prop_seg_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_bittiming_t_phase_seg1_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_bittiming_t_phase_seg1_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_bittiming_t_phase_seg2_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_bittiming_t_phase_seg2_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_bittiming_t_sjw_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_bittiming_t_sjw_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_candle_bittiming_t_brp_get(const Napi::CallbackInfo &);
// jsnapi_class_setter_declaration
void _wrap_candle_bittiming_t_brp_set(const Napi::CallbackInfo &, const Napi::Value &);
// jsnapi_class_method_declaration
Napi::Value _wrap_new_candle_bittiming_t(const Napi::CallbackInfo &);
virtual ~_exports_candle_bittiming_t_templ();
// jsnapi_class_epilogue_template
static void JS_veto_set_static_variable(const Napi::CallbackInfo &, const Napi::Value &);
void JS_veto_set_variable(const Napi::CallbackInfo &, const Napi::Value &);
};

template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_static_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}

template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::JS_veto_set_variable(const Napi::CallbackInfo &info, const Napi::Value &value) {
SWIG_NAPI_Raise(info.Env(), "Tried to write read-only variable.");
}
// jsnapi_class_instance
class _exports_candle_bittiming_t_inst : public _exports_candle_bittiming_t_templ<_exports_candle_bittiming_t_inst> {
public:
  using _exports_candle_bittiming_t_templ::_exports_candle_bittiming_t_templ;
  virtual ~_exports_candle_bittiming_t_inst() {
    
  };
  static void GetMembers(
    Napi::Env,
    std::map<std::string, _exports_candle_bittiming_t_templ::PropertyDescriptor> &,
    std::map<std::string, _exports_candle_bittiming_t_templ::PropertyDescriptor> &
    );
  static Napi::Function GetClass(Napi::Env);
};
/* Class: candle_bittiming_t (_exports_candle_bittiming_t) */
// jsnapi_getclass
Napi::Function _exports_candle_bittiming_t_inst::GetClass(Napi::Env env) {
  std::map<std::string, _exports_candle_bittiming_t_templ::PropertyDescriptor> members, staticMembers;
  GetMembers(env, members, staticMembers);
  
  std::vector<_exports_candle_bittiming_t_inst::PropertyDescriptor> symbolTable;
  for (auto it = members.begin(); it != members.end(); it++)
  symbolTable.push_back(it->second);
  for (auto it = staticMembers.begin(); it != staticMembers.end(); it++)
  symbolTable.push_back(it->second);
  
  return Napi::ObjectWrap<_exports_candle_bittiming_t_inst>::DefineClass(env, "candle_bittiming_t", symbolTable);
}

void _exports_candle_bittiming_t_inst::GetMembers(
  Napi::Env env,
  std::map<std::string, _exports_candle_bittiming_t_templ::PropertyDescriptor> &members,
  std::map<std::string, _exports_candle_bittiming_t_templ::PropertyDescriptor> &staticMembers
  ) {
  std::map<std::string, SWIG_NAPI_ObjectWrap_templ<SWIG_NAPI_ObjectWrap_inst>::PropertyDescriptor> baseMembers, baseStaticMembers;
  SWIG_NAPI_ObjectWrap_inst::GetMembers(env, baseMembers, baseStaticMembers);
  members.insert(baseMembers.begin(), baseMembers.end());
  staticMembers.insert(staticMembers.begin(), staticMembers.end());
  
  /* register wrapper functions */
  // jsnapi_register_member_variable
  members.erase("prop_seg");
  members.insert({
    "prop_seg",
      _exports_candle_bittiming_t_templ::InstanceAccessor("prop_seg",
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_prop_seg_get,
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_prop_seg_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("phase_seg1");
  members.insert({
    "phase_seg1",
      _exports_candle_bittiming_t_templ::InstanceAccessor("phase_seg1",
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_phase_seg1_get,
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_phase_seg1_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("phase_seg2");
  members.insert({
    "phase_seg2",
      _exports_candle_bittiming_t_templ::InstanceAccessor("phase_seg2",
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_phase_seg2_get,
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_phase_seg2_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("sjw");
  members.insert({
    "sjw",
      _exports_candle_bittiming_t_templ::InstanceAccessor("sjw",
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_sjw_get,
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_sjw_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  // jsnapi_register_member_variable
  members.erase("brp");
  members.insert({
    "brp",
      _exports_candle_bittiming_t_templ::InstanceAccessor("brp",
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_brp_get,
        &_exports_candle_bittiming_t_templ::_wrap_candle_bittiming_t_brp_set,
        static_cast<napi_property_attributes>(napi_writable | napi_enumerable | napi_configurable))
    });
  
  /* add static class functions and variables */
  
}





template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_TS_templ<SWIG_OBJ_WRAP>::_exports_TS_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_TS;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  TS *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_TS.");
  }
  result = (TS *)new_TS();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_TS_templ<SWIG_OBJ_WRAP>::_exports_TS_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_TS(TS *self){
  delete self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_TS_templ<SWIG_OBJ_WRAP>::~_exports_TS_templ() {
  auto arg1 = reinterpret_cast<TS *>(this->self);
  if (this->owned && arg1) {
    delete_TS(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TS_templ<SWIG_OBJ_WRAP>::_wrap_TS_assign(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TS *arg1 = (TS *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TS_assign.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TS_assign" "', argument " "1"" of type '" "TS *""'"); 
  }
  arg1 = reinterpret_cast< TS * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TS_assign" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);TS_assign(arg1,arg2);
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TS_templ<SWIG_OBJ_WRAP>::_wrap_TS_value(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TS *arg1 = (TS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TS_value.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TS_value" "', argument " "1"" of type '" "TS *""'"); 
  }
  arg1 = reinterpret_cast< TS * >(argp1);result = (uint32_t)TS_value(arg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TS_templ<SWIG_OBJ_WRAP>::_wrap_TS_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  TS *arg1 = (TS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TS_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_TS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TS_cast" "', argument " "1"" of type '" "TS *""'"); 
  }
  arg1 = reinterpret_cast< TS * >(argp1);result = (uint32_t *)TS_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_int, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_TS_templ<SWIG_OBJ_WRAP>::_wrap_TS_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint32_t *arg1 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  TS *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_TS_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TS_frompointer" "', argument " "1"" of type '" "uint32_t *""'"); 
  }
  arg1 = reinterpret_cast< uint32_t * >(argp1);result = (TS *)TS_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TS, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_U8Array_templ<SWIG_OBJ_WRAP>::_exports_U8Array_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_U8Array;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  U8Array *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_U8Array.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_U8Array" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (U8Array *)new_U8Array(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_U8Array_templ<SWIG_OBJ_WRAP>::_exports_U8Array_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_U8Array(U8Array *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_U8Array_templ<SWIG_OBJ_WRAP>::~_exports_U8Array_templ() {
  auto arg1 = reinterpret_cast<U8Array *>(this->self);
  if (this->owned && arg1) {
    delete_U8Array(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U8Array_templ<SWIG_OBJ_WRAP>::_wrap_U8Array_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U8Array *arg1 = (U8Array *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U8Array_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U8Array_getitem" "', argument " "1"" of type '" "U8Array *""'"); 
  }
  arg1 = reinterpret_cast< U8Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "U8Array_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (uint8_t)U8Array_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U8Array_templ<SWIG_OBJ_WRAP>::_wrap_U8Array_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U8Array *arg1 = (U8Array *) 0 ;
  size_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U8Array_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U8Array_setitem" "', argument " "1"" of type '" "U8Array *""'"); 
  }
  arg1 = reinterpret_cast< U8Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "U8Array_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_char(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "U8Array_setitem" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);U8Array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U8Array_templ<SWIG_OBJ_WRAP>::_wrap_U8Array_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  U8Array *arg1 = (U8Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U8Array_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_U8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U8Array_cast" "', argument " "1"" of type '" "U8Array *""'"); 
  }
  arg1 = reinterpret_cast< U8Array * >(argp1);result = (uint8_t *)U8Array_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_U8Array_templ<SWIG_OBJ_WRAP>::_wrap_U8Array_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  U8Array *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_U8Array_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "U8Array_frompointer" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);result = (U8Array *)U8Array_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_U8Array, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_exports_DeviceArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_DeviceArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  DeviceArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_DeviceArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DeviceArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (DeviceArray *)new_DeviceArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_exports_DeviceArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_DeviceArray(DeviceArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_DeviceArray_templ<SWIG_OBJ_WRAP>::~_exports_DeviceArray_templ() {
  auto arg1 = reinterpret_cast<DeviceArray *>(this->self);
  if (this->owned && arg1) {
    delete_DeviceArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_wrap_DeviceArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DeviceArray *arg1 = (DeviceArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  candle_device_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DeviceArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DeviceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeviceArray_getitem" "', argument " "1"" of type '" "DeviceArray *""'"); 
  }
  arg1 = reinterpret_cast< DeviceArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeviceArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = DeviceArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_NewPointerObj((new candle_device_t(result)), SWIGTYPE_p_candle_device_t, SWIG_POINTER_OWN |  0 );
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_wrap_DeviceArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DeviceArray *arg1 = (DeviceArray *) 0 ;
  size_t arg2 ;
  candle_device_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DeviceArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DeviceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeviceArray_setitem" "', argument " "1"" of type '" "DeviceArray *""'"); 
  }
  arg1 = reinterpret_cast< DeviceArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DeviceArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);{
    {
      res3 = SWIG_ConvertPtr(info[1], &argp3, SWIGTYPE_p_candle_device_t,  0 );
      if (!SWIG_IsOK(res3)) {
        SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DeviceArray_setitem" "', argument " "3"" of type '" "candle_device_t""'"); 
      }  
      if (!argp3) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DeviceArray_setitem" "', argument " "3"" of type '" "candle_device_t""'");
      } else {
        arg3 = *(reinterpret_cast< candle_device_t * >(argp3));
      }
    }
  }
  DeviceArray_setitem(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jsresult = env.Undefined();
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_wrap_DeviceArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  DeviceArray *arg1 = (DeviceArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_device_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DeviceArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_DeviceArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeviceArray_cast" "', argument " "1"" of type '" "DeviceArray *""'"); 
  }
  arg1 = reinterpret_cast< DeviceArray * >(argp1);result = (candle_device_t *)DeviceArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_candle_device_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_DeviceArray_templ<SWIG_OBJ_WRAP>::_wrap_DeviceArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DeviceArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_DeviceArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DeviceArray_frompointer" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (DeviceArray *)DeviceArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DeviceArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_CharArray_templ<SWIG_OBJ_WRAP>::_exports_CharArray_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_CharArray;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  CharArray *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_CharArray.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharArray" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (CharArray *)new_CharArray(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_CharArray_templ<SWIG_OBJ_WRAP>::_exports_CharArray_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_CharArray(CharArray *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_CharArray_templ<SWIG_OBJ_WRAP>::~_exports_CharArray_templ() {
  auto arg1 = reinterpret_cast<CharArray *>(this->self);
  if (this->owned && arg1) {
    delete_CharArray(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CharArray_templ<SWIG_OBJ_WRAP>::_wrap_CharArray_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CharArray *arg1 = (CharArray *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  uint16_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CharArray_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CharArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharArray_getitem" "', argument " "1"" of type '" "CharArray *""'"); 
  }
  arg1 = reinterpret_cast< CharArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharArray_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (uint16_t)CharArray_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_short  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned short >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CharArray_templ<SWIG_OBJ_WRAP>::_wrap_CharArray_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CharArray *arg1 = (CharArray *) 0 ;
  size_t arg2 ;
  uint16_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned short val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CharArray_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CharArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharArray_setitem" "', argument " "1"" of type '" "CharArray *""'"); 
  }
  arg1 = reinterpret_cast< CharArray * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharArray_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_short(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharArray_setitem" "', argument " "3"" of type '" "uint16_t""'");
  } 
  arg3 = static_cast< uint16_t >(val3);CharArray_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CharArray_templ<SWIG_OBJ_WRAP>::_wrap_CharArray_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  CharArray *arg1 = (CharArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CharArray_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_CharArray, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharArray_cast" "', argument " "1"" of type '" "CharArray *""'"); 
  }
  arg1 = reinterpret_cast< CharArray * >(argp1);result = (uint16_t *)CharArray_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_short, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_CharArray_templ<SWIG_OBJ_WRAP>::_wrap_CharArray_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint16_t *arg1 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  CharArray *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_CharArray_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_short, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharArray_frompointer" "', argument " "1"" of type '" "uint16_t *""'"); 
  }
  arg1 = reinterpret_cast< uint16_t * >(argp1);result = (CharArray *)CharArray_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CharArray, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_exports_Uint8Array_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_Uint8Array;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  size_t arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  Uint8Array *result;
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_Uint8Array.");
  }
  ecode1 = SWIG_AsVal_size_t(info[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Uint8Array" "', argument " "1"" of type '" "size_t""'");
  } 
  arg1 = static_cast< size_t >(val1);result = (Uint8Array *)new_Uint8Array(SWIG_STD_MOVE(arg1));
  
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_exports_Uint8Array_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}

SWIGINTERN void delete_Uint8Array(Uint8Array *self){
  delete [] self;
}

// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_Uint8Array_templ<SWIG_OBJ_WRAP>::~_exports_Uint8Array_templ() {
  auto arg1 = reinterpret_cast<Uint8Array *>(this->self);
  if (this->owned && arg1) {
    delete_Uint8Array(arg1);
    this->self = nullptr;
  }
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_wrap_Uint8Array_getitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Uint8Array *arg1 = (Uint8Array *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Uint8Array_getitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uint8Array_getitem" "', argument " "1"" of type '" "Uint8Array *""'"); 
  }
  arg1 = reinterpret_cast< Uint8Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uint8Array_getitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);result = (uint8_t)Uint8Array_getitem(arg1,SWIG_STD_MOVE(arg2));
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_wrap_Uint8Array_setitem(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Uint8Array *arg1 = (Uint8Array *) 0 ;
  size_t arg2 ;
  uint8_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Uint8Array_setitem.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uint8Array_setitem" "', argument " "1"" of type '" "Uint8Array *""'"); 
  }
  arg1 = reinterpret_cast< Uint8Array * >(argp1);ecode2 = SWIG_AsVal_size_t(info[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Uint8Array_setitem" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_char(info[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Uint8Array_setitem" "', argument " "3"" of type '" "uint8_t""'");
  } 
  arg3 = static_cast< uint8_t >(val3);Uint8Array_setitem(arg1,SWIG_STD_MOVE(arg2),arg3);
  jsresult = env.Undefined();
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_wrap_Uint8Array_cast(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  Uint8Array *arg1 = (Uint8Array *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Uint8Array_cast.");
  }
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_Uint8Array, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uint8Array_cast" "', argument " "1"" of type '" "Uint8Array *""'"); 
  }
  arg1 = reinterpret_cast< Uint8Array * >(argp1);result = (uint8_t *)Uint8Array_cast(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_function
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_Uint8Array_templ<SWIG_OBJ_WRAP>::_wrap_Uint8Array_frompointer(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  uint8_t *arg1 = (uint8_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Uint8Array *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_Uint8Array_frompointer.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Uint8Array_frompointer" "', argument " "1"" of type '" "uint8_t *""'"); 
  }
  arg1 = reinterpret_cast< uint8_t * >(argp1);result = (Uint8Array *)Uint8Array_frompointer(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Uint8Array, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MAX_DEVICES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(32));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_URB_COUNT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(30));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_RX_BUF_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(512));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_host_config_t_byte_order_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_host_config_t *arg1 = (candle_host_config_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_host_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_host_config_t_byte_order_set" "', argument " "1"" of type '" "candle_host_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_host_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_host_config_t_byte_order_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->byte_order = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_host_config_t_byte_order_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_host_config_t *arg1 = (candle_host_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_host_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_host_config_t_byte_order_get" "', argument " "1"" of type '" "candle_host_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_host_config_t * >(argp1);result = (uint32_t) ((arg1)->byte_order);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::_exports_candle_host_config_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_host_config_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_host_config_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_host_config_t.");
  }
  result = (candle_host_config_t *)new candle_host_config_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::_exports_candle_host_config_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_host_config_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_host_config_t_templ() {
  auto arg1 = reinterpret_cast<candle_host_config_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved1_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_reserved1_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->reserved1 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved1_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint8_t) ((arg1)->reserved1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved2_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved2_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_reserved2_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->reserved2 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved2_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint8_t) ((arg1)->reserved2);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved3_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved3_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_reserved3_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->reserved3 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_reserved3_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_reserved3_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint8_t) ((arg1)->reserved3);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_icount_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_icount_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_icount_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->icount = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_icount_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_icount_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint8_t) ((arg1)->icount);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_sw_version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_sw_version_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_sw_version_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sw_version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_sw_version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_sw_version_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint32_t) ((arg1)->sw_version);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_hw_version_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_hw_version_set" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_config_t_hw_version_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->hw_version = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_config_t_hw_version_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_config_t *arg1 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_config_t_hw_version_get" "', argument " "1"" of type '" "candle_device_config_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_config_t * >(argp1);result = (uint32_t) ((arg1)->hw_version);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_config_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_device_config_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_device_config_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_device_config_t.");
  }
  result = (candle_device_config_t *)new candle_device_config_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_config_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_config_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_device_config_t_templ() {
  auto arg1 = reinterpret_cast<candle_device_config_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_mode_t_mode_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_mode_t *arg1 = (candle_device_mode_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_mode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_mode_t_mode_set" "', argument " "1"" of type '" "candle_device_mode_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_mode_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_mode_t_mode_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->mode = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_mode_t_mode_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_mode_t *arg1 = (candle_device_mode_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_mode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_mode_t_mode_get" "', argument " "1"" of type '" "candle_device_mode_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_mode_t * >(argp1);result = (uint32_t) ((arg1)->mode);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_mode_t_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_mode_t *arg1 = (candle_device_mode_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_mode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_mode_t_flags_set" "', argument " "1"" of type '" "candle_device_mode_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_mode_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_mode_t_flags_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_mode_t_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_mode_t *arg1 = (candle_device_mode_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_mode_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_mode_t_flags_get" "', argument " "1"" of type '" "candle_device_mode_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_mode_t * >(argp1);result = (uint32_t) ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_mode_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_device_mode_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_device_mode_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_device_mode_t.");
  }
  result = (candle_device_mode_t *)new candle_device_mode_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_mode_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_mode_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_device_mode_t_templ() {
  auto arg1 = reinterpret_cast<candle_device_mode_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_wrap_canlde_rx_urb_ovl_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canlde_rx_urb *arg1 = (canlde_rx_urb *) 0 ;
  OVERLAPPED arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canlde_rx_urb_ovl_set" "', argument " "1"" of type '" "canlde_rx_urb *""'"); 
  }
  arg1 = reinterpret_cast< canlde_rx_urb * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_OVERLAPPED,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "canlde_rx_urb_ovl_set" "', argument " "2"" of type '" "OVERLAPPED""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "canlde_rx_urb_ovl_set" "', argument " "2"" of type '" "OVERLAPPED""'");
      } else {
        arg2 = *(reinterpret_cast< OVERLAPPED * >(argp2));
      }
    }
  }
  if (arg1) (arg1)->ovl = arg2;
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_wrap_canlde_rx_urb_ovl_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canlde_rx_urb *arg1 = (canlde_rx_urb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  OVERLAPPED result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canlde_rx_urb_ovl_get" "', argument " "1"" of type '" "canlde_rx_urb *""'"); 
  }
  arg1 = reinterpret_cast< canlde_rx_urb * >(argp1);result =  ((arg1)->ovl);
  jsresult = SWIG_NewPointerObj((new OVERLAPPED(result)), SWIGTYPE_p_OVERLAPPED, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_wrap_canlde_rx_urb_buf_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canlde_rx_urb *arg1 = (canlde_rx_urb *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canlde_rx_urb_buf_set" "', argument " "1"" of type '" "canlde_rx_urb *""'"); 
  }
  arg1 = reinterpret_cast< canlde_rx_urb * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "canlde_rx_urb_buf_set" "', argument " "2"" of type '" "uint8_t [512]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)512; ++ii) *(uint8_t *)&arg1->buf[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""buf""' of type '""uint8_t [512]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_wrap_canlde_rx_urb_buf_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canlde_rx_urb *arg1 = (canlde_rx_urb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canlde_rx_urb_buf_get" "', argument " "1"" of type '" "canlde_rx_urb *""'"); 
  }
  arg1 = reinterpret_cast< canlde_rx_urb * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->buf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_exports_canlde_rx_urb_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_canlde_rx_urb;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  canlde_rx_urb *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_canlde_rx_urb.");
  }
  result = (canlde_rx_urb *)new canlde_rx_urb();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::_exports_canlde_rx_urb_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_canlde_rx_urb_templ<SWIG_OBJ_WRAP>::~_exports_canlde_rx_urb_templ() {
  auto arg1 = reinterpret_cast<canlde_rx_urb *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_path_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) (wchar_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_path_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_wchar_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_path_set" "', argument " "2"" of type '" "wchar_t [256]""'"); 
  } 
  arg2 = reinterpret_cast< wchar_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)256; ++ii) *(wchar_t *)&arg1->path[ii] = *((wchar_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""path""' of type '""wchar_t [256]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_path_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  wchar_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_path_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (wchar_t *)(wchar_t *) ((arg1)->path);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wchar_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_friendly_name_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[256] ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_friendly_name_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_AsCharArray(value, temp2, 256);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_friendly_name_set" "', argument " "2"" of type '" "char [256]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);if (arg2) memcpy(arg1->friendly_name,arg2,256*sizeof(char));
  else memset(arg1->friendly_name,0,256*sizeof(char));
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_friendly_name_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_friendly_name_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (char *)(char *) ((arg1)->friendly_name);
  {
    size_t size = SWIG_strnlen(result, 256);
    
    
    
    jsresult = SWIG_FromCharPtrAndSize(result, size);
  }
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_state_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  candle_devstate_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_state_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_state_set" "', argument " "2"" of type '" "candle_devstate_t""'");
  } 
  arg2 = static_cast< candle_devstate_t >(val2);if (arg1) (arg1)->state = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_state_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_devstate_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_state_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (candle_devstate_t) ((arg1)->state);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_last_error_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  candle_err_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_last_error_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_last_error_set" "', argument " "2"" of type '" "candle_err_t""'");
  } 
  arg2 = static_cast< candle_err_t >(val2);if (arg1) (arg1)->last_error = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_last_error_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_err_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_last_error_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (candle_err_t) ((arg1)->last_error);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_error_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  DWORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_error_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_long(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_error_set" "', argument " "2"" of type '" "DWORD""'");
  } 
  arg2 = static_cast< DWORD >(val2);if (arg1) (arg1)->error = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_error_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  DWORD result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_error_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (DWORD) ((arg1)->error);
  jsresult = SWIG_From_unsigned_SS_long  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned long >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_deviceHandle_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  HANDLE arg2 = (HANDLE) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_deviceHandle_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value,SWIG_as_voidptrptr(&arg2), 0, SWIG_POINTER_DISOWN);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_deviceHandle_set" "', argument " "2"" of type '" "HANDLE""'"); 
  }if (arg1) (arg1)->deviceHandle = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_deviceHandle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HANDLE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_deviceHandle_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (HANDLE) ((arg1)->deviceHandle);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_winUSBHandle_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  WINUSB_INTERFACE_HANDLE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_winUSBHandle_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);{
    {
      res2 = SWIG_ConvertPtr(value, &argp2, SWIGTYPE_p_WINUSB_INTERFACE_HANDLE,  0 );
      if (!SWIG_IsOK(res2)) {
        SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_winUSBHandle_set" "', argument " "2"" of type '" "WINUSB_INTERFACE_HANDLE""'"); 
      }  
      if (!argp2) {
        SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "candle_device_t_winUSBHandle_set" "', argument " "2"" of type '" "WINUSB_INTERFACE_HANDLE""'");
      } else {
        arg2 = *(reinterpret_cast< WINUSB_INTERFACE_HANDLE * >(argp2));
      }
    }
  }
  if (arg1) (arg1)->winUSBHandle = arg2;
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_winUSBHandle_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  WINUSB_INTERFACE_HANDLE result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_winUSBHandle_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result =  ((arg1)->winUSBHandle);
  jsresult = SWIG_NewPointerObj((new WINUSB_INTERFACE_HANDLE(result)), SWIGTYPE_p_WINUSB_INTERFACE_HANDLE, SWIG_POINTER_OWN |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_interfaceNumber_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  UCHAR arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_interfaceNumber_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_interfaceNumber_set" "', argument " "2"" of type '" "UCHAR""'");
  } 
  arg2 = static_cast< UCHAR >(val2);if (arg1) (arg1)->interfaceNumber = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_interfaceNumber_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UCHAR result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_interfaceNumber_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (UCHAR) ((arg1)->interfaceNumber);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bulkInPipe_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  UCHAR arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bulkInPipe_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_bulkInPipe_set" "', argument " "2"" of type '" "UCHAR""'");
  } 
  arg2 = static_cast< UCHAR >(val2);if (arg1) (arg1)->bulkInPipe = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bulkInPipe_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UCHAR result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bulkInPipe_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (UCHAR) ((arg1)->bulkInPipe);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bulkOutPipe_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  UCHAR arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bulkOutPipe_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_device_t_bulkOutPipe_set" "', argument " "2"" of type '" "UCHAR""'");
  } 
  arg2 = static_cast< UCHAR >(val2);if (arg1) (arg1)->bulkOutPipe = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bulkOutPipe_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  UCHAR result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bulkOutPipe_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (UCHAR) ((arg1)->bulkOutPipe);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_dconf_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  candle_device_config_t *arg2 = (candle_device_config_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_dconf_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_dconf_set" "', argument " "2"" of type '" "candle_device_config_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_device_config_t * >(argp2);if (arg1) (arg1)->dconf = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_dconf_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_device_config_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_dconf_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (candle_device_config_t *)& ((arg1)->dconf);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_candle_device_config_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bt_const_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  candle_capability_t *arg2 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bt_const_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_bt_const_set" "', argument " "2"" of type '" "candle_capability_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_capability_t * >(argp2);if (arg1) (arg1)->bt_const = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_bt_const_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_capability_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_bt_const_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (candle_capability_t *)& ((arg1)->bt_const);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_candle_capability_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_data_bt_const_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  candle_capability_t *arg2 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_data_bt_const_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_data_bt_const_set" "', argument " "2"" of type '" "candle_capability_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_capability_t * >(argp2);if (arg1) (arg1)->data_bt_const = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_data_bt_const_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_capability_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_data_bt_const_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (candle_capability_t *)& ((arg1)->data_bt_const);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_candle_capability_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_rxurbs_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  canlde_rx_urb *arg2 = (canlde_rx_urb *) (canlde_rx_urb *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_rxurbs_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_rxurbs_set" "', argument " "2"" of type '" "canlde_rx_urb [30]""'"); 
  } 
  arg2 = reinterpret_cast< canlde_rx_urb * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)30; ++ii) *(canlde_rx_urb *)&arg1->rxurbs[ii] = *((canlde_rx_urb *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""rxurbs""' of type '""canlde_rx_urb [30]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_rxurbs_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canlde_rx_urb *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_rxurbs_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (canlde_rx_urb *)(canlde_rx_urb *) ((arg1)->rxurbs);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_canlde_rx_urb, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_rxevents_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  HANDLE *arg2 = (HANDLE *) (HANDLE *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_rxevents_set" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_p_void, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_device_t_rxevents_set" "', argument " "2"" of type '" "HANDLE [30]""'"); 
  } 
  arg2 = reinterpret_cast< HANDLE * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)30; ++ii) *(HANDLE *)&arg1->rxevents[ii] = *((HANDLE *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""rxevents""' of type '""HANDLE [30]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_device_t_rxevents_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  HANDLE *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_device_t_rxevents_get" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = (HANDLE *)(HANDLE *) ((arg1)->rxevents);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_p_void, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_device_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_device_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_device_t.");
  }
  result = (candle_device_t *)new candle_device_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_t_templ<SWIG_OBJ_WRAP>::_exports_candle_device_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_device_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_device_t_templ() {
  auto arg1 = reinterpret_cast<candle_device_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_num_devices_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_num_devices_set" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_list_t_num_devices_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->num_devices = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_num_devices_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_num_devices_get" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);result = (uint8_t) ((arg1)->num_devices);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_last_error_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  candle_err_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_last_error_set" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);ecode2 = SWIG_AsVal_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_list_t_last_error_set" "', argument " "2"" of type '" "candle_err_t""'");
  } 
  arg2 = static_cast< candle_err_t >(val2);if (arg1) (arg1)->last_error = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_last_error_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_err_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_last_error_get" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);result = (candle_err_t) ((arg1)->last_error);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_dev_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  candle_device_t *arg2 = (candle_device_t *) (candle_device_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_dev_set" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_list_t_dev_set" "', argument " "2"" of type '" "candle_device_t [32]""'"); 
  } 
  arg2 = reinterpret_cast< candle_device_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)32; ++ii) *(candle_device_t *)&arg1->dev[ii] = *((candle_device_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dev""' of type '""candle_device_t [32]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_list_t_dev_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_t *arg1 = (candle_list_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_device_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_list_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_t_dev_get" "', argument " "1"" of type '" "candle_list_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_list_t * >(argp1);result = (candle_device_t *)(candle_device_t *) ((arg1)->dev);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_candle_device_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_exports_candle_list_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_list_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_list_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_list_t.");
  }
  result = (candle_list_t *)new candle_list_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_list_t_templ<SWIG_OBJ_WRAP>::_exports_candle_list_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_list_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_list_t_templ() {
  auto arg1 = reinterpret_cast<candle_list_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_getter
Napi::Value exports_CANDLE_DEVSTATE_AVAIL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_DEVSTATE_AVAIL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_DEVSTATE_INUSE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_DEVSTATE_INUSE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FRAMETYPE_UNKNOWN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FRAMETYPE_UNKNOWN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FRAMETYPE_RECEIVE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FRAMETYPE_RECEIVE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FRAMETYPE_ECHO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FRAMETYPE_ECHO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FRAMETYPE_ERROR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FRAMETYPE_ERROR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FRAMETYPE_TIMESTAMP_OVFL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FRAMETYPE_TIMESTAMP_OVFL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ID_EXTENDED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ID_EXTENDED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ID_RTR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ID_RTR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ID_ERR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ID_ERR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FLAG_OVERFLOW_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FLAG_OVERFLOW));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FLAG_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FLAG_FD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FLAG_BRS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FLAG_BRS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_FLAG_ESI_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_FLAG_ESI));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_NORMAL_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_NORMAL));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_LISTEN_ONLY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_LISTEN_ONLY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_LOOP_BACK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_LOOP_BACK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_TRIPLE_SAMPLE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_TRIPLE_SAMPLE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_ONE_SHOT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_ONE_SHOT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_HW_TIMESTAMP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_HW_TIMESTAMP));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_IDENTIFY_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_IDENTIFY));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_USER_ID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_USER_ID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_PAD_PKTS_TO_MAX_PKT_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_PAD_PKTS_TO_MAX_PKT_SIZE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_MODE_FD_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_MODE_FD));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_OK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_OK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_CREATE_FILE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_CREATE_FILE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_WINUSB_INITIALIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_WINUSB_INITIALIZE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_QUERY_INTERFACE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_QUERY_INTERFACE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_QUERY_PIPE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_QUERY_PIPE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_PARSE_IF_DESCR_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_PARSE_IF_DESCR));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SET_HOST_FORMAT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SET_HOST_FORMAT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_GET_DEVICE_INFO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_GET_DEVICE_INFO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_GET_BITTIMING_CONST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_GET_BITTIMING_CONST));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_PREPARE_READ_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_PREPARE_READ));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SET_DEVICE_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SET_DEVICE_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SET_BITTIMING_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SET_BITTIMING));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_BITRATE_FCLK_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_BITRATE_FCLK));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_BITRATE_UNSUPPORTED_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_BITRATE_UNSUPPORTED));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SEND_FRAME_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SEND_FRAME));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_READ_TIMEOUT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_READ_TIMEOUT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_READ_WAIT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_READ_WAIT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_READ_RESULT_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_READ_RESULT));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_READ_SIZE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_READ_SIZE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SETUPDI_IF_DETAILS_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SETUPDI_IF_DETAILS));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SETUPDI_IF_DETAILS2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SETUPDI_IF_DETAILS2));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_MALLOC_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_MALLOC));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_PATH_LEN_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_PATH_LEN));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_CLSID_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_CLSID));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_GET_DEVICES_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_GET_DEVICES));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SETUPDI_IF_ENUM_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SETUPDI_IF_ENUM));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SET_TIMESTAMP_MODE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SET_TIMESTAMP_MODE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_DEV_OUT_OF_RANGE_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_DEV_OUT_OF_RANGE));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_GET_TIMESTAMP_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_GET_TIMESTAMP));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_SET_PIPE_RAW_IO_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_SET_PIPE_RAW_IO));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_getter
Napi::Value exports_CANDLE_ERR_GET_DATA_BITTIMING_CONST_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(CANDLE_ERR_GET_DATA_BITTIMING_CONST));
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_data_set" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "classic_can_t_data_set" "', argument " "2"" of type '" "uint8_t [8]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)8; ++ii) *(uint8_t *)&arg1->data[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""uint8_t [8]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_data_get" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_timestamp_us_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_timestamp_us_set" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "classic_can_t_timestamp_us_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->timestamp_us = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_timestamp_us_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_timestamp_us_get" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);result = (uint32_t) ((arg1)->timestamp_us);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_dummy_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_dummy_set" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "classic_can_t_dummy_set" "', argument " "2"" of type '" "uint8_t [56]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)56; ++ii) *(uint8_t *)&arg1->dummy[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""dummy""' of type '""uint8_t [56]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_wrap_classic_can_t_dummy_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  classic_can *arg1 = (classic_can *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "classic_can_t_dummy_get" "', argument " "1"" of type '" "classic_can *""'"); 
  }
  arg1 = reinterpret_cast< classic_can * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->dummy);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_exports_classic_can_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_classic_can;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  classic_can *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_classic_can_t.");
  }
  result = (classic_can *)new classic_can();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_classic_can_t_templ<SWIG_OBJ_WRAP>::_exports_classic_can_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_classic_can_t_templ<SWIG_OBJ_WRAP>::~_exports_classic_can_t_templ() {
  auto arg1 = reinterpret_cast<classic_can *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_t_templ<SWIG_OBJ_WRAP>::_wrap_canfd_t_data_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd *arg1 = (canfd *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_t_data_set" "', argument " "1"" of type '" "canfd *""'"); 
  }
  arg1 = reinterpret_cast< canfd * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "canfd_t_data_set" "', argument " "2"" of type '" "uint8_t [64]""'"); 
  } 
  arg2 = reinterpret_cast< uint8_t * >(argp2);{
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)64; ++ii) *(uint8_t *)&arg1->data[ii] = *((uint8_t *)arg2 + ii);
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""data""' of type '""uint8_t [64]""'");
    }
  }
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_t_templ<SWIG_OBJ_WRAP>::_wrap_canfd_t_data_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd *arg1 = (canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_t_data_get" "', argument " "1"" of type '" "canfd *""'"); 
  }
  arg1 = reinterpret_cast< canfd * >(argp1);result = (uint8_t *)(uint8_t *) ((arg1)->data);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_canfd_t_templ<SWIG_OBJ_WRAP>::_wrap_canfd_t_timestamp_us_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd *arg1 = (canfd *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_t_timestamp_us_set" "', argument " "1"" of type '" "canfd *""'"); 
  }
  arg1 = reinterpret_cast< canfd * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "canfd_t_timestamp_us_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->timestamp_us = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_canfd_t_templ<SWIG_OBJ_WRAP>::_wrap_canfd_t_timestamp_us_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  canfd *arg1 = (canfd *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_canfd, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "canfd_t_timestamp_us_get" "', argument " "1"" of type '" "canfd *""'"); 
  }
  arg1 = reinterpret_cast< canfd * >(argp1);result = (uint32_t) ((arg1)->timestamp_us);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_canfd_t_templ<SWIG_OBJ_WRAP>::_exports_canfd_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_canfd;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  canfd *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_canfd_t.");
  }
  result = (canfd *)new canfd();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_canfd_t_templ<SWIG_OBJ_WRAP>::_exports_canfd_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_canfd_t_templ<SWIG_OBJ_WRAP>::~_exports_canfd_t_templ() {
  auto arg1 = reinterpret_cast<canfd *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_msg_t_templ<SWIG_OBJ_WRAP>::_wrap_msg_t_classic_can_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  msg_t *arg1 = (msg_t *) 0 ;
  classic_can_t *arg2 = (classic_can_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_msg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_t_classic_can_set" "', argument " "1"" of type '" "msg_t *""'"); 
  }
  arg1 = reinterpret_cast< msg_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_classic_can, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "msg_t_classic_can_set" "', argument " "2"" of type '" "classic_can_t *""'"); 
  }
  arg2 = reinterpret_cast< classic_can_t * >(argp2);if (arg1) (arg1)->classic_can = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_msg_t_templ<SWIG_OBJ_WRAP>::_wrap_msg_t_classic_can_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  msg_t *arg1 = (msg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  classic_can_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_msg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_t_classic_can_get" "', argument " "1"" of type '" "msg_t *""'"); 
  }
  arg1 = reinterpret_cast< msg_t * >(argp1);result = (classic_can_t *)& ((arg1)->classic_can);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_classic_can, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_msg_t_templ<SWIG_OBJ_WRAP>::_wrap_msg_t_canfd_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  msg_t *arg1 = (msg_t *) 0 ;
  canfd_t *arg2 = (canfd_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_msg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_t_canfd_set" "', argument " "1"" of type '" "msg_t *""'"); 
  }
  arg1 = reinterpret_cast< msg_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_canfd, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "msg_t_canfd_set" "', argument " "2"" of type '" "canfd_t *""'"); 
  }
  arg2 = reinterpret_cast< canfd_t * >(argp2);if (arg1) (arg1)->canfd = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_msg_t_templ<SWIG_OBJ_WRAP>::_wrap_msg_t_canfd_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  msg_t *arg1 = (msg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  canfd_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_msg_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "msg_t_canfd_get" "', argument " "1"" of type '" "msg_t *""'"); 
  }
  arg1 = reinterpret_cast< msg_t * >(argp1);result = (canfd_t *)& ((arg1)->canfd);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_canfd, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_msg_t_templ<SWIG_OBJ_WRAP>::_exports_msg_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_msg_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  msg_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_msg_t.");
  }
  result = (msg_t *)new msg_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_msg_t_templ<SWIG_OBJ_WRAP>::_exports_msg_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_msg_t_templ<SWIG_OBJ_WRAP>::~_exports_msg_t_templ() {
  auto arg1 = reinterpret_cast<msg_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_echo_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_echo_id_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_echo_id_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->echo_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_echo_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_echo_id_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint32_t) ((arg1)->echo_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_can_id_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_can_id_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_can_id_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->can_id = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_can_id_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_can_id_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint32_t) ((arg1)->can_id);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_can_dlc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_can_dlc_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_can_dlc_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->can_dlc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_can_dlc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_can_dlc_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t) ((arg1)->can_dlc);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_channel_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_channel_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_channel_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->channel = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_channel_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_channel_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t) ((arg1)->channel);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_flags_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_flags_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_flags_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->flags = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_flags_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_flags_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t) ((arg1)->flags);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_reserved_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  uint8_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_reserved_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_char(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_t_reserved_set" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);if (arg1) (arg1)->reserved = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_reserved_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_reserved_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t) ((arg1)->reserved);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_msg_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  msg_t *arg2 = (msg_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_msg_set" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);res2 = SWIG_ConvertPtr(value, &argp2,SWIGTYPE_p_msg_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_frame_t_msg_set" "', argument " "2"" of type '" "msg_t *""'"); 
  }
  arg2 = reinterpret_cast< msg_t * >(argp2);if (arg1) (arg1)->msg = *arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_frame_t_msg_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  msg_t *result = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_t_msg_get" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (msg_t *)& ((arg1)->msg);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_msg_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_exports_candle_frame_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_frame_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_frame_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_frame_t.");
  }
  result = (candle_frame_t *)new candle_frame_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::_exports_candle_frame_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_frame_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_frame_t_templ() {
  auto arg1 = reinterpret_cast<candle_frame_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_feature_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_feature_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_feature_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->feature = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_feature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_feature_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->feature);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_fclk_can_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_fclk_can_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_fclk_can_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->fclk_can = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_fclk_can_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_fclk_can_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->fclk_can);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg1_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg1_min_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_tseg1_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg1_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg1_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg1_min_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->tseg1_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg1_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg1_max_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_tseg1_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg1_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg1_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg1_max_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->tseg1_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg2_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg2_min_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_tseg2_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg2_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg2_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg2_min_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->tseg2_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg2_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg2_max_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_tseg2_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg2_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_tseg2_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_tseg2_max_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->tseg2_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_sjw_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_sjw_max_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_sjw_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sjw_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_sjw_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_sjw_max_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->sjw_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_min_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_brp_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_min_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->brp_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_max_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_brp_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_max_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->brp_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_inc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_inc_set" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_t_brp_inc_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_inc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_t_brp_inc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_t *arg1 = (candle_capability_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_t_brp_inc_get" "', argument " "1"" of type '" "candle_capability_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_t * >(argp1);result = (uint32_t) ((arg1)->brp_inc);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_exports_candle_capability_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_capability_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_capability_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_capability_t.");
  }
  result = (candle_capability_t *)new candle_capability_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::_exports_candle_capability_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_capability_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_capability_t_templ() {
  auto arg1 = reinterpret_cast<candle_capability_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_feature_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_feature_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_feature_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->feature = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_feature_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_feature_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->feature);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_fclk_can_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_fclk_can_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_fclk_can_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->fclk_can = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_fclk_can_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_fclk_can_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->fclk_can);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg1_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg1_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_tseg1_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg1_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg1_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg1_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->tseg1_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg1_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg1_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_tseg1_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg1_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg1_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg1_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->tseg1_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg2_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg2_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_tseg2_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg2_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg2_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg2_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->tseg2_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg2_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg2_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_tseg2_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->tseg2_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_tseg2_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_tseg2_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->tseg2_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_sjw_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_sjw_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_sjw_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sjw_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_sjw_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_sjw_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->sjw_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_brp_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->brp_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_brp_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->brp_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_inc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_inc_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_brp_inc_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp_inc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_brp_inc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_brp_inc_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->brp_inc);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg1_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg1_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dttseg1_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dttseg1_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg1_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg1_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dttseg1_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg1_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg1_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dttseg1_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dttseg1_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg1_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg1_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dttseg1_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg2_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg2_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dttseg2_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dttseg2_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg2_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg2_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dttseg2_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg2_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg2_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dttseg2_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dttseg2_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dttseg2_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dttseg2_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dttseg2_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtsjw_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtsjw_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dtsjw_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dtsjw_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtsjw_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtsjw_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dtsjw_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_min_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_min_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dtbrp_min_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dtbrp_min = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_min_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_min_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dtbrp_min);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_max_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_max_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dtbrp_max_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dtbrp_max = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_max_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_max_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dtbrp_max);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_inc_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_inc_set" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_capability_extended_t_dtbrp_inc_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->dtbrp_inc = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_capability_extended_t_dtbrp_inc_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_capability_extended_t *arg1 = (candle_capability_extended_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_capability_extended_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_capability_extended_t_dtbrp_inc_get" "', argument " "1"" of type '" "candle_capability_extended_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_capability_extended_t * >(argp1);result = (uint32_t) ((arg1)->dtbrp_inc);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_exports_candle_capability_extended_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_capability_extended_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_capability_extended_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_capability_extended_t.");
  }
  result = (candle_capability_extended_t *)new candle_capability_extended_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::_exports_candle_capability_extended_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_capability_extended_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_capability_extended_t_templ() {
  auto arg1 = reinterpret_cast<candle_capability_extended_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_prop_seg_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_prop_seg_set" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_bittiming_t_prop_seg_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->prop_seg = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_prop_seg_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_prop_seg_get" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);result = (uint32_t) ((arg1)->prop_seg);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_phase_seg1_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_phase_seg1_set" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_bittiming_t_phase_seg1_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->phase_seg1 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_phase_seg1_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_phase_seg1_get" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);result = (uint32_t) ((arg1)->phase_seg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_phase_seg2_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_phase_seg2_set" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_bittiming_t_phase_seg2_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->phase_seg2 = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_phase_seg2_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_phase_seg2_get" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);result = (uint32_t) ((arg1)->phase_seg2);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_sjw_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_sjw_set" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_bittiming_t_sjw_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->sjw = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_sjw_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_sjw_get" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);result = (uint32_t) ((arg1)->sjw);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_setter
template <typename SWIG_OBJ_WRAP>
void _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_brp_set(const Napi::CallbackInfo &info, const Napi::Value &value) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_brp_set" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);ecode2 = SWIG_AsVal_unsigned_SS_int(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_bittiming_t_brp_set" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);if (arg1) (arg1)->brp = arg2;
  
  
  
  return;
  
  goto fail;
fail:
  return;
}


// js_getter
template <typename SWIG_OBJ_WRAP>
Napi::Value _exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_wrap_candle_bittiming_t_brp_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_bittiming_t *arg1 = (candle_bittiming_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  res1 = SWIG_ConvertPtr(info.This(), &argp1,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_bittiming_t_brp_get" "', argument " "1"" of type '" "candle_bittiming_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_bittiming_t * >(argp1);result = (uint32_t) ((arg1)->brp);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


template <typename SWIG_OBJ_WRAP>
// js_ctor
// This is the main constructor
_exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_exports_candle_bittiming_t_templ(const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  Napi::Env env = info.Env();
  
  this->info = SWIGTYPE_p_candle_bittiming_t;
  if (info.Length() == 1 && info[0].IsExternal()) {
    // This constructor has been called internally from C++/SWIG
    // to wrap an already existing C++ object in JS
    this->self = info[0].As<Napi::External<void>>().Data();
    this->owned = false;
    return;
  }
  this->owned = true;
  
  candle_bittiming_t *result;
  if(static_cast<int>(info.Length()) < 0 || static_cast<int>(info.Length()) > 0) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_new_candle_bittiming_t.");
  }
  result = (candle_bittiming_t *)new candle_bittiming_t();
  
  
  this->self = result;
  return;
  goto fail;
fail:
  return;
}

// This is the bypass constructor to be used from child classes
template <typename SWIG_OBJ_WRAP>
_exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::_exports_candle_bittiming_t_templ(bool, const Napi::CallbackInfo &info)
:SWIG_NAPI_ObjectWrap_templ<SWIG_OBJ_WRAP>(true, info) {
  
}


// js_dtoroverride
template <typename SWIG_OBJ_WRAP>
_exports_candle_bittiming_t_templ<SWIG_OBJ_WRAP>::~_exports_candle_bittiming_t_templ() {
  auto arg1 = reinterpret_cast<candle_bittiming_t *>(this->self);
  if (this->owned && arg1) {
    delete arg1;
    this->self = nullptr;
  }
}


// js_global_function
Napi::Value _wrap_candle_list_scan(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_handle arg1 = (candle_list_handle) 0 ;
  int res1 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_list_scan.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_scan" "', argument " "1"" of type '" "candle_list_handle""'"); 
  }result = (bool)candle_list_scan(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_list_length(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_handle arg1 = (candle_list_handle) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_list_length.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_list_length" "', argument " "1"" of type '" "candle_list_handle""'"); 
  }res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_list_length" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);result = (bool)candle_list_length(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_get(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_list_handle arg1 = (candle_list_handle) 0 ;
  uint8_t arg2 ;
  candle_handle arg3 = (candle_handle) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  int res3 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_get.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_get" "', argument " "1"" of type '" "candle_list_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_dev_get" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2],SWIG_as_voidptrptr(&arg3), 0, 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_dev_get" "', argument " "3"" of type '" "candle_handle""'"); 
  }result = (bool)candle_dev_get(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_get_state(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  candle_devstate_t *arg2 = (candle_devstate_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_get_state.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_get_state" "', argument " "1"" of type '" "candle_handle""'"); 
  }res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_candle_devstate_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_dev_get_state" "', argument " "2"" of type '" "candle_devstate_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_devstate_t * >(argp2);result = (bool)candle_dev_get_state(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_get_path(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  wchar_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_get_path.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_get_path" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (wchar_t *)candle_dev_get_path(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_wchar_t, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_get_friendly_name(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  char *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_get_friendly_name.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_get_friendly_name" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (char *)candle_dev_get_friendly_name(arg1);
  jsresult = SWIG_FromCharPtr((const char *)result);
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_open(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_open.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_open" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (bool)candle_dev_open(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_get_timestamp_us(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_get_timestamp_us.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_get_timestamp_us" "', argument " "1"" of type '" "candle_handle""'"); 
  }res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_int, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_dev_get_timestamp_us" "', argument " "2"" of type '" "uint32_t *""'"); 
  }
  arg2 = reinterpret_cast< uint32_t * >(argp2);result = (bool)candle_dev_get_timestamp_us(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_close(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_close.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_close" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (bool)candle_dev_close(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_free(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_free.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_free" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (bool)candle_dev_free(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_count(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_count.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_count" "', argument " "1"" of type '" "candle_handle""'"); 
  }res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_channel_count" "', argument " "2"" of type '" "uint8_t *""'"); 
  }
  arg2 = reinterpret_cast< uint8_t * >(argp2);result = (bool)candle_channel_count(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_get_capabilities(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  candle_capability_t *arg3 = (candle_capability_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_get_capabilities.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_get_capabilities" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_get_capabilities" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_get_capabilities" "', argument " "3"" of type '" "candle_capability_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_capability_t * >(argp3);result = (bool)candle_channel_get_capabilities(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_set_timing(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  candle_bittiming_t *arg3 = (candle_bittiming_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_set_timing.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_set_timing" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_set_timing" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_set_timing" "', argument " "3"" of type '" "candle_bittiming_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_bittiming_t * >(argp3);result = (bool)candle_channel_set_timing(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_set_bitrate(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_set_bitrate.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_set_bitrate" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_set_bitrate" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "candle_channel_set_bitrate" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);result = (bool)candle_channel_set_bitrate(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_set_data_timing(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  candle_bittiming_t *arg3 = (candle_bittiming_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_set_data_timing.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_set_data_timing" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_set_data_timing" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_bittiming_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_set_data_timing" "', argument " "3"" of type '" "candle_bittiming_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_bittiming_t * >(argp3);result = (bool)candle_channel_set_data_timing(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_get_data_capabilities(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  candle_capability_t *arg3 = (candle_capability_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_get_data_capabilities.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_get_data_capabilities" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_get_data_capabilities" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_capability_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_get_data_capabilities" "', argument " "3"" of type '" "candle_capability_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_capability_t * >(argp3);result = (bool)candle_channel_get_data_capabilities(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_start(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  uint32_t arg3 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_start.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_start" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_start" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "candle_channel_start" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);result = (bool)candle_channel_start(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_stop(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_stop.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_stop" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_stop" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);result = (bool)candle_channel_stop(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_send(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  candle_frame_t *arg3 = (candle_frame_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_send.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_send" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_frame_send" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_frame_send" "', argument " "3"" of type '" "candle_frame_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_frame_t * >(argp3);result = (bool)candle_frame_send(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_read(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  candle_frame_t *arg2 = (candle_frame_t *) 0 ;
  uint32_t arg3 ;
  int res1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_read.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_read" "', argument " "1"" of type '" "candle_handle""'"); 
  }res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "candle_frame_read" "', argument " "2"" of type '" "candle_frame_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_frame_t * >(argp2);ecode3 = SWIG_AsVal_unsigned_SS_int(info[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "candle_frame_read" "', argument " "3"" of type '" "uint32_t""'");
  } 
  arg3 = static_cast< uint32_t >(val3);result = (bool)candle_frame_read(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_type(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  candle_frametype_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_type.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_type" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (candle_frametype_t)candle_frame_type(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_id(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_id.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_id" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint32_t)candle_frame_id(arg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_is_extended_id(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_is_extended_id.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_is_extended_id" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (bool)candle_frame_is_extended_id(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_is_rtr(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_is_rtr.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_is_rtr" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (bool)candle_frame_is_rtr(arg1);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_dlc(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_dlc.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_dlc" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t)candle_frame_dlc(arg1);
  jsresult = SWIG_From_unsigned_SS_char  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned char >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_data(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint8_t *result = 0 ;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_data.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_data" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint8_t *)candle_frame_data(arg1);
  jsresult = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_unsigned_char, 0 |  0 );
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_frame_timestamp_us(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_frame_t *arg1 = (candle_frame_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint32_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_frame_timestamp_us.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_frame_timestamp_us" "', argument " "1"" of type '" "candle_frame_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_frame_t * >(argp1);result = (uint32_t)candle_frame_timestamp_us(arg1);
  jsresult = SWIG_From_unsigned_SS_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< unsigned int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_dev_last_error(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  int res1 ;
  candle_err_t result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_dev_last_error.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_dev_last_error" "', argument " "1"" of type '" "candle_handle""'"); 
  }result = (candle_err_t)candle_dev_last_error(arg1);
  jsresult = SWIG_From_int  SWIG_NAPI_FROM_CALL_ARGS(static_cast< int >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_get_can_resister_enable_state(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_get_can_resister_enable_state.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_get_can_resister_enable_state" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_get_can_resister_enable_state" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_get_can_resister_enable_state" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);result = (bool)candle_channel_get_can_resister_enable_state(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_set_can_resister_enable_state(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  uint8_t *arg3 = (uint8_t *) 0 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_set_can_resister_enable_state.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_set_can_resister_enable_state" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_set_can_resister_enable_state" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_unsigned_char, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "candle_channel_set_can_resister_enable_state" "', argument " "3"" of type '" "uint8_t *""'"); 
  }
  arg3 = reinterpret_cast< uint8_t * >(argp3);result = (bool)candle_channel_set_can_resister_enable_state(arg1,arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_candle_channel_set_interfacenumber_endpoints(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_handle arg1 = (candle_handle) 0 ;
  uint8_t arg2 ;
  int res1 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_candle_channel_set_interfacenumber_endpoints.");
  }
  
  res1 = SWIG_ConvertPtr(info[0],SWIG_as_voidptrptr(&arg1), 0, 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "candle_channel_set_interfacenumber_endpoints" "', argument " "1"" of type '" "candle_handle""'"); 
  }ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "candle_channel_set_interfacenumber_endpoints" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);result = (bool)candle_channel_set_interfacenumber_endpoints(arg1,arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_SetContextDevice(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string arg1 ;
  candle_device_t *arg2 = (candle_device_t *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 2 || static_cast<int>(info.Length()) > 2) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SetContextDevice.");
  }
  
  {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(info[0], &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SetContextDevice" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  res2 = SWIG_ConvertPtr(info[1], &argp2,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SetContextDevice" "', argument " "2"" of type '" "candle_device_t *""'"); 
  }
  arg2 = reinterpret_cast< candle_device_t * >(argp2);result = (bool)SetContextDevice(SWIG_STD_MOVE(arg1),arg2);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_SendCANMsg(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  std::string arg1 ;
  uint8_t arg2 ;
  candle_frame_t *arg3 = (candle_frame_t *) 0 ;
  unsigned char val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool result;
  
  if(static_cast<int>(info.Length()) < 3 || static_cast<int>(info.Length()) > 3) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_SendCANMsg.");
  }
  
  {
    {
      std::string *ptr = (std::string *)0;
      int res = SWIG_AsPtr_std_string(info[0], &ptr);
      if (!SWIG_IsOK(res) || !ptr) {
        SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SendCANMsg" "', argument " "1"" of type '" "std::string""'"); 
      }
      arg1 = *ptr;
      if (SWIG_IsNewObj(res)) delete ptr;
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_char(info[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SendCANMsg" "', argument " "2"" of type '" "uint8_t""'");
  } 
  arg2 = static_cast< uint8_t >(val2);res3 = SWIG_ConvertPtr(info[2], &argp3,SWIGTYPE_p_candle_frame_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SendCANMsg" "', argument " "3"" of type '" "candle_frame_t *""'"); 
  }
  arg3 = reinterpret_cast< candle_frame_t * >(argp3);result = (bool)SendCANMsg(SWIG_STD_MOVE(arg1),arg2,arg3);
  jsresult = SWIG_From_bool  SWIG_NAPI_FROM_CALL_ARGS(static_cast< bool >(result));
  
  
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetDeviceFriendlyName(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetDeviceFriendlyName.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDeviceFriendlyName" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = GetDeviceFriendlyName(arg1);
  jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


// js_global_function
Napi::Value _wrap_GetDevicePath(const Napi::CallbackInfo &info) {
  Napi::Env env = info.Env();
  Napi::Value jsresult;
  candle_device_t *arg1 = (candle_device_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if(static_cast<int>(info.Length()) < 1 || static_cast<int>(info.Length()) > 1) {
    SWIG_Error(SWIG_ERROR, "Illegal number of arguments for _wrap_GetDevicePath.");
  }
  
  res1 = SWIG_ConvertPtr(info[0], &argp1,SWIGTYPE_p_candle_device_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GetDevicePath" "', argument " "1"" of type '" "candle_device_t *""'"); 
  }
  arg1 = reinterpret_cast< candle_device_t * >(argp1);result = GetDevicePath(arg1);
  jsresult = SWIG_From_std_string  SWIG_NAPI_FROM_CALL_ARGS(static_cast< std::string >(result));
  
  
  return jsresult;
  
  goto fail;
fail:
  return Napi::Value();
}


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_DeviceArrayTo_p_candle_device_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((candle_device_t *)  ((DeviceArray *) x));
}
static swig_type_info _swigt__p_CharArray = {"_p_CharArray", "CharArray *|p_CharArray", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DeviceArray = {"_p_DeviceArray", "DeviceArray *|p_DeviceArray", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OVERLAPPED = {"_p_OVERLAPPED", "OVERLAPPED *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TS = {"_p_TS", "p_TS|TS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_U8Array = {"_p_U8Array", "p_U8Array|U8Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Uint8Array = {"_p_Uint8Array", "p_Uint8Array|Uint8Array *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WINUSB_INTERFACE_HANDLE = {"_p_WINUSB_INTERFACE_HANDLE", "WINUSB_INTERFACE_HANDLE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___int64 = {"_p___int64", "LONG64 *|LONGLONG *|__int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_bittiming_t = {"_p_candle_bittiming_t", "candle_bittiming_t *|p_candle_bittiming_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_capability_extended_t = {"_p_candle_capability_extended_t", "candle_capability_extended_t *|p_candle_capability_extended_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_capability_t = {"_p_candle_capability_t", "p_candle_capability_t|candle_capability_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_device_config_t = {"_p_candle_device_config_t", "p_candle_device_config_t|candle_device_config_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_device_mode_t = {"_p_candle_device_mode_t", "p_candle_device_mode_t|candle_device_mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_device_t = {"_p_candle_device_t", "candle_device_t *|p_candle_device_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_devstate_t = {"_p_candle_devstate_t", "candle_devstate_t *|enum candle_devstate_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_err_t = {"_p_candle_err_t", "candle_err_t *|enum candle_err_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_frame_t = {"_p_candle_frame_t", "p_candle_frame_t|candle_frame_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_frametype_t = {"_p_candle_frametype_t", "candle_frametype_t *|enum candle_frametype_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_host_config_t = {"_p_candle_host_config_t", "p_candle_host_config_t|candle_host_config_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_list_t = {"_p_candle_list_t", "p_candle_list_t|candle_list_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_candle_mode_t = {"_p_candle_mode_t", "candle_mode_t *|enum candle_mode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_canfd = {"_p_canfd", "canfd *|canfd_t *|p_canfd", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_canlde_rx_urb = {"_p_canlde_rx_urb", "canlde_rx_urb *|p_canlde_rx_urb", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "CCHAR *|CHAR *|TCHAR *|char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_classic_can = {"_p_classic_can", "classic_can *|classic_can_t *|p_classic_can", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "FLOAT *|float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "BOOL *|INT *|INT32 *|INT_PTR *|LONG32 *|int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "HRESULT *|LONG *|LONG_PTR *|SHANDLE_PTR *|SSIZE_T *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_msg_t = {"_p_msg_t", "msg_t *|p_msg_t", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_char = {"_p_p_char", "LPCTSTR *|LPCUTSTR *|LPTCH *|LPTSTR *|LPUTSTR *|PCTSTR *|PCUTSTR *|PTCH *|PTSTR *|PUTSTR *|char **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_unsigned_long = {"_p_p_unsigned_long", "PLCID *|unsigned long **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_void = {"_p_p_void", "HANDLE *|void **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "HALF_PTR *|INT16 *|SHORT *|int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed___int64 = {"_p_signed___int64", "INT64 *|signed __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "INT8 *|int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned___int64 = {"_p_unsigned___int64", "DWORD64 *|DWORDLONG *|UINT64 *|ULONG64 *|ULONGLONG *|unsigned __int64 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "BOOLEAN *|BYTE *|FCHAR *|TBYTE *|UCHAR *|UINT8 *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "DWORD32 *|UINT *|UINT32 *|UINT_PTR *|ULONG32 *|uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "DWORD *|DWORD_PTR *|FLONG *|HANDLE_PTR *|LCID *|SIZE_T *|ULONG *|ULONG_PTR *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "FSHORT *|LANGID *|UHALF_PTR *|UINT16 *|USHORT *|WORD *|uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "HANDLE|void *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CharArray,
  &_swigt__p_DeviceArray,
  &_swigt__p_OVERLAPPED,
  &_swigt__p_TS,
  &_swigt__p_U8Array,
  &_swigt__p_Uint8Array,
  &_swigt__p_WINUSB_INTERFACE_HANDLE,
  &_swigt__p___int64,
  &_swigt__p_candle_bittiming_t,
  &_swigt__p_candle_capability_extended_t,
  &_swigt__p_candle_capability_t,
  &_swigt__p_candle_device_config_t,
  &_swigt__p_candle_device_mode_t,
  &_swigt__p_candle_device_t,
  &_swigt__p_candle_devstate_t,
  &_swigt__p_candle_err_t,
  &_swigt__p_candle_frame_t,
  &_swigt__p_candle_frametype_t,
  &_swigt__p_candle_host_config_t,
  &_swigt__p_candle_list_t,
  &_swigt__p_candle_mode_t,
  &_swigt__p_canfd,
  &_swigt__p_canlde_rx_urb,
  &_swigt__p_char,
  &_swigt__p_classic_can,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_long_long,
  &_swigt__p_msg_t,
  &_swigt__p_p_char,
  &_swigt__p_p_unsigned_long,
  &_swigt__p_p_void,
  &_swigt__p_short,
  &_swigt__p_signed___int64,
  &_swigt__p_signed_char,
  &_swigt__p_unsigned___int64,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_void,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_CharArray[] = {  {&_swigt__p_CharArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DeviceArray[] = {  {&_swigt__p_DeviceArray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OVERLAPPED[] = {  {&_swigt__p_OVERLAPPED, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TS[] = {  {&_swigt__p_TS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_U8Array[] = {  {&_swigt__p_U8Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Uint8Array[] = {  {&_swigt__p_Uint8Array, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WINUSB_INTERFACE_HANDLE[] = {  {&_swigt__p_WINUSB_INTERFACE_HANDLE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___int64[] = {  {&_swigt__p___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_bittiming_t[] = {  {&_swigt__p_candle_bittiming_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_capability_extended_t[] = {  {&_swigt__p_candle_capability_extended_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_capability_t[] = {  {&_swigt__p_candle_capability_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_device_config_t[] = {  {&_swigt__p_candle_device_config_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_device_mode_t[] = {  {&_swigt__p_candle_device_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_device_t[] = {  {&_swigt__p_candle_device_t, 0, 0, 0},  {&_swigt__p_DeviceArray, _p_DeviceArrayTo_p_candle_device_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_devstate_t[] = {  {&_swigt__p_candle_devstate_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_err_t[] = {  {&_swigt__p_candle_err_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_frame_t[] = {  {&_swigt__p_candle_frame_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_frametype_t[] = {  {&_swigt__p_candle_frametype_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_host_config_t[] = {  {&_swigt__p_candle_host_config_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_list_t[] = {  {&_swigt__p_candle_list_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_candle_mode_t[] = {  {&_swigt__p_candle_mode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_canfd[] = {  {&_swigt__p_canfd, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_canlde_rx_urb[] = {  {&_swigt__p_canlde_rx_urb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_classic_can[] = {  {&_swigt__p_classic_can, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_msg_t[] = {  {&_swigt__p_msg_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_char[] = {  {&_swigt__p_p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_unsigned_long[] = {  {&_swigt__p_p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_void[] = {  {&_swigt__p_p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed___int64[] = {  {&_swigt__p_signed___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned___int64[] = {  {&_swigt__p_unsigned___int64, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CharArray,
  _swigc__p_DeviceArray,
  _swigc__p_OVERLAPPED,
  _swigc__p_TS,
  _swigc__p_U8Array,
  _swigc__p_Uint8Array,
  _swigc__p_WINUSB_INTERFACE_HANDLE,
  _swigc__p___int64,
  _swigc__p_candle_bittiming_t,
  _swigc__p_candle_capability_extended_t,
  _swigc__p_candle_capability_t,
  _swigc__p_candle_device_config_t,
  _swigc__p_candle_device_mode_t,
  _swigc__p_candle_device_t,
  _swigc__p_candle_devstate_t,
  _swigc__p_candle_err_t,
  _swigc__p_candle_frame_t,
  _swigc__p_candle_frametype_t,
  _swigc__p_candle_host_config_t,
  _swigc__p_candle_list_t,
  _swigc__p_candle_mode_t,
  _swigc__p_canfd,
  _swigc__p_canlde_rx_urb,
  _swigc__p_char,
  _swigc__p_classic_can,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_long_long,
  _swigc__p_msg_t,
  _swigc__p_p_char,
  _swigc__p_p_unsigned_long,
  _swigc__p_p_void,
  _swigc__p_short,
  _swigc__p_signed___int64,
  _swigc__p_signed_char,
  _swigc__p_unsigned___int64,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_void,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */




EnvInstanceData::EnvInstanceData(Napi::Env env, swig_module_info *swig_module) :
env(env), SWIG_NAPI_ObjectWrapCtor(nullptr), ctor(nullptr), swig_module(swig_module) {
  ctor = new Napi::FunctionReference*[swig_module->size + 1];
  for (size_t i = 0; i <= swig_module->size; i++) {
    ctor[i] = nullptr;
  }
}

EnvInstanceData::~EnvInstanceData() {
  for (size_t i = 0; i <= swig_module->size; i++) {
    if (ctor[i] != nullptr)
      delete ctor[i];
    ctor[i] = nullptr;
  }
  delete [] ctor;
  delete SWIG_NAPI_ObjectWrapCtor;
}

SWIGRUNTIME void
SWIG_NAPI_SetModule(Napi::Env env, swig_module_info *swig_module) {
  auto data = new EnvInstanceData(env, swig_module);
  env.SetInstanceData(data);
}

SWIGRUNTIME swig_module_info *
SWIG_NAPI_GetModule(Napi::Env env) {
  auto data = env.GetInstanceData<EnvInstanceData>();
  if (data == nullptr) return nullptr;
  return data->swig_module;
}

#define SWIG_GetModule(clientdata)                SWIG_NAPI_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)       SWIG_NAPI_SetModule(clientdata, pointer)
#define SWIG_INIT_CLIENT_DATA_TYPE                Napi::Env


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


Napi::Object Init(Napi::Env env, Napi::Object exports) {
  SWIG_InitializeModule(env);



extern void CreateTSFN(const Napi::CallbackInfo &info);
extern void FreeTSFN(const Napi::CallbackInfo &info);


do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("CreateTSFN", CreateTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);

do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("FreeTSFN", FreeTSFN);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
	pd
  }));
} while (0);




  Napi::Function SWIG_NAPI_ObjectWrap_ctor = SWIG_NAPI_ObjectWrap_inst::GetClass(env);
  Napi::FunctionReference *SWIG_NAPI_ObjectWrap_ctor_ref = new Napi::FunctionReference();
  *SWIG_NAPI_ObjectWrap_ctor_ref = Napi::Persistent(SWIG_NAPI_ObjectWrap_ctor);
  env.GetInstanceData<EnvInstanceData>()->SWIG_NAPI_ObjectWrapCtor = SWIG_NAPI_ObjectWrap_ctor_ref;

  /* create objects for namespaces */
  

  /* register classes */
  /* Class: TS (_exports_TS) */
// jsnapi_registerclass
Napi::Function _exports_TS_ctor = _exports_TS_inst::GetClass(env);
exports.Set("TS", _exports_TS_ctor);
if (SWIGTYPE_p_TS->clientdata == nullptr) {
  SWIGTYPE_p_TS->clientdata = new size_t(0);
}
Napi::FunctionReference *_exports_TS_ctor_ref = new Napi::FunctionReference();
*_exports_TS_ctor_ref = Napi::Persistent(_exports_TS_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[0] = _exports_TS_ctor_ref;
/* Class: U8Array (_exports_U8Array) */
// jsnapi_registerclass
Napi::Function _exports_U8Array_ctor = _exports_U8Array_inst::GetClass(env);
exports.Set("U8Array", _exports_U8Array_ctor);
if (SWIGTYPE_p_U8Array->clientdata == nullptr) {
  SWIGTYPE_p_U8Array->clientdata = new size_t(1);
}
Napi::FunctionReference *_exports_U8Array_ctor_ref = new Napi::FunctionReference();
*_exports_U8Array_ctor_ref = Napi::Persistent(_exports_U8Array_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[1] = _exports_U8Array_ctor_ref;
/* Class: DeviceArray (_exports_DeviceArray) */
// jsnapi_registerclass
Napi::Function _exports_DeviceArray_ctor = _exports_DeviceArray_inst::GetClass(env);
exports.Set("DeviceArray", _exports_DeviceArray_ctor);
if (SWIGTYPE_p_DeviceArray->clientdata == nullptr) {
  SWIGTYPE_p_DeviceArray->clientdata = new size_t(2);
}
Napi::FunctionReference *_exports_DeviceArray_ctor_ref = new Napi::FunctionReference();
*_exports_DeviceArray_ctor_ref = Napi::Persistent(_exports_DeviceArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[2] = _exports_DeviceArray_ctor_ref;
/* Class: CharArray (_exports_CharArray) */
// jsnapi_registerclass
Napi::Function _exports_CharArray_ctor = _exports_CharArray_inst::GetClass(env);
exports.Set("CharArray", _exports_CharArray_ctor);
if (SWIGTYPE_p_CharArray->clientdata == nullptr) {
  SWIGTYPE_p_CharArray->clientdata = new size_t(3);
}
Napi::FunctionReference *_exports_CharArray_ctor_ref = new Napi::FunctionReference();
*_exports_CharArray_ctor_ref = Napi::Persistent(_exports_CharArray_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[3] = _exports_CharArray_ctor_ref;
/* Class: Uint8Array (_exports_Uint8Array) */
// jsnapi_registerclass
Napi::Function _exports_Uint8Array_ctor = _exports_Uint8Array_inst::GetClass(env);
exports.Set("Uint8Array", _exports_Uint8Array_ctor);
if (SWIGTYPE_p_Uint8Array->clientdata == nullptr) {
  SWIGTYPE_p_Uint8Array->clientdata = new size_t(4);
}
Napi::FunctionReference *_exports_Uint8Array_ctor_ref = new Napi::FunctionReference();
*_exports_Uint8Array_ctor_ref = Napi::Persistent(_exports_Uint8Array_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[4] = _exports_Uint8Array_ctor_ref;
/* Class: candle_host_config_t (_exports_candle_host_config_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_host_config_t_ctor = _exports_candle_host_config_t_inst::GetClass(env);
exports.Set("candle_host_config_t", _exports_candle_host_config_t_ctor);
if (SWIGTYPE_p_candle_host_config_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_host_config_t->clientdata = new size_t(5);
}
Napi::FunctionReference *_exports_candle_host_config_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_host_config_t_ctor_ref = Napi::Persistent(_exports_candle_host_config_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[5] = _exports_candle_host_config_t_ctor_ref;
/* Class: candle_device_config_t (_exports_candle_device_config_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_device_config_t_ctor = _exports_candle_device_config_t_inst::GetClass(env);
exports.Set("candle_device_config_t", _exports_candle_device_config_t_ctor);
if (SWIGTYPE_p_candle_device_config_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_device_config_t->clientdata = new size_t(6);
}
Napi::FunctionReference *_exports_candle_device_config_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_device_config_t_ctor_ref = Napi::Persistent(_exports_candle_device_config_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[6] = _exports_candle_device_config_t_ctor_ref;
/* Class: candle_device_mode_t (_exports_candle_device_mode_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_device_mode_t_ctor = _exports_candle_device_mode_t_inst::GetClass(env);
exports.Set("candle_device_mode_t", _exports_candle_device_mode_t_ctor);
if (SWIGTYPE_p_candle_device_mode_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_device_mode_t->clientdata = new size_t(7);
}
Napi::FunctionReference *_exports_candle_device_mode_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_device_mode_t_ctor_ref = Napi::Persistent(_exports_candle_device_mode_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[7] = _exports_candle_device_mode_t_ctor_ref;
/* Class: canlde_rx_urb (_exports_canlde_rx_urb) */
// jsnapi_registerclass
Napi::Function _exports_canlde_rx_urb_ctor = _exports_canlde_rx_urb_inst::GetClass(env);
exports.Set("canlde_rx_urb", _exports_canlde_rx_urb_ctor);
if (SWIGTYPE_p_canlde_rx_urb->clientdata == nullptr) {
  SWIGTYPE_p_canlde_rx_urb->clientdata = new size_t(8);
}
Napi::FunctionReference *_exports_canlde_rx_urb_ctor_ref = new Napi::FunctionReference();
*_exports_canlde_rx_urb_ctor_ref = Napi::Persistent(_exports_canlde_rx_urb_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[8] = _exports_canlde_rx_urb_ctor_ref;
/* Class: candle_device_t (_exports_candle_device_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_device_t_ctor = _exports_candle_device_t_inst::GetClass(env);
exports.Set("candle_device_t", _exports_candle_device_t_ctor);
if (SWIGTYPE_p_candle_device_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_device_t->clientdata = new size_t(9);
}
Napi::FunctionReference *_exports_candle_device_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_device_t_ctor_ref = Napi::Persistent(_exports_candle_device_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[9] = _exports_candle_device_t_ctor_ref;
/* Class: candle_list_t (_exports_candle_list_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_list_t_ctor = _exports_candle_list_t_inst::GetClass(env);
exports.Set("candle_list_t", _exports_candle_list_t_ctor);
if (SWIGTYPE_p_candle_list_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_list_t->clientdata = new size_t(10);
}
Napi::FunctionReference *_exports_candle_list_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_list_t_ctor_ref = Napi::Persistent(_exports_candle_list_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[10] = _exports_candle_list_t_ctor_ref;
/* Class: classic_can_t (_exports_classic_can_t) */
// jsnapi_registerclass
Napi::Function _exports_classic_can_t_ctor = _exports_classic_can_t_inst::GetClass(env);
exports.Set("classic_can_t", _exports_classic_can_t_ctor);
if (SWIGTYPE_p_classic_can->clientdata == nullptr) {
  SWIGTYPE_p_classic_can->clientdata = new size_t(11);
}
Napi::FunctionReference *_exports_classic_can_t_ctor_ref = new Napi::FunctionReference();
*_exports_classic_can_t_ctor_ref = Napi::Persistent(_exports_classic_can_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[11] = _exports_classic_can_t_ctor_ref;
/* Class: canfd_t (_exports_canfd_t) */
// jsnapi_registerclass
Napi::Function _exports_canfd_t_ctor = _exports_canfd_t_inst::GetClass(env);
exports.Set("canfd_t", _exports_canfd_t_ctor);
if (SWIGTYPE_p_canfd->clientdata == nullptr) {
  SWIGTYPE_p_canfd->clientdata = new size_t(12);
}
Napi::FunctionReference *_exports_canfd_t_ctor_ref = new Napi::FunctionReference();
*_exports_canfd_t_ctor_ref = Napi::Persistent(_exports_canfd_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[12] = _exports_canfd_t_ctor_ref;
/* Class: msg_t (_exports_msg_t) */
// jsnapi_registerclass
Napi::Function _exports_msg_t_ctor = _exports_msg_t_inst::GetClass(env);
exports.Set("msg_t", _exports_msg_t_ctor);
if (SWIGTYPE_p_msg_t->clientdata == nullptr) {
  SWIGTYPE_p_msg_t->clientdata = new size_t(13);
}
Napi::FunctionReference *_exports_msg_t_ctor_ref = new Napi::FunctionReference();
*_exports_msg_t_ctor_ref = Napi::Persistent(_exports_msg_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[13] = _exports_msg_t_ctor_ref;
/* Class: candle_frame_t (_exports_candle_frame_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_frame_t_ctor = _exports_candle_frame_t_inst::GetClass(env);
exports.Set("candle_frame_t", _exports_candle_frame_t_ctor);
if (SWIGTYPE_p_candle_frame_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_frame_t->clientdata = new size_t(14);
}
Napi::FunctionReference *_exports_candle_frame_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_frame_t_ctor_ref = Napi::Persistent(_exports_candle_frame_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[14] = _exports_candle_frame_t_ctor_ref;
/* Class: candle_capability_t (_exports_candle_capability_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_capability_t_ctor = _exports_candle_capability_t_inst::GetClass(env);
exports.Set("candle_capability_t", _exports_candle_capability_t_ctor);
if (SWIGTYPE_p_candle_capability_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_capability_t->clientdata = new size_t(15);
}
Napi::FunctionReference *_exports_candle_capability_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_capability_t_ctor_ref = Napi::Persistent(_exports_candle_capability_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[15] = _exports_candle_capability_t_ctor_ref;
/* Class: candle_capability_extended_t (_exports_candle_capability_extended_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_capability_extended_t_ctor = _exports_candle_capability_extended_t_inst::GetClass(env);
exports.Set("candle_capability_extended_t", _exports_candle_capability_extended_t_ctor);
if (SWIGTYPE_p_candle_capability_extended_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_capability_extended_t->clientdata = new size_t(16);
}
Napi::FunctionReference *_exports_candle_capability_extended_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_capability_extended_t_ctor_ref = Napi::Persistent(_exports_candle_capability_extended_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[16] = _exports_candle_capability_extended_t_ctor_ref;
/* Class: candle_bittiming_t (_exports_candle_bittiming_t) */
// jsnapi_registerclass
Napi::Function _exports_candle_bittiming_t_ctor = _exports_candle_bittiming_t_inst::GetClass(env);
exports.Set("candle_bittiming_t", _exports_candle_bittiming_t_ctor);
if (SWIGTYPE_p_candle_bittiming_t->clientdata == nullptr) {
  SWIGTYPE_p_candle_bittiming_t->clientdata = new size_t(17);
}
Napi::FunctionReference *_exports_candle_bittiming_t_ctor_ref = new Napi::FunctionReference();
*_exports_candle_bittiming_t_ctor_ref = Napi::Persistent(_exports_candle_bittiming_t_ctor);
env.GetInstanceData<EnvInstanceData>()->ctor[17] = _exports_candle_bittiming_t_ctor_ref;


  /* enable inheritance */
  
Napi::Value jsObjectValue, jsSetProtoValue;
Napi::Object jsObject;
Napi::Function setProto;
NAPI_CHECK_RESULT(env.Global().Get("Object"), jsObjectValue);
NAPI_CHECK_RESULT(jsObjectValue.ToObject(), jsObject);
NAPI_CHECK_RESULT(jsObject.Get("setPrototypeOf"), jsSetProtoValue);
setProto = jsSetProtoValue.As<Napi::Function>();



  /* setup inheritances */
  
// Inheritance for _exports_TS (TS) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_TS_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_TS_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_U8Array (U8Array) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_U8Array_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_U8Array_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_DeviceArray (DeviceArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_DeviceArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_DeviceArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_CharArray (CharArray) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_CharArray_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_CharArray_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_Uint8Array (Uint8Array) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_Uint8Array_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_Uint8Array_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_host_config_t (candle_host_config_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_host_config_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_host_config_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_device_config_t (candle_device_config_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_device_config_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_device_config_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_device_mode_t (candle_device_mode_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_device_mode_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_device_mode_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_canlde_rx_urb (canlde_rx_urb) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_canlde_rx_urb_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_canlde_rx_urb_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_device_t (candle_device_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_device_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_device_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_list_t (candle_list_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_list_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_list_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_classic_can_t (classic_can_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_classic_can_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_classic_can_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_canfd_t (canfd_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_canfd_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_canfd_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_msg_t (msg_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_msg_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_msg_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_frame_t (candle_frame_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_frame_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_frame_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_capability_t (candle_capability_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_capability_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_capability_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_capability_extended_t (candle_capability_extended_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_capability_extended_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_capability_extended_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);


// Inheritance for _exports_candle_bittiming_t (candle_bittiming_t) <- SWIG_NAPI_ObjectWrap
// jsnapi_setup_inheritance
do {
  Napi::Value protoBase, protoSub;
  NAPI_CHECK_RESULT(_exports_candle_bittiming_t_ctor.Get("prototype"), protoSub);
  NAPI_CHECK_RESULT(SWIG_NAPI_ObjectWrap_ctor.Get("prototype"), protoBase);
  NAPI_CHECK_MAYBE(setProto.Call({
    _exports_candle_bittiming_t_ctor, SWIG_NAPI_ObjectWrap_ctor
  }));
  NAPI_CHECK_MAYBE(setProto.Call({
    protoSub, protoBase
  }));
} while (0);



  /* create and register namespace objects */
  // jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MAX_DEVICES_get, JS_veto_set_variable>("CANDLE_MAX_DEVICES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_URB_COUNT_get, JS_veto_set_variable>("CANDLE_URB_COUNT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_RX_BUF_SIZE_get, JS_veto_set_variable>("CANDLE_RX_BUF_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_DEVSTATE_AVAIL_get, JS_veto_set_variable>("CANDLE_DEVSTATE_AVAIL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_DEVSTATE_INUSE_get, JS_veto_set_variable>("CANDLE_DEVSTATE_INUSE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FRAMETYPE_UNKNOWN_get, JS_veto_set_variable>("CANDLE_FRAMETYPE_UNKNOWN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FRAMETYPE_RECEIVE_get, JS_veto_set_variable>("CANDLE_FRAMETYPE_RECEIVE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FRAMETYPE_ECHO_get, JS_veto_set_variable>("CANDLE_FRAMETYPE_ECHO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FRAMETYPE_ERROR_get, JS_veto_set_variable>("CANDLE_FRAMETYPE_ERROR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FRAMETYPE_TIMESTAMP_OVFL_get, JS_veto_set_variable>("CANDLE_FRAMETYPE_TIMESTAMP_OVFL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ID_EXTENDED_get, JS_veto_set_variable>("CANDLE_ID_EXTENDED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ID_RTR_get, JS_veto_set_variable>("CANDLE_ID_RTR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ID_ERR_get, JS_veto_set_variable>("CANDLE_ID_ERR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FLAG_OVERFLOW_get, JS_veto_set_variable>("CANDLE_FLAG_OVERFLOW");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FLAG_FD_get, JS_veto_set_variable>("CANDLE_FLAG_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FLAG_BRS_get, JS_veto_set_variable>("CANDLE_FLAG_BRS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_FLAG_ESI_get, JS_veto_set_variable>("CANDLE_FLAG_ESI");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_NORMAL_get, JS_veto_set_variable>("CANDLE_MODE_NORMAL");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_LISTEN_ONLY_get, JS_veto_set_variable>("CANDLE_MODE_LISTEN_ONLY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_LOOP_BACK_get, JS_veto_set_variable>("CANDLE_MODE_LOOP_BACK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_TRIPLE_SAMPLE_get, JS_veto_set_variable>("CANDLE_MODE_TRIPLE_SAMPLE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_ONE_SHOT_get, JS_veto_set_variable>("CANDLE_MODE_ONE_SHOT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_HW_TIMESTAMP_get, JS_veto_set_variable>("CANDLE_MODE_HW_TIMESTAMP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_IDENTIFY_get, JS_veto_set_variable>("CANDLE_MODE_IDENTIFY");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_USER_ID_get, JS_veto_set_variable>("CANDLE_MODE_USER_ID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_PAD_PKTS_TO_MAX_PKT_SIZE_get, JS_veto_set_variable>("CANDLE_MODE_PAD_PKTS_TO_MAX_PKT_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_MODE_FD_get, JS_veto_set_variable>("CANDLE_MODE_FD");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_OK_get, JS_veto_set_variable>("CANDLE_ERR_OK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_CREATE_FILE_get, JS_veto_set_variable>("CANDLE_ERR_CREATE_FILE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_WINUSB_INITIALIZE_get, JS_veto_set_variable>("CANDLE_ERR_WINUSB_INITIALIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_QUERY_INTERFACE_get, JS_veto_set_variable>("CANDLE_ERR_QUERY_INTERFACE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_QUERY_PIPE_get, JS_veto_set_variable>("CANDLE_ERR_QUERY_PIPE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_PARSE_IF_DESCR_get, JS_veto_set_variable>("CANDLE_ERR_PARSE_IF_DESCR");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SET_HOST_FORMAT_get, JS_veto_set_variable>("CANDLE_ERR_SET_HOST_FORMAT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_GET_DEVICE_INFO_get, JS_veto_set_variable>("CANDLE_ERR_GET_DEVICE_INFO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_GET_BITTIMING_CONST_get, JS_veto_set_variable>("CANDLE_ERR_GET_BITTIMING_CONST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_PREPARE_READ_get, JS_veto_set_variable>("CANDLE_ERR_PREPARE_READ");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SET_DEVICE_MODE_get, JS_veto_set_variable>("CANDLE_ERR_SET_DEVICE_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SET_BITTIMING_get, JS_veto_set_variable>("CANDLE_ERR_SET_BITTIMING");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_BITRATE_FCLK_get, JS_veto_set_variable>("CANDLE_ERR_BITRATE_FCLK");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_BITRATE_UNSUPPORTED_get, JS_veto_set_variable>("CANDLE_ERR_BITRATE_UNSUPPORTED");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SEND_FRAME_get, JS_veto_set_variable>("CANDLE_ERR_SEND_FRAME");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_READ_TIMEOUT_get, JS_veto_set_variable>("CANDLE_ERR_READ_TIMEOUT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_READ_WAIT_get, JS_veto_set_variable>("CANDLE_ERR_READ_WAIT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_READ_RESULT_get, JS_veto_set_variable>("CANDLE_ERR_READ_RESULT");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_READ_SIZE_get, JS_veto_set_variable>("CANDLE_ERR_READ_SIZE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SETUPDI_IF_DETAILS_get, JS_veto_set_variable>("CANDLE_ERR_SETUPDI_IF_DETAILS");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SETUPDI_IF_DETAILS2_get, JS_veto_set_variable>("CANDLE_ERR_SETUPDI_IF_DETAILS2");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_MALLOC_get, JS_veto_set_variable>("CANDLE_ERR_MALLOC");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_PATH_LEN_get, JS_veto_set_variable>("CANDLE_ERR_PATH_LEN");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_CLSID_get, JS_veto_set_variable>("CANDLE_ERR_CLSID");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_GET_DEVICES_get, JS_veto_set_variable>("CANDLE_ERR_GET_DEVICES");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SETUPDI_IF_ENUM_get, JS_veto_set_variable>("CANDLE_ERR_SETUPDI_IF_ENUM");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SET_TIMESTAMP_MODE_get, JS_veto_set_variable>("CANDLE_ERR_SET_TIMESTAMP_MODE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_DEV_OUT_OF_RANGE_get, JS_veto_set_variable>("CANDLE_ERR_DEV_OUT_OF_RANGE");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_GET_TIMESTAMP_get, JS_veto_set_variable>("CANDLE_ERR_GET_TIMESTAMP");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_SET_PIPE_RAW_IO_get, JS_veto_set_variable>("CANDLE_ERR_SET_PIPE_RAW_IO");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_variable
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Accessor<exports_CANDLE_ERR_GET_DATA_BITTIMING_CONST_get, JS_veto_set_variable>("CANDLE_ERR_GET_DATA_BITTIMING_CONST");
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_list_scan", _wrap_candle_list_scan);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_list_length", _wrap_candle_list_length);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_get", _wrap_candle_dev_get);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_get_state", _wrap_candle_dev_get_state);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_get_path", _wrap_candle_dev_get_path);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_get_friendly_name", _wrap_candle_dev_get_friendly_name);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_open", _wrap_candle_dev_open);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_get_timestamp_us", _wrap_candle_dev_get_timestamp_us);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_close", _wrap_candle_dev_close);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_free", _wrap_candle_dev_free);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_count", _wrap_candle_channel_count);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_get_capabilities", _wrap_candle_channel_get_capabilities);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_set_timing", _wrap_candle_channel_set_timing);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_set_bitrate", _wrap_candle_channel_set_bitrate);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_set_data_timing", _wrap_candle_channel_set_data_timing);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_get_data_capabilities", _wrap_candle_channel_get_data_capabilities);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_start", _wrap_candle_channel_start);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_stop", _wrap_candle_channel_stop);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_send", _wrap_candle_frame_send);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_read", _wrap_candle_frame_read);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_type", _wrap_candle_frame_type);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_id", _wrap_candle_frame_id);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_is_extended_id", _wrap_candle_frame_is_extended_id);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_is_rtr", _wrap_candle_frame_is_rtr);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_dlc", _wrap_candle_frame_dlc);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_data", _wrap_candle_frame_data);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_frame_timestamp_us", _wrap_candle_frame_timestamp_us);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_dev_last_error", _wrap_candle_dev_last_error);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_get_can_resister_enable_state", _wrap_candle_channel_get_can_resister_enable_state);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_set_can_resister_enable_state", _wrap_candle_channel_set_can_resister_enable_state);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("candle_channel_set_interfacenumber_endpoints", _wrap_candle_channel_set_interfacenumber_endpoints);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SetContextDevice", _wrap_SetContextDevice);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("SendCANMsg", _wrap_SendCANMsg);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetDeviceFriendlyName", _wrap_GetDeviceFriendlyName);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);
// jsnapi_register_global_function
do {
  Napi::PropertyDescriptor pd = Napi::PropertyDescriptor::Function("GetDevicePath", _wrap_GetDevicePath);
  NAPI_CHECK_MAYBE(exports.DefineProperties({
    pd
  }));
} while (0);


  return exports;
  goto fail;
fail:
  return Napi::Object();
}

NODE_API_MODULE(xmlpp, Init)

